(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
var Heap = require('./ocaml/heap.bs.js');


function render (o, root) {
    var e = $('<div style="display:flex; flex-direction:horizontal">');
    root.append(e);
    o.forEach(function (tree, i) {
        var c = $('<div>').attr('id', 'HEAPTREE'+i);
        e.append(c);

        var width = 150*(tree.rank+1);
        c.css('width', ''+width+'px');
        c.css('height', '600px');

        new Treant({chart: {container: '#HEAPTREE'+i, 
                            nodeAlign: 'TOP'}, // not effective
                    nodeStructure: tree}); 

    });

}

function main () {
    var h = Heap.empty;
    var root = $('#heap');
    var history = $('#history');
    var current = -1;

    function rerender () {
        root.empty();
        var o = JSON.parse(Heap.json_of_heap(h));
        console.log('rerender', JSON.stringify(o));
        render(o, root);
    }

    rerender();

    $('#insert').click(function () {
        var input = $('#input-value');
        var v = Number(input.val());
        h = Heap.insert(v, h);
        input.val(v+1);
        rerender();
        pushHistory('insert '+v, h);
    });

    $('#deleteMin').click(function () {
        h = Heap.deleteMin(h);
        rerender();
        pushHistory('deleteMin', h);
    });

    function pushHistory (text, heap) {
        history.children().slice(current+1).remove();
        current += 1;
        history.append($('<span>').text(text).data('heap', heap).data('index', current));
    }

    $('#history').on('click', 'span', function () {
        h = $(this).data('heap');
        current = $(this).data('index');
        rerender();
    });
}

$(main);

},{"./ocaml/heap.bs.js":30}],2:[function(require,module,exports){
'use strict';


function __(tag, block) {
  block.tag = tag;
  return block;
}

function record(meta, xs) {
  return Object.defineProperty(xs, Symbol.for("BsRecord"), {
              value: meta
            });
}

function variant(meta, tag, xs) {
  xs.tag = tag;
  return Object.defineProperty(xs, Symbol.for("BsVariant"), {
              value: meta
            });
}

function simpleVariant(meta, xs) {
  return Object.defineProperty(xs, Symbol.for("BsVariant"), {
              value: meta
            });
}

function localModule(meta, xs) {
  return Object.defineProperty(xs, Symbol.for("BsLocalModule"), {
              value: meta
            });
}

function polyVar(meta, xs) {
  return Object.defineProperty(xs, Symbol.for("BsPolyVar"), {
              value: meta
            });
}

function spliceApply (fn,args){
  var i, argLen; 
  argLen = args.length
  var applied = []
  for(i = 0; i < argLen - 1; ++i){
    applied.push(args[i])
  }
  var lastOne = args[argLen - 1]
  for(i = 0; i < lastOne.length; ++i ){
    applied.push(lastOne[i])
  }
  return fn.apply(null,applied)
};

function spliceObjApply (obj,name,args){
  var i, argLen; 
  argLen = args.length
  var applied = []
  for(i = 0; i < argLen - 1; ++i){
    applied.push(args[i])
  }
  var lastOne = args[argLen - 1]
  for(i = 0; i < lastOne.length; ++i ){
    applied.push(lastOne[i])
  }
  return (obj[name]).apply(obj,applied)
};

exports.__ = __;
exports.record = record;
exports.variant = variant;
exports.simpleVariant = simpleVariant;
exports.localModule = localModule;
exports.polyVar = polyVar;
exports.spliceApply = spliceApply;
exports.spliceObjApply = spliceObjApply;
/* No side effect */

},{}],3:[function(require,module,exports){
'use strict';

var Bytes = require("./bytes.js");
var Curry = require("./curry.js");
var $$String = require("./string.js");
var Caml_bytes = require("./caml_bytes.js");
var Pervasives = require("./pervasives.js");
var Caml_string = require("./caml_string.js");
var Caml_builtin_exceptions = require("./caml_builtin_exceptions.js");

function create(n) {
  var n$1 = n < 1 ? 1 : n;
  var s = Caml_bytes.caml_create_bytes(n$1);
  return /* record */[
          /* buffer */s,
          /* position */0,
          /* length */n$1,
          /* initial_buffer */s
        ];
}

function contents(b) {
  return Bytes.sub_string(b[/* buffer */0], 0, b[/* position */1]);
}

function to_bytes(b) {
  return Bytes.sub(b[/* buffer */0], 0, b[/* position */1]);
}

function sub(b, ofs, len) {
  if (ofs < 0 || len < 0 || ofs > (b[/* position */1] - len | 0)) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "Buffer.sub"
        ];
  } else {
    return Bytes.sub_string(b[/* buffer */0], ofs, len);
  }
}

function blit(src, srcoff, dst, dstoff, len) {
  if (len < 0 || srcoff < 0 || srcoff > (src[/* position */1] - len | 0) || dstoff < 0 || dstoff > (dst.length - len | 0)) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "Buffer.blit"
        ];
  } else {
    return Bytes.blit(src[/* buffer */0], srcoff, dst, dstoff, len);
  }
}

function nth(b, ofs) {
  if (ofs < 0 || ofs >= b[/* position */1]) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "Buffer.nth"
        ];
  } else {
    return b[/* buffer */0][ofs];
  }
}

function length(b) {
  return b[/* position */1];
}

function clear(b) {
  b[/* position */1] = 0;
  return /* () */0;
}

function reset(b) {
  b[/* position */1] = 0;
  b[/* buffer */0] = b[/* initial_buffer */3];
  b[/* length */2] = b[/* buffer */0].length;
  return /* () */0;
}

function resize(b, more) {
  var len = b[/* length */2];
  var new_len = len;
  while((b[/* position */1] + more | 0) > new_len) {
    new_len = (new_len << 1);
  };
  var new_buffer = Caml_bytes.caml_create_bytes(new_len);
  Bytes.blit(b[/* buffer */0], 0, new_buffer, 0, b[/* position */1]);
  b[/* buffer */0] = new_buffer;
  b[/* length */2] = new_len;
  return /* () */0;
}

function add_char(b, c) {
  var pos = b[/* position */1];
  if (pos >= b[/* length */2]) {
    resize(b, 1);
  }
  b[/* buffer */0][pos] = c;
  b[/* position */1] = pos + 1 | 0;
  return /* () */0;
}

function add_substring(b, s, offset, len) {
  if (offset < 0 || len < 0 || (offset + len | 0) > s.length) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "Buffer.add_substring/add_subbytes"
        ];
  }
  var new_position = b[/* position */1] + len | 0;
  if (new_position > b[/* length */2]) {
    resize(b, len);
  }
  Bytes.blit_string(s, offset, b[/* buffer */0], b[/* position */1], len);
  b[/* position */1] = new_position;
  return /* () */0;
}

function add_subbytes(b, s, offset, len) {
  return add_substring(b, Caml_bytes.bytes_to_string(s), offset, len);
}

function add_string(b, s) {
  var len = s.length;
  var new_position = b[/* position */1] + len | 0;
  if (new_position > b[/* length */2]) {
    resize(b, len);
  }
  Bytes.blit_string(s, 0, b[/* buffer */0], b[/* position */1], len);
  b[/* position */1] = new_position;
  return /* () */0;
}

function add_bytes(b, s) {
  return add_string(b, Caml_bytes.bytes_to_string(s));
}

function add_buffer(b, bs) {
  return add_subbytes(b, bs[/* buffer */0], 0, bs[/* position */1]);
}

function add_channel(b, ic, len) {
  if (len < 0) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "Buffer.add_channel"
        ];
  }
  if ((b[/* position */1] + len | 0) > b[/* length */2]) {
    resize(b, len);
  }
  Pervasives.really_input(ic, b[/* buffer */0], b[/* position */1], len);
  b[/* position */1] = b[/* position */1] + len | 0;
  return /* () */0;
}

function output_buffer(oc, b) {
  return Pervasives.output(oc, b[/* buffer */0], 0, b[/* position */1]);
}

function closing(param) {
  if (param !== 40) {
    if (param !== 123) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "buffer.ml",
              126,
              9
            ]
          ];
    } else {
      return /* "}" */125;
    }
  } else {
    return /* ")" */41;
  }
}

function advance_to_closing(opening, closing, k, s, start) {
  var _k = k;
  var _i = start;
  var lim = s.length;
  while(true) {
    var i = _i;
    var k$1 = _k;
    if (i >= lim) {
      throw Caml_builtin_exceptions.not_found;
    } else if (Caml_string.get(s, i) === opening) {
      _i = i + 1 | 0;
      _k = k$1 + 1 | 0;
      continue ;
    } else if (Caml_string.get(s, i) === closing) {
      if (k$1 === 0) {
        return i;
      } else {
        _i = i + 1 | 0;
        _k = k$1 - 1 | 0;
        continue ;
      }
    } else {
      _i = i + 1 | 0;
      continue ;
    }
  };
}

function advance_to_non_alpha(s, start) {
  var _i = start;
  var lim = s.length;
  while(true) {
    var i = _i;
    if (i >= lim) {
      return lim;
    } else {
      var match = Caml_string.get(s, i);
      var exit = 0;
      if (match >= 91) {
        if (match >= 97) {
          if (match >= 123) {
            return i;
          } else {
            exit = 1;
          }
        } else if (match !== 95) {
          return i;
        } else {
          exit = 1;
        }
      } else if (match >= 58) {
        if (match >= 65) {
          exit = 1;
        } else {
          return i;
        }
      } else if (match >= 48) {
        exit = 1;
      } else {
        return i;
      }
      if (exit === 1) {
        _i = i + 1 | 0;
        continue ;
      }
      
    }
  };
}

function find_ident(s, start, lim) {
  if (start >= lim) {
    throw Caml_builtin_exceptions.not_found;
  } else {
    var c = Caml_string.get(s, start);
    var exit = 0;
    if (c !== 40 && c !== 123) {
      var stop = advance_to_non_alpha(s, start + 1 | 0);
      return /* tuple */[
              $$String.sub(s, start, stop - start | 0),
              stop
            ];
    } else {
      exit = 1;
    }
    if (exit === 1) {
      var new_start = start + 1 | 0;
      var stop$1 = advance_to_closing(c, closing(c), 0, s, new_start);
      return /* tuple */[
              $$String.sub(s, new_start, (stop$1 - start | 0) - 1 | 0),
              stop$1 + 1 | 0
            ];
    }
    
  }
}

function add_substitute(b, f, s) {
  var lim = s.length;
  var _previous = /* " " */32;
  var _i = 0;
  while(true) {
    var i = _i;
    var previous = _previous;
    if (i < lim) {
      var current = Caml_string.get(s, i);
      if (current !== 36) {
        if (previous === /* "\\" */92) {
          add_char(b, /* "\\" */92);
          add_char(b, current);
          _i = i + 1 | 0;
          _previous = /* " " */32;
          continue ;
        } else if (current !== 92) {
          add_char(b, current);
          _i = i + 1 | 0;
          _previous = current;
          continue ;
        } else {
          _i = i + 1 | 0;
          _previous = current;
          continue ;
        }
      } else if (previous === /* "\\" */92) {
        add_char(b, current);
        _i = i + 1 | 0;
        _previous = /* " " */32;
        continue ;
      } else {
        var j = i + 1 | 0;
        var match = find_ident(s, j, lim);
        add_string(b, Curry._1(f, match[0]));
        _i = match[1];
        _previous = /* " " */32;
        continue ;
      }
    } else if (previous === /* "\\" */92) {
      return add_char(b, previous);
    } else {
      return 0;
    }
  };
}

exports.create = create;
exports.contents = contents;
exports.to_bytes = to_bytes;
exports.sub = sub;
exports.blit = blit;
exports.nth = nth;
exports.length = length;
exports.clear = clear;
exports.reset = reset;
exports.add_char = add_char;
exports.add_string = add_string;
exports.add_bytes = add_bytes;
exports.add_substring = add_substring;
exports.add_subbytes = add_subbytes;
exports.add_substitute = add_substitute;
exports.add_buffer = add_buffer;
exports.add_channel = add_channel;
exports.output_buffer = output_buffer;
/* No side effect */

},{"./bytes.js":4,"./caml_builtin_exceptions.js":6,"./caml_bytes.js":7,"./caml_string.js":18,"./curry.js":24,"./pervasives.js":26,"./string.js":28}],4:[function(require,module,exports){
'use strict';

var Char = require("./char.js");
var List = require("./list.js");
var Curry = require("./curry.js");
var Caml_obj = require("./caml_obj.js");
var Caml_bytes = require("./caml_bytes.js");
var Caml_int32 = require("./caml_int32.js");
var Caml_primitive = require("./caml_primitive.js");
var Caml_builtin_exceptions = require("./caml_builtin_exceptions.js");

function make(n, c) {
  var s = Caml_bytes.caml_create_bytes(n);
  Caml_bytes.caml_fill_bytes(s, 0, n, c);
  return s;
}

function init(n, f) {
  var s = Caml_bytes.caml_create_bytes(n);
  for(var i = 0 ,i_finish = n - 1 | 0; i <= i_finish; ++i){
    s[i] = Curry._1(f, i);
  }
  return s;
}

var empty = [];

function copy(s) {
  var len = s.length;
  var r = Caml_bytes.caml_create_bytes(len);
  Caml_bytes.caml_blit_bytes(s, 0, r, 0, len);
  return r;
}

function to_string(b) {
  return Caml_bytes.bytes_to_string(copy(b));
}

function of_string(s) {
  return copy(Caml_bytes.bytes_of_string(s));
}

function sub(s, ofs, len) {
  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "String.sub / Bytes.sub"
        ];
  } else {
    var r = Caml_bytes.caml_create_bytes(len);
    Caml_bytes.caml_blit_bytes(s, ofs, r, 0, len);
    return r;
  }
}

function sub_string(b, ofs, len) {
  return Caml_bytes.bytes_to_string(sub(b, ofs, len));
}

function extend(s, left, right) {
  var len = (s.length + left | 0) + right | 0;
  var r = Caml_bytes.caml_create_bytes(len);
  var match = left < 0 ? /* tuple */[
      -left | 0,
      0
    ] : /* tuple */[
      0,
      left
    ];
  var dstoff = match[1];
  var srcoff = match[0];
  var cpylen = Caml_primitive.caml_int_min(s.length - srcoff | 0, len - dstoff | 0);
  if (cpylen > 0) {
    Caml_bytes.caml_blit_bytes(s, srcoff, r, dstoff, cpylen);
  }
  return r;
}

function fill(s, ofs, len, c) {
  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "String.fill / Bytes.fill"
        ];
  } else {
    return Caml_bytes.caml_fill_bytes(s, ofs, len, c);
  }
}

function blit(s1, ofs1, s2, ofs2, len) {
  if (len < 0 || ofs1 < 0 || ofs1 > (s1.length - len | 0) || ofs2 < 0 || ofs2 > (s2.length - len | 0)) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "Bytes.blit"
        ];
  } else {
    return Caml_bytes.caml_blit_bytes(s1, ofs1, s2, ofs2, len);
  }
}

function blit_string(s1, ofs1, s2, ofs2, len) {
  if (len < 0 || ofs1 < 0 || ofs1 > (s1.length - len | 0) || ofs2 < 0 || ofs2 > (s2.length - len | 0)) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "String.blit / Bytes.blit_string"
        ];
  } else {
    return Caml_bytes.caml_blit_string(s1, ofs1, s2, ofs2, len);
  }
}

function iter(f, a) {
  for(var i = 0 ,i_finish = a.length - 1 | 0; i <= i_finish; ++i){
    Curry._1(f, a[i]);
  }
  return /* () */0;
}

function iteri(f, a) {
  for(var i = 0 ,i_finish = a.length - 1 | 0; i <= i_finish; ++i){
    Curry._2(f, i, a[i]);
  }
  return /* () */0;
}

function concat(sep, l) {
  if (l) {
    var hd = l[0];
    var num = /* record */[/* contents */0];
    var len = /* record */[/* contents */0];
    List.iter((function (s) {
            num[0] = num[0] + 1 | 0;
            len[0] = len[0] + s.length | 0;
            return /* () */0;
          }), l);
    var r = Caml_bytes.caml_create_bytes(len[0] + Caml_int32.imul(sep.length, num[0] - 1 | 0) | 0);
    Caml_bytes.caml_blit_bytes(hd, 0, r, 0, hd.length);
    var pos = /* record */[/* contents */hd.length];
    List.iter((function (s) {
            Caml_bytes.caml_blit_bytes(sep, 0, r, pos[0], sep.length);
            pos[0] = pos[0] + sep.length | 0;
            Caml_bytes.caml_blit_bytes(s, 0, r, pos[0], s.length);
            pos[0] = pos[0] + s.length | 0;
            return /* () */0;
          }), l[1]);
    return r;
  } else {
    return empty;
  }
}

function cat(s1, s2) {
  var l1 = s1.length;
  var l2 = s2.length;
  var r = Caml_bytes.caml_create_bytes(l1 + l2 | 0);
  Caml_bytes.caml_blit_bytes(s1, 0, r, 0, l1);
  Caml_bytes.caml_blit_bytes(s2, 0, r, l1, l2);
  return r;
}

function is_space(param) {
  var switcher = param - 9 | 0;
  if (switcher > 4 || switcher < 0) {
    return switcher === 23;
  } else {
    return switcher !== 2;
  }
}

function trim(s) {
  var len = s.length;
  var i = 0;
  while(i < len && is_space(s[i])) {
    i = i + 1 | 0;
  };
  var j = len - 1 | 0;
  while(j >= i && is_space(s[j])) {
    j = j - 1 | 0;
  };
  if (j >= i) {
    return sub(s, i, (j - i | 0) + 1 | 0);
  } else {
    return empty;
  }
}

function escaped(s) {
  var n = 0;
  for(var i = 0 ,i_finish = s.length - 1 | 0; i <= i_finish; ++i){
    var match = s[i];
    var tmp;
    if (match >= 32) {
      var switcher = match - 34 | 0;
      tmp = switcher > 58 || switcher < 0 ? (
          switcher >= 93 ? 4 : 1
        ) : (
          switcher > 57 || switcher < 1 ? 2 : 1
        );
    } else {
      tmp = match >= 11 ? (
          match !== 13 ? 4 : 2
        ) : (
          match >= 8 ? 2 : 4
        );
    }
    n = n + tmp | 0;
  }
  if (n === s.length) {
    return copy(s);
  } else {
    var s$prime = Caml_bytes.caml_create_bytes(n);
    n = 0;
    for(var i$1 = 0 ,i_finish$1 = s.length - 1 | 0; i$1 <= i_finish$1; ++i$1){
      var c = s[i$1];
      var exit = 0;
      if (c >= 35) {
        if (c !== 92) {
          if (c >= 127) {
            exit = 1;
          } else {
            s$prime[n] = c;
          }
        } else {
          exit = 2;
        }
      } else if (c >= 32) {
        if (c >= 34) {
          exit = 2;
        } else {
          s$prime[n] = c;
        }
      } else if (c >= 14) {
        exit = 1;
      } else {
        switch (c) {
          case 8 : 
              s$prime[n] = /* "\\" */92;
              n = n + 1 | 0;
              s$prime[n] = /* "b" */98;
              break;
          case 9 : 
              s$prime[n] = /* "\\" */92;
              n = n + 1 | 0;
              s$prime[n] = /* "t" */116;
              break;
          case 10 : 
              s$prime[n] = /* "\\" */92;
              n = n + 1 | 0;
              s$prime[n] = /* "n" */110;
              break;
          case 0 : 
          case 1 : 
          case 2 : 
          case 3 : 
          case 4 : 
          case 5 : 
          case 6 : 
          case 7 : 
          case 11 : 
          case 12 : 
              exit = 1;
              break;
          case 13 : 
              s$prime[n] = /* "\\" */92;
              n = n + 1 | 0;
              s$prime[n] = /* "r" */114;
              break;
          
        }
      }
      switch (exit) {
        case 1 : 
            s$prime[n] = /* "\\" */92;
            n = n + 1 | 0;
            s$prime[n] = 48 + (c / 100 | 0) | 0;
            n = n + 1 | 0;
            s$prime[n] = 48 + (c / 10 | 0) % 10 | 0;
            n = n + 1 | 0;
            s$prime[n] = 48 + c % 10 | 0;
            break;
        case 2 : 
            s$prime[n] = /* "\\" */92;
            n = n + 1 | 0;
            s$prime[n] = c;
            break;
        
      }
      n = n + 1 | 0;
    }
    return s$prime;
  }
}

function map(f, s) {
  var l = s.length;
  if (l === 0) {
    return s;
  } else {
    var r = Caml_bytes.caml_create_bytes(l);
    for(var i = 0 ,i_finish = l - 1 | 0; i <= i_finish; ++i){
      r[i] = Curry._1(f, s[i]);
    }
    return r;
  }
}

function mapi(f, s) {
  var l = s.length;
  if (l === 0) {
    return s;
  } else {
    var r = Caml_bytes.caml_create_bytes(l);
    for(var i = 0 ,i_finish = l - 1 | 0; i <= i_finish; ++i){
      r[i] = Curry._2(f, i, s[i]);
    }
    return r;
  }
}

function uppercase(s) {
  return map(Char.uppercase, s);
}

function lowercase(s) {
  return map(Char.lowercase, s);
}

function apply1(f, s) {
  if (s.length === 0) {
    return s;
  } else {
    var r = copy(s);
    r[0] = Curry._1(f, s[0]);
    return r;
  }
}

function capitalize(s) {
  return apply1(Char.uppercase, s);
}

function uncapitalize(s) {
  return apply1(Char.lowercase, s);
}

function index_rec(s, lim, _i, c) {
  while(true) {
    var i = _i;
    if (i >= lim) {
      throw Caml_builtin_exceptions.not_found;
    } else if (s[i] === c) {
      return i;
    } else {
      _i = i + 1 | 0;
      continue ;
    }
  };
}

function index(s, c) {
  return index_rec(s, s.length, 0, c);
}

function index_from(s, i, c) {
  var l = s.length;
  if (i < 0 || i > l) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "String.index_from / Bytes.index_from"
        ];
  } else {
    return index_rec(s, l, i, c);
  }
}

function rindex_rec(s, _i, c) {
  while(true) {
    var i = _i;
    if (i < 0) {
      throw Caml_builtin_exceptions.not_found;
    } else if (s[i] === c) {
      return i;
    } else {
      _i = i - 1 | 0;
      continue ;
    }
  };
}

function rindex(s, c) {
  return rindex_rec(s, s.length - 1 | 0, c);
}

function rindex_from(s, i, c) {
  if (i < -1 || i >= s.length) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "String.rindex_from / Bytes.rindex_from"
        ];
  } else {
    return rindex_rec(s, i, c);
  }
}

function contains_from(s, i, c) {
  var l = s.length;
  if (i < 0 || i > l) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "String.contains_from / Bytes.contains_from"
        ];
  } else {
    try {
      index_rec(s, l, i, c);
      return true;
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        return false;
      } else {
        throw exn;
      }
    }
  }
}

function contains(s, c) {
  return contains_from(s, 0, c);
}

function rcontains_from(s, i, c) {
  if (i < 0 || i >= s.length) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "String.rcontains_from / Bytes.rcontains_from"
        ];
  } else {
    try {
      rindex_rec(s, i, c);
      return true;
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        return false;
      } else {
        throw exn;
      }
    }
  }
}

var compare = Caml_obj.caml_compare;

var unsafe_to_string = Caml_bytes.bytes_to_string;

var unsafe_of_string = Caml_bytes.bytes_of_string;

exports.make = make;
exports.init = init;
exports.empty = empty;
exports.copy = copy;
exports.of_string = of_string;
exports.to_string = to_string;
exports.sub = sub;
exports.sub_string = sub_string;
exports.extend = extend;
exports.fill = fill;
exports.blit = blit;
exports.blit_string = blit_string;
exports.concat = concat;
exports.cat = cat;
exports.iter = iter;
exports.iteri = iteri;
exports.map = map;
exports.mapi = mapi;
exports.trim = trim;
exports.escaped = escaped;
exports.index = index;
exports.rindex = rindex;
exports.index_from = index_from;
exports.rindex_from = rindex_from;
exports.contains = contains;
exports.contains_from = contains_from;
exports.rcontains_from = rcontains_from;
exports.uppercase = uppercase;
exports.lowercase = lowercase;
exports.capitalize = capitalize;
exports.uncapitalize = uncapitalize;
exports.compare = compare;
exports.unsafe_to_string = unsafe_to_string;
exports.unsafe_of_string = unsafe_of_string;
/* No side effect */

},{"./caml_builtin_exceptions.js":6,"./caml_bytes.js":7,"./caml_int32.js":10,"./caml_obj.js":15,"./caml_primitive.js":17,"./char.js":23,"./curry.js":24,"./list.js":25}],5:[function(require,module,exports){
'use strict';

var Caml_builtin_exceptions = require("./caml_builtin_exceptions.js");

function caml_array_sub(x, offset, len) {
  var result = new Array(len);
  var j = 0;
  var i = offset;
  while(j < len) {
    result[j] = x[i];
    j = j + 1 | 0;
    i = i + 1 | 0;
  };
  return result;
}

function len(_acc, _l) {
  while(true) {
    var l = _l;
    var acc = _acc;
    if (l) {
      _l = l[1];
      _acc = l[0].length + acc | 0;
      continue ;
    } else {
      return acc;
    }
  };
}

function fill(arr, _i, _l) {
  while(true) {
    var l = _l;
    var i = _i;
    if (l) {
      var x = l[0];
      var l$1 = x.length;
      var k = i;
      var j = 0;
      while(j < l$1) {
        arr[k] = x[j];
        k = k + 1 | 0;
        j = j + 1 | 0;
      };
      _l = l[1];
      _i = k;
      continue ;
    } else {
      return /* () */0;
    }
  };
}

function caml_array_concat(l) {
  var v = len(0, l);
  var result = new Array(v);
  fill(result, 0, l);
  return result;
}

function caml_array_set(xs, index, newval) {
  if (index < 0 || index >= xs.length) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "index out of bounds"
        ];
  } else {
    xs[index] = newval;
    return /* () */0;
  }
}

function caml_array_get(xs, index) {
  if (index < 0 || index >= xs.length) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "index out of bounds"
        ];
  } else {
    return xs[index];
  }
}

function caml_make_vect(len, init) {
  var b = new Array(len);
  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
    b[i] = init;
  }
  return b;
}

function caml_make_float_vect(len) {
  var b = new Array(len);
  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
    b[i] = 0;
  }
  return b;
}

function caml_array_blit(a1, i1, a2, i2, len) {
  if (i2 <= i1) {
    for(var j = 0 ,j_finish = len - 1 | 0; j <= j_finish; ++j){
      a2[j + i2 | 0] = a1[j + i1 | 0];
    }
    return /* () */0;
  } else {
    for(var j$1 = len - 1 | 0; j$1 >= 0; --j$1){
      a2[j$1 + i2 | 0] = a1[j$1 + i1 | 0];
    }
    return /* () */0;
  }
}

function caml_array_dup(prim) {
  return prim.slice(0);
}

exports.caml_array_dup = caml_array_dup;
exports.caml_array_sub = caml_array_sub;
exports.caml_array_concat = caml_array_concat;
exports.caml_make_vect = caml_make_vect;
exports.caml_make_float_vect = caml_make_float_vect;
exports.caml_array_blit = caml_array_blit;
exports.caml_array_get = caml_array_get;
exports.caml_array_set = caml_array_set;
/* No side effect */

},{"./caml_builtin_exceptions.js":6}],6:[function(require,module,exports){
'use strict';


var out_of_memory = /* tuple */[
  "Out_of_memory",
  0
];

var sys_error = /* tuple */[
  "Sys_error",
  -1
];

var failure = /* tuple */[
  "Failure",
  -2
];

var invalid_argument = /* tuple */[
  "Invalid_argument",
  -3
];

var end_of_file = /* tuple */[
  "End_of_file",
  -4
];

var division_by_zero = /* tuple */[
  "Division_by_zero",
  -5
];

var not_found = /* tuple */[
  "Not_found",
  -6
];

var match_failure = /* tuple */[
  "Match_failure",
  -7
];

var stack_overflow = /* tuple */[
  "Stack_overflow",
  -8
];

var sys_blocked_io = /* tuple */[
  "Sys_blocked_io",
  -9
];

var assert_failure = /* tuple */[
  "Assert_failure",
  -10
];

var undefined_recursive_module = /* tuple */[
  "Undefined_recursive_module",
  -11
];

out_of_memory.tag = 248;

sys_error.tag = 248;

failure.tag = 248;

invalid_argument.tag = 248;

end_of_file.tag = 248;

division_by_zero.tag = 248;

not_found.tag = 248;

match_failure.tag = 248;

stack_overflow.tag = 248;

sys_blocked_io.tag = 248;

assert_failure.tag = 248;

undefined_recursive_module.tag = 248;

exports.out_of_memory = out_of_memory;
exports.sys_error = sys_error;
exports.failure = failure;
exports.invalid_argument = invalid_argument;
exports.end_of_file = end_of_file;
exports.division_by_zero = division_by_zero;
exports.not_found = not_found;
exports.match_failure = match_failure;
exports.stack_overflow = stack_overflow;
exports.sys_blocked_io = sys_blocked_io;
exports.assert_failure = assert_failure;
exports.undefined_recursive_module = undefined_recursive_module;
/*  Not a pure module */

},{}],7:[function(require,module,exports){
'use strict';

var Caml_builtin_exceptions = require("./caml_builtin_exceptions.js");

function get(s, i) {
  if (i < 0 || i >= s.length) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "index out of bounds"
        ];
  } else {
    return s[i];
  }
}

function caml_fill_bytes(s, i, l, c) {
  if (l > 0) {
    for(var k = i ,k_finish = (l + i | 0) - 1 | 0; k <= k_finish; ++k){
      s[k] = c;
    }
    return /* () */0;
  } else {
    return 0;
  }
}

function caml_create_bytes(len) {
  if (len < 0) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "String.create"
        ];
  } else {
    var result = new Array(len);
    for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
      result[i] = /* "\000" */0;
    }
    return result;
  }
}

function caml_blit_bytes(s1, i1, s2, i2, len) {
  if (len > 0) {
    if (s1 === s2) {
      var s1$1 = s1;
      var i1$1 = i1;
      var i2$1 = i2;
      var len$1 = len;
      if (i1$1 < i2$1) {
        var range_a = (s1$1.length - i2$1 | 0) - 1 | 0;
        var range_b = len$1 - 1 | 0;
        var range = range_a > range_b ? range_b : range_a;
        for(var j = range; j >= 0; --j){
          s1$1[i2$1 + j | 0] = s1$1[i1$1 + j | 0];
        }
        return /* () */0;
      } else if (i1$1 > i2$1) {
        var range_a$1 = (s1$1.length - i1$1 | 0) - 1 | 0;
        var range_b$1 = len$1 - 1 | 0;
        var range$1 = range_a$1 > range_b$1 ? range_b$1 : range_a$1;
        for(var k = 0; k <= range$1; ++k){
          s1$1[i2$1 + k | 0] = s1$1[i1$1 + k | 0];
        }
        return /* () */0;
      } else {
        return 0;
      }
    } else {
      var off1 = s1.length - i1 | 0;
      if (len <= off1) {
        for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
          s2[i2 + i | 0] = s1[i1 + i | 0];
        }
        return /* () */0;
      } else {
        for(var i$1 = 0 ,i_finish$1 = off1 - 1 | 0; i$1 <= i_finish$1; ++i$1){
          s2[i2 + i$1 | 0] = s1[i1 + i$1 | 0];
        }
        for(var i$2 = off1 ,i_finish$2 = len - 1 | 0; i$2 <= i_finish$2; ++i$2){
          s2[i2 + i$2 | 0] = /* "\000" */0;
        }
        return /* () */0;
      }
    }
  } else {
    return 0;
  }
}

function bytes_to_string(a) {
  var bytes = a;
  var i = 0;
  var len = a.length;
  var s = "";
  var s_len = len;
  if (i === 0 && len <= 4096 && len === bytes.length) {
    return String.fromCharCode.apply(null, bytes);
  } else {
    var offset = 0;
    while(s_len > 0) {
      var next = s_len < 1024 ? s_len : 1024;
      var tmp_bytes = new Array(next);
      caml_blit_bytes(bytes, offset, tmp_bytes, 0, next);
      s = s + String.fromCharCode.apply(null, tmp_bytes);
      s_len = s_len - next | 0;
      offset = offset + next | 0;
    };
    return s;
  }
}

function caml_blit_string(s1, i1, s2, i2, len) {
  if (len > 0) {
    var off1 = s1.length - i1 | 0;
    if (len <= off1) {
      for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
        s2[i2 + i | 0] = s1.charCodeAt(i1 + i | 0);
      }
      return /* () */0;
    } else {
      for(var i$1 = 0 ,i_finish$1 = off1 - 1 | 0; i$1 <= i_finish$1; ++i$1){
        s2[i2 + i$1 | 0] = s1.charCodeAt(i1 + i$1 | 0);
      }
      for(var i$2 = off1 ,i_finish$2 = len - 1 | 0; i$2 <= i_finish$2; ++i$2){
        s2[i2 + i$2 | 0] = /* "\000" */0;
      }
      return /* () */0;
    }
  } else {
    return 0;
  }
}

function bytes_of_string(s) {
  var len = s.length;
  var res = new Array(len);
  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
    res[i] = s.charCodeAt(i);
  }
  return res;
}

exports.caml_create_bytes = caml_create_bytes;
exports.caml_fill_bytes = caml_fill_bytes;
exports.get = get;
exports.bytes_to_string = bytes_to_string;
exports.caml_blit_bytes = caml_blit_bytes;
exports.caml_blit_string = caml_blit_string;
exports.bytes_of_string = bytes_of_string;
/* No side effect */

},{"./caml_builtin_exceptions.js":6}],8:[function(require,module,exports){
'use strict';


var id = /* record */[/* contents */0];

function caml_set_oo_id(b) {
  b[1] = id[0];
  id[0] += 1;
  return b;
}

function caml_fresh_oo_id(param) {
  id[0] += 1;
  return id[0];
}

function create(str) {
  var v_001 = caml_fresh_oo_id(/* () */0);
  var v = /* tuple */[
    str,
    v_001
  ];
  v.tag = 248;
  return v;
}

function caml_is_extension(e) {
  if (e === undefined) {
    return false;
  } else if (e.tag === 248) {
    return true;
  } else {
    var slot = e[0];
    if (slot !== undefined) {
      return slot.tag === 248;
    } else {
      return false;
    }
  }
}

exports.caml_set_oo_id = caml_set_oo_id;
exports.caml_fresh_oo_id = caml_fresh_oo_id;
exports.create = create;
exports.caml_is_extension = caml_is_extension;
/* No side effect */

},{}],9:[function(require,module,exports){
'use strict';

var Caml_int32 = require("./caml_int32.js");
var Caml_int64 = require("./caml_int64.js");
var Caml_utils = require("./caml_utils.js");
var Caml_builtin_exceptions = require("./caml_builtin_exceptions.js");

function parse_digit(c) {
  if (c >= 65) {
    if (c >= 97) {
      if (c >= 123) {
        return -1;
      } else {
        return c - 87 | 0;
      }
    } else if (c >= 91) {
      return -1;
    } else {
      return c - 55 | 0;
    }
  } else if (c > 57 || c < 48) {
    return -1;
  } else {
    return c - /* "0" */48 | 0;
  }
}

function int_of_string_base(param) {
  switch (param) {
    case 0 : 
        return 8;
    case 1 : 
        return 16;
    case 2 : 
        return 10;
    case 3 : 
        return 2;
    
  }
}

function parse_sign_and_base(s) {
  var sign = 1;
  var base = /* Dec */2;
  var i = 0;
  var match = s.charCodeAt(i);
  switch (match) {
    case 43 : 
        i = i + 1 | 0;
        break;
    case 44 : 
        break;
    case 45 : 
        sign = -1;
        i = i + 1 | 0;
        break;
    default:
      
  }
  if (s[i] === "0") {
    var match$1 = s.charCodeAt(i + 1 | 0);
    if (match$1 >= 89) {
      if (match$1 >= 111) {
        if (match$1 < 121) {
          switch (match$1 - 111 | 0) {
            case 0 : 
                base = /* Oct */0;
                i = i + 2 | 0;
                break;
            case 6 : 
                i = i + 2 | 0;
                break;
            case 1 : 
            case 2 : 
            case 3 : 
            case 4 : 
            case 5 : 
            case 7 : 
            case 8 : 
                break;
            case 9 : 
                base = /* Hex */1;
                i = i + 2 | 0;
                break;
            
          }
        }
        
      } else if (match$1 === 98) {
        base = /* Bin */3;
        i = i + 2 | 0;
      }
      
    } else if (match$1 !== 66) {
      if (match$1 >= 79) {
        switch (match$1 - 79 | 0) {
          case 0 : 
              base = /* Oct */0;
              i = i + 2 | 0;
              break;
          case 6 : 
              i = i + 2 | 0;
              break;
          case 1 : 
          case 2 : 
          case 3 : 
          case 4 : 
          case 5 : 
          case 7 : 
          case 8 : 
              break;
          case 9 : 
              base = /* Hex */1;
              i = i + 2 | 0;
              break;
          
        }
      }
      
    } else {
      base = /* Bin */3;
      i = i + 2 | 0;
    }
  }
  return /* tuple */[
          i,
          sign,
          base
        ];
}

function caml_int_of_string(s) {
  var match = parse_sign_and_base(s);
  var i = match[0];
  var base = int_of_string_base(match[2]);
  var threshold = 4294967295;
  var len = s.length;
  var c = i < len ? s.charCodeAt(i) : /* "\000" */0;
  var d = parse_digit(c);
  if (d < 0 || d >= base) {
    throw [
          Caml_builtin_exceptions.failure,
          "int_of_string"
        ];
  }
  var aux = function (_acc, _k) {
    while(true) {
      var k = _k;
      var acc = _acc;
      if (k === len) {
        return acc;
      } else {
        var a = s.charCodeAt(k);
        if (a === /* "_" */95) {
          _k = k + 1 | 0;
          continue ;
        } else {
          var v = parse_digit(a);
          if (v < 0 || v >= base) {
            throw [
                  Caml_builtin_exceptions.failure,
                  "int_of_string"
                ];
          } else {
            var acc$1 = base * acc + v;
            if (acc$1 > threshold) {
              throw [
                    Caml_builtin_exceptions.failure,
                    "int_of_string"
                  ];
            } else {
              _k = k + 1 | 0;
              _acc = acc$1;
              continue ;
            }
          }
        }
      }
    };
  };
  var res = match[1] * aux(d, i + 1 | 0);
  var or_res = res | 0;
  if (base === 10 && res !== or_res) {
    throw [
          Caml_builtin_exceptions.failure,
          "int_of_string"
        ];
  }
  return or_res;
}

function caml_int64_of_string(s) {
  var match = parse_sign_and_base(s);
  var hbase = match[2];
  var i = match[0];
  var base = Caml_int64.of_int32(int_of_string_base(hbase));
  var sign = Caml_int64.of_int32(match[1]);
  var threshold;
  switch (hbase) {
    case 0 : 
        threshold = /* int64 */[
          /* hi */536870911,
          /* lo */4294967295
        ];
        break;
    case 1 : 
        threshold = /* int64 */[
          /* hi */268435455,
          /* lo */4294967295
        ];
        break;
    case 2 : 
        threshold = /* int64 */[
          /* hi */429496729,
          /* lo */2576980377
        ];
        break;
    case 3 : 
        threshold = /* int64 */[
          /* hi */2147483647,
          /* lo */4294967295
        ];
        break;
    
  }
  var len = s.length;
  var c = i < len ? s.charCodeAt(i) : /* "\000" */0;
  var d = Caml_int64.of_int32(parse_digit(c));
  if (Caml_int64.lt(d, /* int64 */[
          /* hi */0,
          /* lo */0
        ]) || Caml_int64.ge(d, base)) {
    throw [
          Caml_builtin_exceptions.failure,
          "int64_of_string"
        ];
  }
  var aux = function (_acc, _k) {
    while(true) {
      var k = _k;
      var acc = _acc;
      if (k === len) {
        return acc;
      } else {
        var a = s.charCodeAt(k);
        if (a === /* "_" */95) {
          _k = k + 1 | 0;
          continue ;
        } else {
          var v = Caml_int64.of_int32(parse_digit(a));
          if (Caml_int64.lt(v, /* int64 */[
                  /* hi */0,
                  /* lo */0
                ]) || Caml_int64.ge(v, base) || Caml_int64.gt(acc, threshold)) {
            throw [
                  Caml_builtin_exceptions.failure,
                  "int64_of_string"
                ];
          } else {
            var acc$1 = Caml_int64.add(Caml_int64.mul(base, acc), v);
            _k = k + 1 | 0;
            _acc = acc$1;
            continue ;
          }
        }
      }
    };
  };
  var res = Caml_int64.mul(sign, aux(d, i + 1 | 0));
  var or_res = Caml_int64.or_(res, /* int64 */[
        /* hi */0,
        /* lo */0
      ]);
  if (Caml_int64.eq(base, /* int64 */[
          /* hi */0,
          /* lo */10
        ]) && Caml_int64.neq(res, or_res)) {
    throw [
          Caml_builtin_exceptions.failure,
          "int64_of_string"
        ];
  }
  return or_res;
}

function int_of_base(param) {
  switch (param) {
    case 0 : 
        return 8;
    case 1 : 
        return 16;
    case 2 : 
        return 10;
    
  }
}

function lowercase(c) {
  if (c >= /* "A" */65 && c <= /* "Z" */90 || c >= /* "\192" */192 && c <= /* "\214" */214 || c >= /* "\216" */216 && c <= /* "\222" */222) {
    return c + 32 | 0;
  } else {
    return c;
  }
}

function parse_format(fmt) {
  var len = fmt.length;
  if (len > 31) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "format_int: format too long"
        ];
  }
  var f = /* record */[
    /* justify */"+",
    /* signstyle */"-",
    /* filter */" ",
    /* alternate */false,
    /* base : Dec */2,
    /* signedconv */false,
    /* width */0,
    /* uppercase */false,
    /* sign */1,
    /* prec */-1,
    /* conv */"f"
  ];
  var _i = 0;
  while(true) {
    var i = _i;
    if (i >= len) {
      return f;
    } else {
      var c = fmt.charCodeAt(i);
      var exit = 0;
      if (c >= 69) {
        if (c >= 88) {
          if (c >= 121) {
            exit = 1;
          } else {
            switch (c - 88 | 0) {
              case 0 : 
                  f[/* base */4] = /* Hex */1;
                  f[/* uppercase */7] = true;
                  _i = i + 1 | 0;
                  continue ;
              case 13 : 
              case 14 : 
              case 15 : 
                  exit = 5;
                  break;
              case 12 : 
              case 17 : 
                  exit = 4;
                  break;
              case 23 : 
                  f[/* base */4] = /* Oct */0;
                  _i = i + 1 | 0;
                  continue ;
              case 29 : 
                  f[/* base */4] = /* Dec */2;
                  _i = i + 1 | 0;
                  continue ;
              case 1 : 
              case 2 : 
              case 3 : 
              case 4 : 
              case 5 : 
              case 6 : 
              case 7 : 
              case 8 : 
              case 9 : 
              case 10 : 
              case 11 : 
              case 16 : 
              case 18 : 
              case 19 : 
              case 20 : 
              case 21 : 
              case 22 : 
              case 24 : 
              case 25 : 
              case 26 : 
              case 27 : 
              case 28 : 
              case 30 : 
              case 31 : 
                  exit = 1;
                  break;
              case 32 : 
                  f[/* base */4] = /* Hex */1;
                  _i = i + 1 | 0;
                  continue ;
              
            }
          }
        } else if (c >= 72) {
          exit = 1;
        } else {
          f[/* signedconv */5] = true;
          f[/* uppercase */7] = true;
          f[/* conv */10] = String.fromCharCode(lowercase(c));
          _i = i + 1 | 0;
          continue ;
        }
      } else {
        switch (c) {
          case 35 : 
              f[/* alternate */3] = true;
              _i = i + 1 | 0;
              continue ;
          case 32 : 
          case 43 : 
              exit = 2;
              break;
          case 45 : 
              f[/* justify */0] = "-";
              _i = i + 1 | 0;
              continue ;
          case 46 : 
              f[/* prec */9] = 0;
              var j = i + 1 | 0;
              while((function(j){
                  return function () {
                    var w = fmt.charCodeAt(j) - /* "0" */48 | 0;
                    return w >= 0 && w <= 9;
                  }
                  }(j))()) {
                f[/* prec */9] = (Caml_int32.imul(f[/* prec */9], 10) + fmt.charCodeAt(j) | 0) - /* "0" */48 | 0;
                j = j + 1 | 0;
              };
              _i = j;
              continue ;
          case 33 : 
          case 34 : 
          case 36 : 
          case 37 : 
          case 38 : 
          case 39 : 
          case 40 : 
          case 41 : 
          case 42 : 
          case 44 : 
          case 47 : 
              exit = 1;
              break;
          case 48 : 
              f[/* filter */2] = "0";
              _i = i + 1 | 0;
              continue ;
          case 49 : 
          case 50 : 
          case 51 : 
          case 52 : 
          case 53 : 
          case 54 : 
          case 55 : 
          case 56 : 
          case 57 : 
              exit = 3;
              break;
          default:
            exit = 1;
        }
      }
      switch (exit) {
        case 1 : 
            _i = i + 1 | 0;
            continue ;
        case 2 : 
            f[/* signstyle */1] = String.fromCharCode(c);
            _i = i + 1 | 0;
            continue ;
        case 3 : 
            f[/* width */6] = 0;
            var j$1 = i;
            while((function(j$1){
                return function () {
                  var w = fmt.charCodeAt(j$1) - /* "0" */48 | 0;
                  return w >= 0 && w <= 9;
                }
                }(j$1))()) {
              f[/* width */6] = (Caml_int32.imul(f[/* width */6], 10) + fmt.charCodeAt(j$1) | 0) - /* "0" */48 | 0;
              j$1 = j$1 + 1 | 0;
            };
            _i = j$1;
            continue ;
        case 4 : 
            f[/* signedconv */5] = true;
            f[/* base */4] = /* Dec */2;
            _i = i + 1 | 0;
            continue ;
        case 5 : 
            f[/* signedconv */5] = true;
            f[/* conv */10] = String.fromCharCode(c);
            _i = i + 1 | 0;
            continue ;
        
      }
    }
  };
}

function finish_formatting(config, rawbuffer) {
  var justify = config[/* justify */0];
  var signstyle = config[/* signstyle */1];
  var filter = config[/* filter */2];
  var alternate = config[/* alternate */3];
  var base = config[/* base */4];
  var signedconv = config[/* signedconv */5];
  var width = config[/* width */6];
  var uppercase = config[/* uppercase */7];
  var sign = config[/* sign */8];
  var len = rawbuffer.length;
  if (signedconv && (sign < 0 || signstyle !== "-")) {
    len = len + 1 | 0;
  }
  if (alternate) {
    if (base === /* Oct */0) {
      len = len + 1 | 0;
    } else if (base === /* Hex */1) {
      len = len + 2 | 0;
    }
    
  }
  var buffer = "";
  if (justify === "+" && filter === " ") {
    for(var i = len ,i_finish = width - 1 | 0; i <= i_finish; ++i){
      buffer = buffer + filter;
    }
  }
  if (signedconv) {
    if (sign < 0) {
      buffer = buffer + "-";
    } else if (signstyle !== "-") {
      buffer = buffer + signstyle;
    }
    
  }
  if (alternate && base === /* Oct */0) {
    buffer = buffer + "0";
  }
  if (alternate && base === /* Hex */1) {
    buffer = buffer + "0x";
  }
  if (justify === "+" && filter === "0") {
    for(var i$1 = len ,i_finish$1 = width - 1 | 0; i$1 <= i_finish$1; ++i$1){
      buffer = buffer + filter;
    }
  }
  buffer = uppercase ? buffer + rawbuffer.toUpperCase() : buffer + rawbuffer;
  if (justify === "-") {
    for(var i$2 = len ,i_finish$2 = width - 1 | 0; i$2 <= i_finish$2; ++i$2){
      buffer = buffer + " ";
    }
  }
  return buffer;
}

function caml_format_int(fmt, i) {
  if (fmt === "%d") {
    return String(i);
  } else {
    var f = parse_format(fmt);
    var f$1 = f;
    var i$1 = i;
    var i$2 = i$1 < 0 ? (
        f$1[/* signedconv */5] ? (f$1[/* sign */8] = -1, -i$1) : (i$1 >>> 0)
      ) : i$1;
    var s = i$2.toString(int_of_base(f$1[/* base */4]));
    if (f$1[/* prec */9] >= 0) {
      f$1[/* filter */2] = " ";
      var n = f$1[/* prec */9] - s.length | 0;
      if (n > 0) {
        s = Caml_utils.repeat(n, "0") + s;
      }
      
    }
    return finish_formatting(f$1, s);
  }
}

function caml_int64_format(fmt, x) {
  var f = parse_format(fmt);
  var x$1 = f[/* signedconv */5] && Caml_int64.lt(x, /* int64 */[
        /* hi */0,
        /* lo */0
      ]) ? (f[/* sign */8] = -1, Caml_int64.neg(x)) : x;
  var s = "";
  var match = f[/* base */4];
  switch (match) {
    case 0 : 
        var wbase = /* int64 */[
          /* hi */0,
          /* lo */8
        ];
        var cvtbl = "01234567";
        if (Caml_int64.lt(x$1, /* int64 */[
                /* hi */0,
                /* lo */0
              ])) {
          var y = Caml_int64.discard_sign(x$1);
          var match$1 = Caml_int64.div_mod(y, wbase);
          var quotient = Caml_int64.add(/* int64 */[
                /* hi */268435456,
                /* lo */0
              ], match$1[0]);
          var modulus = match$1[1];
          s = String.fromCharCode(cvtbl.charCodeAt(modulus[1] | 0)) + s;
          while(Caml_int64.neq(quotient, /* int64 */[
                  /* hi */0,
                  /* lo */0
                ])) {
            var match$2 = Caml_int64.div_mod(quotient, wbase);
            quotient = match$2[0];
            modulus = match$2[1];
            s = String.fromCharCode(cvtbl.charCodeAt(modulus[1] | 0)) + s;
          };
        } else {
          var match$3 = Caml_int64.div_mod(x$1, wbase);
          var quotient$1 = match$3[0];
          var modulus$1 = match$3[1];
          s = String.fromCharCode(cvtbl.charCodeAt(modulus$1[1] | 0)) + s;
          while(Caml_int64.neq(quotient$1, /* int64 */[
                  /* hi */0,
                  /* lo */0
                ])) {
            var match$4 = Caml_int64.div_mod(quotient$1, wbase);
            quotient$1 = match$4[0];
            modulus$1 = match$4[1];
            s = String.fromCharCode(cvtbl.charCodeAt(modulus$1[1] | 0)) + s;
          };
        }
        break;
    case 1 : 
        s = Caml_int64.to_hex(x$1) + s;
        break;
    case 2 : 
        var wbase$1 = /* int64 */[
          /* hi */0,
          /* lo */10
        ];
        var cvtbl$1 = "0123456789";
        if (Caml_int64.lt(x$1, /* int64 */[
                /* hi */0,
                /* lo */0
              ])) {
          var y$1 = Caml_int64.discard_sign(x$1);
          var match$5 = Caml_int64.div_mod(y$1, wbase$1);
          var match$6 = Caml_int64.div_mod(Caml_int64.add(/* int64 */[
                    /* hi */0,
                    /* lo */8
                  ], match$5[1]), wbase$1);
          var quotient$2 = Caml_int64.add(Caml_int64.add(/* int64 */[
                    /* hi */214748364,
                    /* lo */3435973836
                  ], match$5[0]), match$6[0]);
          var modulus$2 = match$6[1];
          s = String.fromCharCode(cvtbl$1.charCodeAt(modulus$2[1] | 0)) + s;
          while(Caml_int64.neq(quotient$2, /* int64 */[
                  /* hi */0,
                  /* lo */0
                ])) {
            var match$7 = Caml_int64.div_mod(quotient$2, wbase$1);
            quotient$2 = match$7[0];
            modulus$2 = match$7[1];
            s = String.fromCharCode(cvtbl$1.charCodeAt(modulus$2[1] | 0)) + s;
          };
        } else {
          var match$8 = Caml_int64.div_mod(x$1, wbase$1);
          var quotient$3 = match$8[0];
          var modulus$3 = match$8[1];
          s = String.fromCharCode(cvtbl$1.charCodeAt(modulus$3[1] | 0)) + s;
          while(Caml_int64.neq(quotient$3, /* int64 */[
                  /* hi */0,
                  /* lo */0
                ])) {
            var match$9 = Caml_int64.div_mod(quotient$3, wbase$1);
            quotient$3 = match$9[0];
            modulus$3 = match$9[1];
            s = String.fromCharCode(cvtbl$1.charCodeAt(modulus$3[1] | 0)) + s;
          };
        }
        break;
    
  }
  if (f[/* prec */9] >= 0) {
    f[/* filter */2] = " ";
    var n = f[/* prec */9] - s.length | 0;
    if (n > 0) {
      s = Caml_utils.repeat(n, "0") + s;
    }
    
  }
  return finish_formatting(f, s);
}

function caml_format_float(fmt, x) {
  var f = parse_format(fmt);
  var prec = f[/* prec */9] < 0 ? 6 : f[/* prec */9];
  var x$1 = x < 0 ? (f[/* sign */8] = -1, -x) : x;
  var s = "";
  if (isNaN(x$1)) {
    s = "nan";
    f[/* filter */2] = " ";
  } else if (isFinite(x$1)) {
    var match = f[/* conv */10];
    switch (match) {
      case "e" : 
          s = x$1.toExponential(prec);
          var i = s.length;
          if (s[i - 3 | 0] === "e") {
            s = s.slice(0, i - 1 | 0) + ("0" + s.slice(i - 1 | 0));
          }
          break;
      case "f" : 
          s = x$1.toFixed(prec);
          break;
      case "g" : 
          var prec$1 = prec !== 0 ? prec : 1;
          s = x$1.toExponential(prec$1 - 1 | 0);
          var j = s.indexOf("e");
          var exp = Number(s.slice(j + 1 | 0)) | 0;
          if (exp < -4 || x$1 >= 1e21 || x$1.toFixed().length > prec$1) {
            var i$1 = j - 1 | 0;
            while(s[i$1] === "0") {
              i$1 = i$1 - 1 | 0;
            };
            if (s[i$1] === ".") {
              i$1 = i$1 - 1 | 0;
            }
            s = s.slice(0, i$1 + 1 | 0) + s.slice(j);
            var i$2 = s.length;
            if (s[i$2 - 3 | 0] === "e") {
              s = s.slice(0, i$2 - 1 | 0) + ("0" + s.slice(i$2 - 1 | 0));
            }
            
          } else {
            var p = prec$1;
            if (exp < 0) {
              p = p - (exp + 1 | 0) | 0;
              s = x$1.toFixed(p);
            } else {
              while((function () {
                      s = x$1.toFixed(p);
                      return s.length > (prec$1 + 1 | 0);
                    })()) {
                p = p - 1 | 0;
              };
            }
            if (p !== 0) {
              var k = s.length - 1 | 0;
              while(s[k] === "0") {
                k = k - 1 | 0;
              };
              if (s[k] === ".") {
                k = k - 1 | 0;
              }
              s = s.slice(0, k + 1 | 0);
            }
            
          }
          break;
      default:
        
    }
  } else {
    s = "inf";
    f[/* filter */2] = " ";
  }
  return finish_formatting(f, s);
}

function float_of_string (s,exn){ 

    var res = +s;
    if ((s.length > 0) && (res === res))
        return res;
    s = s.replace(/_/g, "");
    res = +s;
    if (((s.length > 0) && (res === res)) || /^[+-]?nan$/i.test(s)) {
        return res;
    };
    if (/^\+?inf(inity)?$/i.test(s))
        return Infinity;
    if (/^-inf(inity)?$/i.test(s))
        return -Infinity;
    throw exn;

};

function caml_float_of_string(s) {
  return float_of_string(s, [
              Caml_builtin_exceptions.failure,
              "float_of_string"
            ]);
}

var caml_nativeint_format = caml_format_int;

var caml_int32_format = caml_format_int;

var caml_int32_of_string = caml_int_of_string;

var caml_nativeint_of_string = caml_int_of_string;

exports.caml_format_float = caml_format_float;
exports.caml_format_int = caml_format_int;
exports.caml_nativeint_format = caml_nativeint_format;
exports.caml_int32_format = caml_int32_format;
exports.caml_float_of_string = caml_float_of_string;
exports.caml_int64_format = caml_int64_format;
exports.caml_int_of_string = caml_int_of_string;
exports.caml_int32_of_string = caml_int32_of_string;
exports.caml_int64_of_string = caml_int64_of_string;
exports.caml_nativeint_of_string = caml_nativeint_of_string;
/* No side effect */

},{"./caml_builtin_exceptions.js":6,"./caml_int32.js":10,"./caml_int64.js":11,"./caml_utils.js":20}],10:[function(require,module,exports){
'use strict';

var Caml_builtin_exceptions = require("./caml_builtin_exceptions.js");

function div(x, y) {
  if (y === 0) {
    throw Caml_builtin_exceptions.division_by_zero;
  } else {
    return x / y | 0;
  }
}

function mod_(x, y) {
  if (y === 0) {
    throw Caml_builtin_exceptions.division_by_zero;
  } else {
    return x % y;
  }
}

function caml_bswap16(x) {
  return ((x & 255) << 8) | ((x & 65280) >>> 8);
}

function caml_int32_bswap(x) {
  return ((x & 255) << 24) | ((x & 65280) << 8) | ((x & 16711680) >>> 8) | ((x & 4278190080) >>> 24);
}

var imul = ( Math.imul || function (x,y) {
  y |= 0; return ((((x >> 16) * y) << 16) + (x & 0xffff) * y)|0; 
}
);

var caml_nativeint_bswap = caml_int32_bswap;

exports.div = div;
exports.mod_ = mod_;
exports.caml_bswap16 = caml_bswap16;
exports.caml_int32_bswap = caml_int32_bswap;
exports.caml_nativeint_bswap = caml_nativeint_bswap;
exports.imul = imul;
/* imul Not a pure module */

},{"./caml_builtin_exceptions.js":6}],11:[function(require,module,exports){
'use strict';

var Caml_int32 = require("./caml_int32.js");
var Caml_utils = require("./caml_utils.js");
var Caml_primitive = require("./caml_primitive.js");
var Caml_builtin_exceptions = require("./caml_builtin_exceptions.js");

var min_int = /* record */[
  /* hi */-2147483648,
  /* lo */0
];

var max_int = /* record */[
  /* hi */2147483647,
  /* lo */1
];

var one = /* record */[
  /* hi */0,
  /* lo */1
];

var zero = /* record */[
  /* hi */0,
  /* lo */0
];

var neg_one = /* record */[
  /* hi */-1,
  /* lo */4294967295
];

function neg_signed(x) {
  return (x & 2147483648) !== 0;
}

function add(param, param$1) {
  var other_low_ = param$1[/* lo */1];
  var this_low_ = param[/* lo */1];
  var lo = this_low_ + other_low_ & 4294967295;
  var overflow = neg_signed(this_low_) && (neg_signed(other_low_) || !neg_signed(lo)) || neg_signed(other_low_) && !neg_signed(lo) ? 1 : 0;
  var hi = param[/* hi */0] + param$1[/* hi */0] + overflow & 4294967295;
  return /* record */[
          /* hi */hi,
          /* lo */(lo >>> 0)
        ];
}

function not(param) {
  var hi = param[/* hi */0] ^ -1;
  var lo = param[/* lo */1] ^ -1;
  return /* record */[
          /* hi */hi,
          /* lo */(lo >>> 0)
        ];
}

function eq(x, y) {
  if (x[/* hi */0] === y[/* hi */0]) {
    return x[/* lo */1] === y[/* lo */1];
  } else {
    return false;
  }
}

function equal_null(x, y) {
  if (y !== null) {
    return eq(x, y);
  } else {
    return false;
  }
}

function equal_undefined(x, y) {
  if (y !== undefined) {
    return eq(x, y);
  } else {
    return false;
  }
}

function equal_nullable(x, y) {
  if (y == null) {
    return false;
  } else {
    return eq(x, y);
  }
}

function neg(x) {
  if (eq(x, min_int)) {
    return min_int;
  } else {
    return add(not(x), one);
  }
}

function sub(x, y) {
  return add(x, neg(y));
}

function lsl_(x, numBits) {
  if (numBits === 0) {
    return x;
  } else {
    var lo = x[/* lo */1];
    if (numBits >= 32) {
      return /* record */[
              /* hi */(lo << (numBits - 32 | 0)),
              /* lo */0
            ];
    } else {
      var hi = (lo >>> (32 - numBits | 0)) | (x[/* hi */0] << numBits);
      return /* record */[
              /* hi */hi,
              /* lo */((lo << numBits) >>> 0)
            ];
    }
  }
}

function lsr_(x, numBits) {
  if (numBits === 0) {
    return x;
  } else {
    var hi = x[/* hi */0];
    var offset = numBits - 32 | 0;
    if (offset === 0) {
      return /* record */[
              /* hi */0,
              /* lo */(hi >>> 0)
            ];
    } else if (offset > 0) {
      var lo = (hi >>> offset);
      return /* record */[
              /* hi */0,
              /* lo */(lo >>> 0)
            ];
    } else {
      var hi$1 = (hi >>> numBits);
      var lo$1 = (hi << (-offset | 0)) | (x[/* lo */1] >>> numBits);
      return /* record */[
              /* hi */hi$1,
              /* lo */(lo$1 >>> 0)
            ];
    }
  }
}

function asr_(x, numBits) {
  if (numBits === 0) {
    return x;
  } else {
    var hi = x[/* hi */0];
    if (numBits < 32) {
      var hi$1 = (hi >> numBits);
      var lo = (hi << (32 - numBits | 0)) | (x[/* lo */1] >>> numBits);
      return /* record */[
              /* hi */hi$1,
              /* lo */(lo >>> 0)
            ];
    } else {
      var lo$1 = (hi >> (numBits - 32 | 0));
      return /* record */[
              /* hi */hi >= 0 ? 0 : -1,
              /* lo */(lo$1 >>> 0)
            ];
    }
  }
}

function is_zero(param) {
  if (param[/* hi */0] !== 0 || param[/* lo */1] !== 0) {
    return false;
  } else {
    return true;
  }
}

function mul(_this, _other) {
  while(true) {
    var other = _other;
    var $$this = _this;
    var exit = 0;
    var lo;
    var this_hi = $$this[/* hi */0];
    var exit$1 = 0;
    var exit$2 = 0;
    var exit$3 = 0;
    if (this_hi !== 0 || $$this[/* lo */1] !== 0) {
      exit$3 = 4;
    } else {
      return zero;
    }
    if (exit$3 === 4) {
      if (other[/* hi */0] !== 0 || other[/* lo */1] !== 0) {
        exit$2 = 3;
      } else {
        return zero;
      }
    }
    if (exit$2 === 3) {
      if (this_hi !== -2147483648 || $$this[/* lo */1] !== 0) {
        exit$1 = 2;
      } else {
        lo = other[/* lo */1];
        exit = 1;
      }
    }
    if (exit$1 === 2) {
      var other_hi = other[/* hi */0];
      var lo$1 = $$this[/* lo */1];
      var exit$4 = 0;
      if (other_hi !== -2147483648 || other[/* lo */1] !== 0) {
        exit$4 = 3;
      } else {
        lo = lo$1;
        exit = 1;
      }
      if (exit$4 === 3) {
        var other_lo = other[/* lo */1];
        if (this_hi < 0) {
          if (other_hi < 0) {
            _other = neg(other);
            _this = neg($$this);
            continue ;
          } else {
            return neg(mul(neg($$this), other));
          }
        } else if (other_hi < 0) {
          return neg(mul($$this, neg(other)));
        } else {
          var a48 = (this_hi >>> 16);
          var a32 = this_hi & 65535;
          var a16 = (lo$1 >>> 16);
          var a00 = lo$1 & 65535;
          var b48 = (other_hi >>> 16);
          var b32 = other_hi & 65535;
          var b16 = (other_lo >>> 16);
          var b00 = other_lo & 65535;
          var c48 = 0;
          var c32 = 0;
          var c16 = 0;
          var c00 = a00 * b00;
          c16 = (c00 >>> 16) + a16 * b00;
          c32 = (c16 >>> 16);
          c16 = (c16 & 65535) + a00 * b16;
          c32 = c32 + (c16 >>> 16) + a32 * b00;
          c48 = (c32 >>> 16);
          c32 = (c32 & 65535) + a16 * b16;
          c48 += (c32 >>> 16);
          c32 = (c32 & 65535) + a00 * b32;
          c48 += (c32 >>> 16);
          c32 = c32 & 65535;
          c48 = c48 + (a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48) & 65535;
          var hi = c32 | (c48 << 16);
          var lo$2 = c00 & 65535 | ((c16 & 65535) << 16);
          return /* record */[
                  /* hi */hi,
                  /* lo */(lo$2 >>> 0)
                ];
        }
      }
      
    }
    if (exit === 1) {
      if ((lo & 1) === 0) {
        return zero;
      } else {
        return min_int;
      }
    }
    
  };
}

function swap(param) {
  var hi = Caml_int32.caml_int32_bswap(param[/* lo */1]);
  var lo = Caml_int32.caml_int32_bswap(param[/* hi */0]);
  return /* record */[
          /* hi */hi,
          /* lo */(lo >>> 0)
        ];
}

function xor(param, param$1) {
  return /* record */[
          /* hi */param[/* hi */0] ^ param$1[/* hi */0],
          /* lo */((param[/* lo */1] ^ param$1[/* lo */1]) >>> 0)
        ];
}

function or_(param, param$1) {
  return /* record */[
          /* hi */param[/* hi */0] | param$1[/* hi */0],
          /* lo */((param[/* lo */1] | param$1[/* lo */1]) >>> 0)
        ];
}

function and_(param, param$1) {
  return /* record */[
          /* hi */param[/* hi */0] & param$1[/* hi */0],
          /* lo */((param[/* lo */1] & param$1[/* lo */1]) >>> 0)
        ];
}

function ge(param, param$1) {
  var other_hi = param$1[/* hi */0];
  var hi = param[/* hi */0];
  if (hi > other_hi) {
    return true;
  } else if (hi < other_hi) {
    return false;
  } else {
    return param[/* lo */1] >= param$1[/* lo */1];
  }
}

function neq(x, y) {
  return !eq(x, y);
}

function lt(x, y) {
  return !ge(x, y);
}

function gt(x, y) {
  if (x[/* hi */0] > y[/* hi */0]) {
    return true;
  } else if (x[/* hi */0] < y[/* hi */0]) {
    return false;
  } else {
    return x[/* lo */1] > y[/* lo */1];
  }
}

function le(x, y) {
  return !gt(x, y);
}

function min(x, y) {
  if (ge(x, y)) {
    return y;
  } else {
    return x;
  }
}

function max(x, y) {
  if (gt(x, y)) {
    return x;
  } else {
    return y;
  }
}

function to_float(param) {
  return param[/* hi */0] * (0x100000000) + param[/* lo */1];
}

function of_float(x) {
  if (isNaN(x) || !isFinite(x)) {
    return zero;
  } else if (x <= -9.22337203685477581e+18) {
    return min_int;
  } else if (x + 1 >= 9.22337203685477581e+18) {
    return max_int;
  } else if (x < 0) {
    return neg(of_float(-x));
  } else {
    var hi = x / 4294967296 | 0;
    var lo = x % 4294967296 | 0;
    return /* record */[
            /* hi */hi,
            /* lo */(lo >>> 0)
          ];
  }
}

function div(_self, _other) {
  while(true) {
    var other = _other;
    var self = _self;
    var self_hi = self[/* hi */0];
    var exit = 0;
    var exit$1 = 0;
    if (other[/* hi */0] !== 0 || other[/* lo */1] !== 0) {
      exit$1 = 2;
    } else {
      throw Caml_builtin_exceptions.division_by_zero;
    }
    if (exit$1 === 2) {
      if (self_hi !== -2147483648) {
        if (self_hi !== 0 || self[/* lo */1] !== 0) {
          exit = 1;
        } else {
          return zero;
        }
      } else if (self[/* lo */1] !== 0) {
        exit = 1;
      } else if (eq(other, one) || eq(other, neg_one)) {
        return self;
      } else if (eq(other, min_int)) {
        return one;
      } else {
        var other_hi = other[/* hi */0];
        var half_this = asr_(self, 1);
        var approx = lsl_(div(half_this, other), 1);
        var exit$2 = 0;
        if (approx[/* hi */0] !== 0 || approx[/* lo */1] !== 0) {
          exit$2 = 3;
        } else if (other_hi < 0) {
          return one;
        } else {
          return neg(one);
        }
        if (exit$2 === 3) {
          var y = mul(other, approx);
          var rem = add(self, neg(y));
          return add(approx, div(rem, other));
        }
        
      }
    }
    if (exit === 1) {
      var other_hi$1 = other[/* hi */0];
      var exit$3 = 0;
      if (other_hi$1 !== -2147483648 || other[/* lo */1] !== 0) {
        exit$3 = 2;
      } else {
        return zero;
      }
      if (exit$3 === 2) {
        if (self_hi < 0) {
          if (other_hi$1 < 0) {
            _other = neg(other);
            _self = neg(self);
            continue ;
          } else {
            return neg(div(neg(self), other));
          }
        } else if (other_hi$1 < 0) {
          return neg(div(self, neg(other)));
        } else {
          var res = zero;
          var rem$1 = self;
          while(ge(rem$1, other)) {
            var approx$1 = Caml_primitive.caml_float_max(1, Math.floor(to_float(rem$1) / to_float(other)));
            var log2 = Math.ceil(Math.log(approx$1) / Math.LN2);
            var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
            var approxRes = of_float(approx$1);
            var approxRem = mul(approxRes, other);
            while(approxRem[/* hi */0] < 0 || gt(approxRem, rem$1)) {
              approx$1 -= delta;
              approxRes = of_float(approx$1);
              approxRem = mul(approxRes, other);
            };
            if (is_zero(approxRes)) {
              approxRes = one;
            }
            res = add(res, approxRes);
            rem$1 = add(rem$1, neg(approxRem));
          };
          return res;
        }
      }
      
    }
    
  };
}

function mod_(self, other) {
  var y = mul(div(self, other), other);
  return add(self, neg(y));
}

function div_mod(self, other) {
  var quotient = div(self, other);
  var y = mul(quotient, other);
  return /* tuple */[
          quotient,
          add(self, neg(y))
        ];
}

function compare(self, other) {
  var v = Caml_primitive.caml_nativeint_compare(self[/* hi */0], other[/* hi */0]);
  if (v === 0) {
    return Caml_primitive.caml_nativeint_compare(self[/* lo */1], other[/* lo */1]);
  } else {
    return v;
  }
}

function of_int32(lo) {
  return /* record */[
          /* hi */lo < 0 ? -1 : 0,
          /* lo */(lo >>> 0)
        ];
}

function to_int32(x) {
  return x[/* lo */1] | 0;
}

function to_hex(x) {
  var x_lo = x[/* lo */1];
  var x_hi = x[/* hi */0];
  var aux = function (v) {
    return (v >>> 0).toString(16);
  };
  var exit = 0;
  if (x_hi !== 0 || x_lo !== 0) {
    exit = 1;
  } else {
    return "0";
  }
  if (exit === 1) {
    if (x_lo !== 0) {
      if (x_hi !== 0) {
        var lo = aux(x_lo);
        var pad = 8 - lo.length | 0;
        if (pad <= 0) {
          return aux(x_hi) + lo;
        } else {
          return aux(x_hi) + (Caml_utils.repeat(pad, "0") + lo);
        }
      } else {
        return aux(x_lo);
      }
    } else {
      return aux(x_hi) + "00000000";
    }
  }
  
}

function discard_sign(x) {
  return /* record */[
          /* hi */2147483647 & x[/* hi */0],
          /* lo */x[/* lo */1]
        ];
}

function float_of_bits (x){ 
  return new Float64Array(new Int32Array([x[1],x[0]]).buffer)[0]
};

function bits_of_float(x) {
  var buf = (new Int32Array(new Float64Array([x]).buffer));
  return /* record */[
          /* hi */buf[1],
          /* lo */(buf[0] >>> 0)
        ];
}

function get64(s, i) {
  var hi = (s.charCodeAt(i + 4 | 0) << 32) | (s.charCodeAt(i + 5 | 0) << 40) | (s.charCodeAt(i + 6 | 0) << 48) | (s.charCodeAt(i + 7 | 0) << 56);
  var lo = s.charCodeAt(i) | (s.charCodeAt(i + 1 | 0) << 8) | (s.charCodeAt(i + 2 | 0) << 16) | (s.charCodeAt(i + 3 | 0) << 24);
  return /* record */[
          /* hi */hi,
          /* lo */(lo >>> 0)
        ];
}

exports.min_int = min_int;
exports.max_int = max_int;
exports.one = one;
exports.zero = zero;
exports.not = not;
exports.of_int32 = of_int32;
exports.to_int32 = to_int32;
exports.add = add;
exports.neg = neg;
exports.sub = sub;
exports.lsl_ = lsl_;
exports.lsr_ = lsr_;
exports.asr_ = asr_;
exports.is_zero = is_zero;
exports.mul = mul;
exports.xor = xor;
exports.or_ = or_;
exports.and_ = and_;
exports.swap = swap;
exports.ge = ge;
exports.eq = eq;
exports.neq = neq;
exports.lt = lt;
exports.gt = gt;
exports.le = le;
exports.equal_null = equal_null;
exports.equal_undefined = equal_undefined;
exports.equal_nullable = equal_nullable;
exports.min = min;
exports.max = max;
exports.to_float = to_float;
exports.of_float = of_float;
exports.div = div;
exports.mod_ = mod_;
exports.compare = compare;
exports.float_of_bits = float_of_bits;
exports.bits_of_float = bits_of_float;
exports.get64 = get64;
exports.div_mod = div_mod;
exports.to_hex = to_hex;
exports.discard_sign = discard_sign;
/* Caml_int32 Not a pure module */

},{"./caml_builtin_exceptions.js":6,"./caml_int32.js":10,"./caml_primitive.js":17,"./caml_utils.js":20}],12:[function(require,module,exports){
(function (process){
'use strict';

var Curry = require("./curry.js");

var stdout = /* record */[
  /* buffer */"",
  /* output */(function (param, s) {
      var v = s.length - 1 | 0;
      if (( (typeof process !== "undefined") && process.stdout && process.stdout.write)) {
        return ( process.stdout.write )(s);
      } else if (s[v] === "\n") {
        console.log(s.slice(0, v));
        return /* () */0;
      } else {
        console.log(s);
        return /* () */0;
      }
    })
];

var stderr = /* record */[
  /* buffer */"",
  /* output */(function (param, s) {
      var v = s.length - 1 | 0;
      if (s[v] === "\n") {
        console.log(s.slice(0, v));
        return /* () */0;
      } else {
        console.log(s);
        return /* () */0;
      }
    })
];

function caml_ml_flush(oc) {
  if (oc[/* buffer */0] !== "") {
    Curry._2(oc[/* output */1], oc, oc[/* buffer */0]);
    oc[/* buffer */0] = "";
    return /* () */0;
  } else {
    return 0;
  }
}

function caml_ml_output(oc, str, offset, len) {
  var str$1 = offset === 0 && len === str.length ? str : str.slice(offset, len);
  if (( (typeof process !== "undefined") && process.stdout && process.stdout.write ) && oc === stdout) {
    return ( process.stdout.write )(str$1);
  } else {
    var id = str$1.lastIndexOf("\n");
    if (id < 0) {
      oc[/* buffer */0] = oc[/* buffer */0] + str$1;
      return /* () */0;
    } else {
      oc[/* buffer */0] = oc[/* buffer */0] + str$1.slice(0, id + 1 | 0);
      caml_ml_flush(oc);
      oc[/* buffer */0] = oc[/* buffer */0] + str$1.slice(id + 1 | 0);
      return /* () */0;
    }
  }
}

function caml_ml_output_char(oc, $$char) {
  return caml_ml_output(oc, String.fromCharCode($$char), 0, 1);
}

function caml_ml_out_channels_list(param) {
  return /* :: */[
          stdout,
          /* :: */[
            stderr,
            /* [] */0
          ]
        ];
}

var stdin = undefined;

exports.stdin = stdin;
exports.stdout = stdout;
exports.stderr = stderr;
exports.caml_ml_flush = caml_ml_flush;
exports.caml_ml_output = caml_ml_output;
exports.caml_ml_output_char = caml_ml_output_char;
exports.caml_ml_out_channels_list = caml_ml_out_channels_list;
/* No side effect */

}).call(this,require('_process'))

},{"./curry.js":24,"_process":29}],13:[function(require,module,exports){
'use strict';

var Caml_option = require("./caml_option.js");
var Caml_exceptions = require("./caml_exceptions.js");

var $$Error = Caml_exceptions.create("Caml_js_exceptions.Error");

function internalToOCamlException(e) {
  if (Caml_exceptions.caml_is_extension(e)) {
    return e;
  } else {
    return [
            $$Error,
            e
          ];
  }
}

function caml_as_js_exn(exn) {
  if (exn[0] === $$Error) {
    return Caml_option.some(exn[1]);
  }
  
}

exports.$$Error = $$Error;
exports.internalToOCamlException = internalToOCamlException;
exports.caml_as_js_exn = caml_as_js_exn;
/* No side effect */

},{"./caml_exceptions.js":8,"./caml_option.js":16}],14:[function(require,module,exports){
'use strict';


function not_implemented (s){
  throw new Error(s + " not implemented by BuckleScript yet\n")
};

exports.not_implemented = not_implemented;
/* No side effect */

},{}],15:[function(require,module,exports){
'use strict';

var Block = require("./block.js");
var Caml_primitive = require("./caml_primitive.js");
var Caml_builtin_exceptions = require("./caml_builtin_exceptions.js");

function caml_obj_block(tag, size) {
  var v = new Array(size);
  v.tag = tag;
  return v;
}

function caml_obj_dup(x) {
  var len = x.length | 0;
  var v = new Array(len);
  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
    v[i] = x[i];
  }
  v.tag = x.tag | 0;
  return v;
}

function caml_obj_truncate(x, new_size) {
  var len = x.length | 0;
  if (new_size <= 0 || new_size > len) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "Obj.truncate"
        ];
  } else if (len !== new_size) {
    for(var i = new_size ,i_finish = len - 1 | 0; i <= i_finish; ++i){
      x[i] = 0;
    }
    x.length = new_size;
    return /* () */0;
  } else {
    return 0;
  }
}

function caml_lazy_make_forward(x) {
  return Block.__(250, [x]);
}

function caml_update_dummy(x, y) {
  var len = y.length | 0;
  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
    x[i] = y[i];
  }
  var y_tag = y.tag | 0;
  if (y_tag !== 0) {
    x.tag = y_tag;
    return /* () */0;
  } else {
    return 0;
  }
}

function for_in (o,foo){
        for (var x in o) { foo(x) }
      };

function caml_compare(_a, _b) {
  while(true) {
    var b = _b;
    var a = _a;
    if (a === b) {
      return 0;
    } else {
      var a_type = typeof a;
      var b_type = typeof b;
      var exit = 0;
      switch (a_type) {
        case "boolean" : 
            if (b_type === "boolean") {
              return Caml_primitive.caml_bool_compare(a, b);
            } else {
              exit = 1;
            }
            break;
        case "function" : 
            if (b_type === "function") {
              throw [
                    Caml_builtin_exceptions.invalid_argument,
                    "compare: functional value"
                  ];
            } else {
              exit = 1;
            }
            break;
        case "number" : 
            if (b_type === "number") {
              return Caml_primitive.caml_int_compare(a, b);
            } else {
              exit = 1;
            }
            break;
        case "string" : 
            if (b_type === "string") {
              return Caml_primitive.caml_string_compare(a, b);
            } else {
              return 1;
            }
        case "undefined" : 
            return -1;
        default:
          exit = 1;
      }
      if (exit === 1) {
        switch (b_type) {
          case "string" : 
              return -1;
          case "undefined" : 
              return 1;
          default:
            if (a_type === "boolean") {
              return 1;
            } else if (b_type === "boolean") {
              return -1;
            } else if (a_type === "function") {
              return 1;
            } else if (b_type === "function") {
              return -1;
            } else if (a_type === "number") {
              if (b === null || b.tag === 256) {
                return 1;
              } else {
                return -1;
              }
            } else if (b_type === "number") {
              if (a === null || a.tag === 256) {
                return -1;
              } else {
                return 1;
              }
            } else if (a === null) {
              if (b.tag === 256) {
                return 1;
              } else {
                return -1;
              }
            } else if (b === null) {
              if (a.tag === 256) {
                return -1;
              } else {
                return 1;
              }
            } else {
              var tag_a = a.tag | 0;
              var tag_b = b.tag | 0;
              if (tag_a === 250) {
                _a = a[0];
                continue ;
              } else if (tag_b === 250) {
                _b = b[0];
                continue ;
              } else if (tag_a === 256) {
                if (tag_b === 256) {
                  return Caml_primitive.caml_int_compare(a[1], b[1]);
                } else {
                  return -1;
                }
              } else if (tag_a === 248) {
                return Caml_primitive.caml_int_compare(a[1], b[1]);
              } else if (tag_a === 251) {
                throw [
                      Caml_builtin_exceptions.invalid_argument,
                      "equal: abstract value"
                    ];
              } else if (tag_a !== tag_b) {
                if (tag_a < tag_b) {
                  return -1;
                } else {
                  return 1;
                }
              } else {
                var len_a = a.length | 0;
                var len_b = b.length | 0;
                if (len_a === len_b) {
                  if (Array.isArray(a)) {
                    var a$1 = a;
                    var b$1 = b;
                    var _i = 0;
                    var same_length = len_a;
                    while(true) {
                      var i = _i;
                      if (i === same_length) {
                        return 0;
                      } else {
                        var res = caml_compare(a$1[i], b$1[i]);
                        if (res !== 0) {
                          return res;
                        } else {
                          _i = i + 1 | 0;
                          continue ;
                        }
                      }
                    };
                  } else {
                    var a$2 = a;
                    var b$2 = b;
                    var min_key_lhs = /* record */[/* contents */undefined];
                    var min_key_rhs = /* record */[/* contents */undefined];
                    var do_key = function (param, key) {
                      var min_key = param[2];
                      var b = param[1];
                      if (!b.hasOwnProperty(key) || caml_compare(param[0][key], b[key]) > 0) {
                        var match = min_key[0];
                        if (match !== undefined && key >= match) {
                          return 0;
                        } else {
                          min_key[0] = key;
                          return /* () */0;
                        }
                      } else {
                        return 0;
                      }
                    };
                    var partial_arg = /* tuple */[
                      a$2,
                      b$2,
                      min_key_rhs
                    ];
                    var do_key_a = (function(partial_arg){
                    return function do_key_a(param) {
                      return do_key(partial_arg, param);
                    }
                    }(partial_arg));
                    var partial_arg$1 = /* tuple */[
                      b$2,
                      a$2,
                      min_key_lhs
                    ];
                    var do_key_b = (function(partial_arg$1){
                    return function do_key_b(param) {
                      return do_key(partial_arg$1, param);
                    }
                    }(partial_arg$1));
                    for_in(a$2, do_key_a);
                    for_in(b$2, do_key_b);
                    var match = min_key_lhs[0];
                    var match$1 = min_key_rhs[0];
                    if (match !== undefined) {
                      if (match$1 !== undefined) {
                        return Caml_primitive.caml_string_compare(match, match$1);
                      } else {
                        return -1;
                      }
                    } else if (match$1 !== undefined) {
                      return 1;
                    } else {
                      return 0;
                    }
                  }
                } else if (len_a < len_b) {
                  var a$3 = a;
                  var b$3 = b;
                  var _i$1 = 0;
                  var short_length = len_a;
                  while(true) {
                    var i$1 = _i$1;
                    if (i$1 === short_length) {
                      return -1;
                    } else {
                      var res$1 = caml_compare(a$3[i$1], b$3[i$1]);
                      if (res$1 !== 0) {
                        return res$1;
                      } else {
                        _i$1 = i$1 + 1 | 0;
                        continue ;
                      }
                    }
                  };
                } else {
                  var a$4 = a;
                  var b$4 = b;
                  var _i$2 = 0;
                  var short_length$1 = len_b;
                  while(true) {
                    var i$2 = _i$2;
                    if (i$2 === short_length$1) {
                      return 1;
                    } else {
                      var res$2 = caml_compare(a$4[i$2], b$4[i$2]);
                      if (res$2 !== 0) {
                        return res$2;
                      } else {
                        _i$2 = i$2 + 1 | 0;
                        continue ;
                      }
                    }
                  };
                }
              }
            }
        }
      }
      
    }
  };
}

function caml_equal(_a, _b) {
  while(true) {
    var b = _b;
    var a = _a;
    if (a === b) {
      return true;
    } else {
      var a_type = typeof a;
      if (a_type === "string" || a_type === "number" || a_type === "boolean" || a_type === "undefined" || a === null) {
        return false;
      } else {
        var b_type = typeof b;
        if (a_type === "function" || b_type === "function") {
          throw [
                Caml_builtin_exceptions.invalid_argument,
                "equal: functional value"
              ];
        } else if (b_type === "number" || b_type === "undefined" || b === null) {
          return false;
        } else {
          var tag_a = a.tag | 0;
          var tag_b = b.tag | 0;
          if (tag_a === 250) {
            _a = a[0];
            continue ;
          } else if (tag_b === 250) {
            _b = b[0];
            continue ;
          } else if (tag_a === 248) {
            return a[1] === b[1];
          } else if (tag_a === 251) {
            throw [
                  Caml_builtin_exceptions.invalid_argument,
                  "equal: abstract value"
                ];
          } else if (tag_a !== tag_b) {
            return false;
          } else if (tag_a === 256) {
            return a[1] === b[1];
          } else {
            var len_a = a.length | 0;
            var len_b = b.length | 0;
            if (len_a === len_b) {
              if (Array.isArray(a)) {
                var a$1 = a;
                var b$1 = b;
                var _i = 0;
                var same_length = len_a;
                while(true) {
                  var i = _i;
                  if (i === same_length) {
                    return true;
                  } else if (caml_equal(a$1[i], b$1[i])) {
                    _i = i + 1 | 0;
                    continue ;
                  } else {
                    return false;
                  }
                };
              } else {
                var a$2 = a;
                var b$2 = b;
                var result = /* record */[/* contents */true];
                var do_key_a = (function(b$2,result){
                return function do_key_a(key) {
                  if (b$2.hasOwnProperty(key)) {
                    return 0;
                  } else {
                    result[0] = false;
                    return /* () */0;
                  }
                }
                }(b$2,result));
                var do_key_b = (function(a$2,b$2,result){
                return function do_key_b(key) {
                  if (!a$2.hasOwnProperty(key) || !caml_equal(b$2[key], a$2[key])) {
                    result[0] = false;
                    return /* () */0;
                  } else {
                    return 0;
                  }
                }
                }(a$2,b$2,result));
                for_in(a$2, do_key_a);
                if (result[0]) {
                  for_in(b$2, do_key_b);
                }
                return result[0];
              }
            } else {
              return false;
            }
          }
        }
      }
    }
  };
}

function caml_equal_null(x, y) {
  if (y !== null) {
    return caml_equal(x, y);
  } else {
    return x === y;
  }
}

function caml_equal_undefined(x, y) {
  if (y !== undefined) {
    return caml_equal(x, y);
  } else {
    return x === y;
  }
}

function caml_equal_nullable(x, y) {
  if (y == null) {
    return x === y;
  } else {
    return caml_equal(x, y);
  }
}

function caml_notequal(a, b) {
  return !caml_equal(a, b);
}

function caml_greaterequal(a, b) {
  return caml_compare(a, b) >= 0;
}

function caml_greaterthan(a, b) {
  return caml_compare(a, b) > 0;
}

function caml_lessequal(a, b) {
  return caml_compare(a, b) <= 0;
}

function caml_lessthan(a, b) {
  return caml_compare(a, b) < 0;
}

function caml_min(x, y) {
  if (caml_compare(x, y) <= 0) {
    return x;
  } else {
    return y;
  }
}

function caml_max(x, y) {
  if (caml_compare(x, y) >= 0) {
    return x;
  } else {
    return y;
  }
}

function caml_obj_set_tag(prim, prim$1) {
  prim.tag = prim$1;
  return /* () */0;
}

exports.caml_obj_block = caml_obj_block;
exports.caml_obj_dup = caml_obj_dup;
exports.caml_obj_truncate = caml_obj_truncate;
exports.caml_lazy_make_forward = caml_lazy_make_forward;
exports.caml_update_dummy = caml_update_dummy;
exports.caml_compare = caml_compare;
exports.caml_equal = caml_equal;
exports.caml_equal_null = caml_equal_null;
exports.caml_equal_undefined = caml_equal_undefined;
exports.caml_equal_nullable = caml_equal_nullable;
exports.caml_notequal = caml_notequal;
exports.caml_greaterequal = caml_greaterequal;
exports.caml_greaterthan = caml_greaterthan;
exports.caml_lessthan = caml_lessthan;
exports.caml_lessequal = caml_lessequal;
exports.caml_min = caml_min;
exports.caml_max = caml_max;
exports.caml_obj_set_tag = caml_obj_set_tag;
/* No side effect */

},{"./block.js":2,"./caml_builtin_exceptions.js":6,"./caml_primitive.js":17}],16:[function(require,module,exports){
'use strict';


var undefinedHeader = /* array */[];

function some(x) {
  if (x === undefined) {
    var block = /* tuple */[
      undefinedHeader,
      0
    ];
    block.tag = 256;
    return block;
  } else if (x !== null && x[0] === undefinedHeader) {
    var nid = x[1] + 1 | 0;
    var block$1 = /* tuple */[
      undefinedHeader,
      nid
    ];
    block$1.tag = 256;
    return block$1;
  } else {
    return x;
  }
}

function nullable_to_opt(x) {
  if (x === null || x === undefined) {
    return undefined;
  } else {
    return some(x);
  }
}

function undefined_to_opt(x) {
  if (x === undefined) {
    return undefined;
  } else {
    return some(x);
  }
}

function null_to_opt(x) {
  if (x === null) {
    return undefined;
  } else {
    return some(x);
  }
}

function valFromOption(x) {
  if (x !== null && x[0] === undefinedHeader) {
    var depth = x[1];
    if (depth === 0) {
      return undefined;
    } else {
      return /* tuple */[
              undefinedHeader,
              depth - 1 | 0
            ];
    }
  } else {
    return x;
  }
}

function option_get(x) {
  if (x === undefined) {
    return undefined;
  } else {
    return valFromOption(x);
  }
}

function option_get_unwrap(x) {
  if (x === undefined) {
    return undefined;
  } else {
    return valFromOption(x)[1];
  }
}

exports.nullable_to_opt = nullable_to_opt;
exports.undefined_to_opt = undefined_to_opt;
exports.null_to_opt = null_to_opt;
exports.valFromOption = valFromOption;
exports.some = some;
exports.option_get = option_get;
exports.option_get_unwrap = option_get_unwrap;
/* No side effect */

},{}],17:[function(require,module,exports){
'use strict';


function caml_int_compare(x, y) {
  if (x < y) {
    return -1;
  } else if (x === y) {
    return 0;
  } else {
    return 1;
  }
}

function caml_bool_compare(x, y) {
  if (x) {
    if (y) {
      return 0;
    } else {
      return 1;
    }
  } else if (y) {
    return -1;
  } else {
    return 0;
  }
}

function caml_float_compare(x, y) {
  if (x === y) {
    return 0;
  } else if (x < y) {
    return -1;
  } else if (x > y || x === x) {
    return 1;
  } else if (y === y) {
    return -1;
  } else {
    return 0;
  }
}

function caml_string_compare(s1, s2) {
  if (s1 === s2) {
    return 0;
  } else if (s1 < s2) {
    return -1;
  } else {
    return 1;
  }
}

function caml_bytes_compare_aux(s1, s2, _off, len, def) {
  while(true) {
    var off = _off;
    if (off < len) {
      var a = s1[off];
      var b = s2[off];
      if (a > b) {
        return 1;
      } else if (a < b) {
        return -1;
      } else {
        _off = off + 1 | 0;
        continue ;
      }
    } else {
      return def;
    }
  };
}

function caml_bytes_compare(s1, s2) {
  var len1 = s1.length;
  var len2 = s2.length;
  if (len1 === len2) {
    return caml_bytes_compare_aux(s1, s2, 0, len1, 0);
  } else if (len1 < len2) {
    return caml_bytes_compare_aux(s1, s2, 0, len1, -1);
  } else {
    return caml_bytes_compare_aux(s1, s2, 0, len2, 1);
  }
}

function caml_bytes_equal(s1, s2) {
  var len1 = s1.length;
  var len2 = s2.length;
  if (len1 === len2) {
    var s1$1 = s1;
    var s2$1 = s2;
    var _off = 0;
    var len = len1;
    while(true) {
      var off = _off;
      if (off === len) {
        return true;
      } else {
        var a = s1$1[off];
        var b = s2$1[off];
        if (a === b) {
          _off = off + 1 | 0;
          continue ;
        } else {
          return false;
        }
      }
    };
  } else {
    return false;
  }
}

function caml_bool_min(x, y) {
  if (x) {
    return y;
  } else {
    return x;
  }
}

function caml_int_min(x, y) {
  if (x < y) {
    return x;
  } else {
    return y;
  }
}

function caml_float_min(x, y) {
  if (x < y) {
    return x;
  } else {
    return y;
  }
}

function caml_string_min(x, y) {
  if (x < y) {
    return x;
  } else {
    return y;
  }
}

function caml_nativeint_min(x, y) {
  if (x < y) {
    return x;
  } else {
    return y;
  }
}

function caml_int32_min(x, y) {
  if (x < y) {
    return x;
  } else {
    return y;
  }
}

function caml_bool_max(x, y) {
  if (x) {
    return x;
  } else {
    return y;
  }
}

function caml_int_max(x, y) {
  if (x > y) {
    return x;
  } else {
    return y;
  }
}

function caml_float_max(x, y) {
  if (x > y) {
    return x;
  } else {
    return y;
  }
}

function caml_string_max(x, y) {
  if (x > y) {
    return x;
  } else {
    return y;
  }
}

function caml_nativeint_max(x, y) {
  if (x > y) {
    return x;
  } else {
    return y;
  }
}

function caml_int32_max(x, y) {
  if (x > y) {
    return x;
  } else {
    return y;
  }
}

var caml_nativeint_compare = caml_int_compare;

var caml_int32_compare = caml_int_compare;

exports.caml_bytes_compare = caml_bytes_compare;
exports.caml_bytes_equal = caml_bytes_equal;
exports.caml_int_compare = caml_int_compare;
exports.caml_bool_compare = caml_bool_compare;
exports.caml_float_compare = caml_float_compare;
exports.caml_nativeint_compare = caml_nativeint_compare;
exports.caml_string_compare = caml_string_compare;
exports.caml_int32_compare = caml_int32_compare;
exports.caml_bool_min = caml_bool_min;
exports.caml_int_min = caml_int_min;
exports.caml_float_min = caml_float_min;
exports.caml_string_min = caml_string_min;
exports.caml_nativeint_min = caml_nativeint_min;
exports.caml_int32_min = caml_int32_min;
exports.caml_bool_max = caml_bool_max;
exports.caml_int_max = caml_int_max;
exports.caml_float_max = caml_float_max;
exports.caml_string_max = caml_string_max;
exports.caml_nativeint_max = caml_nativeint_max;
exports.caml_int32_max = caml_int32_max;
/* No side effect */

},{}],18:[function(require,module,exports){
'use strict';

var Caml_builtin_exceptions = require("./caml_builtin_exceptions.js");

function caml_string_get(s, i) {
  if (i >= s.length || i < 0) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "index out of bounds"
        ];
  } else {
    return s.charCodeAt(i);
  }
}

function caml_string_get16(s, i) {
  return s.charCodeAt(i) + (s.charCodeAt(i + 1 | 0) << 8) | 0;
}

function caml_string_get32(s, i) {
  return ((s.charCodeAt(i) + (s.charCodeAt(i + 1 | 0) << 8) | 0) + (s.charCodeAt(i + 2 | 0) << 16) | 0) + (s.charCodeAt(i + 3 | 0) << 24) | 0;
}

function get(s, i) {
  if (i < 0 || i >= s.length) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "index out of bounds"
        ];
  } else {
    return s.charCodeAt(i);
  }
}

exports.caml_string_get = caml_string_get;
exports.caml_string_get16 = caml_string_get16;
exports.caml_string_get32 = caml_string_get32;
exports.get = get;
/* No side effect */

},{"./caml_builtin_exceptions.js":6}],19:[function(require,module,exports){
(function (process){
'use strict';

var Caml_builtin_exceptions = require("./caml_builtin_exceptions.js");

function caml_sys_getenv(s) {
  if (typeof process === "undefined" || (process.env) === undefined) {
    throw Caml_builtin_exceptions.not_found;
  } else {
    var match = (process.env)[s];
    if (match !== undefined) {
      return match;
    } else {
      throw Caml_builtin_exceptions.not_found;
    }
  }
}

function caml_sys_time(param) {
  if (typeof process === "undefined" || (process.uptime) === undefined) {
    return -1;
  } else {
    return process.uptime();
  }
}

function caml_sys_random_seed(param) {
  return /* array */[((Date.now() | 0) ^ 4294967295) * Math.random() | 0];
}

function caml_sys_system_command(_cmd) {
  return 127;
}

function caml_sys_getcwd(param) {
  if (typeof process === "undefined") {
    return "/";
  } else {
    return process.cwd();
  }
}

function caml_sys_get_argv(param) {
  if (typeof process === "undefined") {
    return /* tuple */[
            "",
            /* array */[""]
          ];
  } else {
    var argv = (process.argv);
    if (argv == null) {
      return /* tuple */[
              "",
              /* array */[""]
            ];
    } else {
      return /* tuple */[
              argv[0],
              argv
            ];
    }
  }
}

function caml_sys_exit(exit_code) {
  if (typeof process !== "undefined") {
    return process.exit(exit_code);
  } else {
    return 0;
  }
}

function caml_sys_is_directory(_s) {
  throw [
        Caml_builtin_exceptions.failure,
        "caml_sys_is_directory not implemented"
      ];
}

function caml_sys_file_exists(_s) {
  throw [
        Caml_builtin_exceptions.failure,
        "caml_sys_file_exists not implemented"
      ];
}

exports.caml_sys_getenv = caml_sys_getenv;
exports.caml_sys_time = caml_sys_time;
exports.caml_sys_random_seed = caml_sys_random_seed;
exports.caml_sys_system_command = caml_sys_system_command;
exports.caml_sys_getcwd = caml_sys_getcwd;
exports.caml_sys_get_argv = caml_sys_get_argv;
exports.caml_sys_exit = caml_sys_exit;
exports.caml_sys_is_directory = caml_sys_is_directory;
exports.caml_sys_file_exists = caml_sys_file_exists;
/* No side effect */

}).call(this,require('_process'))

},{"./caml_builtin_exceptions.js":6,"_process":29}],20:[function(require,module,exports){
'use strict';


function repeat (count,self){
    if (self.repeat){
        return self.repeat(count)
    }
    if (self.length == 0 || count == 0) {
            return '';
        }
    // Ensuring count is a 31-bit integer allows us to heavily optimize the
    // main part. But anyway, most current (August 2014) browsers can't handle
    // strings 1 << 28 chars or longer, so:
    if (self.length * count >= 1 << 28) {
            throw new RangeError('repeat count must not overflow maximum string size');
    }
    var rpt = '';
    for (;;) {
            if ((count & 1) == 1) {
                rpt += self;
            }
            count >>>= 1;
            if (count == 0) {
                break;
            }
            self += self;
    }
    return rpt;

};

exports.repeat = repeat;
/* No side effect */

},{}],21:[function(require,module,exports){
'use strict';

var Char = require("./char.js");
var Block = require("./block.js");
var Bytes = require("./bytes.js");
var Curry = require("./curry.js");
var $$Buffer = require("./buffer.js");
var $$String = require("./string.js");
var Caml_io = require("./caml_io.js");
var Caml_obj = require("./caml_obj.js");
var Caml_bytes = require("./caml_bytes.js");
var Caml_int32 = require("./caml_int32.js");
var Pervasives = require("./pervasives.js");
var Caml_format = require("./caml_format.js");
var Caml_string = require("./caml_string.js");
var Caml_primitive = require("./caml_primitive.js");
var Caml_exceptions = require("./caml_exceptions.js");
var Caml_js_exceptions = require("./caml_js_exceptions.js");
var Caml_builtin_exceptions = require("./caml_builtin_exceptions.js");
var CamlinternalFormatBasics = require("./camlinternalFormatBasics.js");

function create_char_set(param) {
  return Bytes.make(32, /* "\000" */0);
}

function add_in_char_set(char_set, c) {
  var str_ind = (c >>> 3);
  var mask = (1 << (c & 7));
  char_set[str_ind] = Pervasives.char_of_int(Caml_bytes.get(char_set, str_ind) | mask);
  return /* () */0;
}

var freeze_char_set = Bytes.to_string;

function rev_char_set(char_set) {
  var char_set$prime = Bytes.make(32, /* "\000" */0);
  for(var i = 0; i <= 31; ++i){
    char_set$prime[i] = Pervasives.char_of_int(Caml_string.get(char_set, i) ^ 255);
  }
  return Caml_bytes.bytes_to_string(char_set$prime);
}

function is_in_char_set(char_set, c) {
  var str_ind = (c >>> 3);
  var mask = (1 << (c & 7));
  return (Caml_string.get(char_set, str_ind) & mask) !== 0;
}

function pad_of_pad_opt(pad_opt) {
  if (pad_opt !== undefined) {
    return /* Lit_padding */Block.__(0, [
              /* Right */1,
              pad_opt
            ]);
  } else {
    return /* No_padding */0;
  }
}

function prec_of_prec_opt(prec_opt) {
  if (prec_opt !== undefined) {
    return /* Lit_precision */[prec_opt];
  } else {
    return /* No_precision */0;
  }
}

function param_format_of_ignored_format(ign, fmt) {
  if (typeof ign === "number") {
    switch (ign) {
      case 0 : 
          return /* Param_format_EBB */[/* Char */Block.__(0, [fmt])];
      case 1 : 
          return /* Param_format_EBB */[/* Caml_char */Block.__(1, [fmt])];
      case 2 : 
          return /* Param_format_EBB */[/* Bool */Block.__(9, [fmt])];
      case 3 : 
          return /* Param_format_EBB */[/* Reader */Block.__(19, [fmt])];
      case 4 : 
          return /* Param_format_EBB */[/* Scan_next_char */Block.__(22, [fmt])];
      
    }
  } else {
    switch (ign.tag | 0) {
      case 0 : 
          return /* Param_format_EBB */[/* String */Block.__(2, [
                      pad_of_pad_opt(ign[0]),
                      fmt
                    ])];
      case 1 : 
          return /* Param_format_EBB */[/* Caml_string */Block.__(3, [
                      pad_of_pad_opt(ign[0]),
                      fmt
                    ])];
      case 2 : 
          return /* Param_format_EBB */[/* Int */Block.__(4, [
                      ign[0],
                      pad_of_pad_opt(ign[1]),
                      /* No_precision */0,
                      fmt
                    ])];
      case 3 : 
          return /* Param_format_EBB */[/* Int32 */Block.__(5, [
                      ign[0],
                      pad_of_pad_opt(ign[1]),
                      /* No_precision */0,
                      fmt
                    ])];
      case 4 : 
          return /* Param_format_EBB */[/* Nativeint */Block.__(6, [
                      ign[0],
                      pad_of_pad_opt(ign[1]),
                      /* No_precision */0,
                      fmt
                    ])];
      case 5 : 
          return /* Param_format_EBB */[/* Int64 */Block.__(7, [
                      ign[0],
                      pad_of_pad_opt(ign[1]),
                      /* No_precision */0,
                      fmt
                    ])];
      case 6 : 
          return /* Param_format_EBB */[/* Float */Block.__(8, [
                      /* Float_f */0,
                      pad_of_pad_opt(ign[0]),
                      prec_of_prec_opt(ign[1]),
                      fmt
                    ])];
      case 7 : 
          return /* Param_format_EBB */[/* Format_arg */Block.__(13, [
                      ign[0],
                      ign[1],
                      fmt
                    ])];
      case 8 : 
          return /* Param_format_EBB */[/* Format_subst */Block.__(14, [
                      ign[0],
                      ign[1],
                      fmt
                    ])];
      case 9 : 
          return /* Param_format_EBB */[/* Scan_char_set */Block.__(20, [
                      ign[0],
                      ign[1],
                      fmt
                    ])];
      case 10 : 
          return /* Param_format_EBB */[/* Scan_get_counter */Block.__(21, [
                      ign[0],
                      fmt
                    ])];
      
    }
  }
}

function buffer_check_size(buf, overhead) {
  var len = buf[/* bytes */1].length;
  var min_len = buf[/* ind */0] + overhead | 0;
  if (min_len > len) {
    var new_len = Caml_primitive.caml_int_max((len << 1), min_len);
    var new_str = Caml_bytes.caml_create_bytes(new_len);
    Bytes.blit(buf[/* bytes */1], 0, new_str, 0, len);
    buf[/* bytes */1] = new_str;
    return /* () */0;
  } else {
    return 0;
  }
}

function buffer_add_char(buf, c) {
  buffer_check_size(buf, 1);
  buf[/* bytes */1][buf[/* ind */0]] = c;
  buf[/* ind */0] = buf[/* ind */0] + 1 | 0;
  return /* () */0;
}

function buffer_add_string(buf, s) {
  var str_len = s.length;
  buffer_check_size(buf, str_len);
  $$String.blit(s, 0, buf[/* bytes */1], buf[/* ind */0], str_len);
  buf[/* ind */0] = buf[/* ind */0] + str_len | 0;
  return /* () */0;
}

function buffer_contents(buf) {
  return Bytes.sub_string(buf[/* bytes */1], 0, buf[/* ind */0]);
}

function char_of_iconv(iconv) {
  switch (iconv) {
    case 0 : 
    case 1 : 
    case 2 : 
        return /* "d" */100;
    case 3 : 
    case 4 : 
    case 5 : 
        return /* "i" */105;
    case 6 : 
    case 7 : 
        return /* "x" */120;
    case 8 : 
    case 9 : 
        return /* "X" */88;
    case 10 : 
    case 11 : 
        return /* "o" */111;
    case 12 : 
        return /* "u" */117;
    
  }
}

function char_of_fconv(fconv) {
  switch (fconv) {
    case 0 : 
    case 1 : 
    case 2 : 
        return /* "f" */102;
    case 3 : 
    case 4 : 
    case 5 : 
        return /* "e" */101;
    case 6 : 
    case 7 : 
    case 8 : 
        return /* "E" */69;
    case 9 : 
    case 10 : 
    case 11 : 
        return /* "g" */103;
    case 12 : 
    case 13 : 
    case 14 : 
        return /* "G" */71;
    case 15 : 
        return /* "F" */70;
    
  }
}

function char_of_counter(counter) {
  switch (counter) {
    case 0 : 
        return /* "l" */108;
    case 1 : 
        return /* "n" */110;
    case 2 : 
        return /* "N" */78;
    
  }
}

function bprint_char_set(buf, char_set) {
  var print_char = function (buf, i) {
    var c = Pervasives.char_of_int(i);
    if (c !== 37) {
      if (c !== 64) {
        return buffer_add_char(buf, c);
      } else {
        buffer_add_char(buf, /* "%" */37);
        return buffer_add_char(buf, /* "@" */64);
      }
    } else {
      buffer_add_char(buf, /* "%" */37);
      return buffer_add_char(buf, /* "%" */37);
    }
  };
  var print_out = function (set, _i) {
    while(true) {
      var i = _i;
      if (i < 256) {
        if (is_in_char_set(set, Pervasives.char_of_int(i))) {
          var set$1 = set;
          var i$1 = i;
          var match = Pervasives.char_of_int(i$1);
          var switcher = match - 45 | 0;
          if (switcher > 48 || switcher < 0) {
            if (switcher >= 210) {
              return print_char(buf, 255);
            } else {
              return print_second(set$1, i$1 + 1 | 0);
            }
          } else if (switcher > 47 || switcher < 1) {
            return print_out(set$1, i$1 + 1 | 0);
          } else {
            return print_second(set$1, i$1 + 1 | 0);
          }
        } else {
          _i = i + 1 | 0;
          continue ;
        }
      } else {
        return 0;
      }
    };
  };
  var print_second = function (set, i) {
    if (is_in_char_set(set, Pervasives.char_of_int(i))) {
      var match = Pervasives.char_of_int(i);
      var exit = 0;
      var switcher = match - 45 | 0;
      if (switcher > 48 || switcher < 0) {
        if (switcher >= 210) {
          print_char(buf, 254);
          return print_char(buf, 255);
        } else {
          exit = 1;
        }
      } else if ((switcher > 47 || switcher < 1) && !is_in_char_set(set, Pervasives.char_of_int(i + 1 | 0))) {
        print_char(buf, i - 1 | 0);
        return print_out(set, i + 1 | 0);
      } else {
        exit = 1;
      }
      if (exit === 1) {
        if (is_in_char_set(set, Pervasives.char_of_int(i + 1 | 0))) {
          var set$1 = set;
          var i$1 = i - 1 | 0;
          var _j = i + 2 | 0;
          while(true) {
            var j = _j;
            if (j === 256 || !is_in_char_set(set$1, Pervasives.char_of_int(j))) {
              print_char(buf, i$1);
              print_char(buf, /* "-" */45);
              print_char(buf, j - 1 | 0);
              if (j < 256) {
                return print_out(set$1, j + 1 | 0);
              } else {
                return 0;
              }
            } else {
              _j = j + 1 | 0;
              continue ;
            }
          };
        } else {
          print_char(buf, i - 1 | 0);
          print_char(buf, i);
          return print_out(set, i + 2 | 0);
        }
      }
      
    } else {
      print_char(buf, i - 1 | 0);
      return print_out(set, i + 1 | 0);
    }
  };
  var print_start = function (set) {
    var is_alone = function (c) {
      var before = Char.chr(c - 1 | 0);
      var after = Char.chr(c + 1 | 0);
      if (is_in_char_set(set, c)) {
        return !(is_in_char_set(set, before) && is_in_char_set(set, after));
      } else {
        return false;
      }
    };
    if (is_alone(/* "]" */93)) {
      buffer_add_char(buf, /* "]" */93);
    }
    print_out(set, 1);
    if (is_alone(/* "-" */45)) {
      return buffer_add_char(buf, /* "-" */45);
    } else {
      return 0;
    }
  };
  buffer_add_char(buf, /* "[" */91);
  print_start(is_in_char_set(char_set, /* "\000" */0) ? (buffer_add_char(buf, /* "^" */94), rev_char_set(char_set)) : char_set);
  return buffer_add_char(buf, /* "]" */93);
}

function bprint_padty(buf, padty) {
  switch (padty) {
    case 0 : 
        return buffer_add_char(buf, /* "-" */45);
    case 1 : 
        return /* () */0;
    case 2 : 
        return buffer_add_char(buf, /* "0" */48);
    
  }
}

function bprint_ignored_flag(buf, ign_flag) {
  if (ign_flag) {
    return buffer_add_char(buf, /* "_" */95);
  } else {
    return 0;
  }
}

function bprint_pad_opt(buf, pad_opt) {
  if (pad_opt !== undefined) {
    return buffer_add_string(buf, String(pad_opt));
  } else {
    return /* () */0;
  }
}

function bprint_padding(buf, pad) {
  if (typeof pad === "number") {
    return /* () */0;
  } else {
    bprint_padty(buf, pad[0]);
    if (pad.tag) {
      return buffer_add_char(buf, /* "*" */42);
    } else {
      return buffer_add_string(buf, String(pad[1]));
    }
  }
}

function bprint_precision(buf, prec) {
  if (typeof prec === "number") {
    if (prec !== 0) {
      return buffer_add_string(buf, ".*");
    } else {
      return /* () */0;
    }
  } else {
    buffer_add_char(buf, /* "." */46);
    return buffer_add_string(buf, String(prec[0]));
  }
}

function bprint_iconv_flag(buf, iconv) {
  switch (iconv) {
    case 1 : 
    case 4 : 
        return buffer_add_char(buf, /* "+" */43);
    case 2 : 
    case 5 : 
        return buffer_add_char(buf, /* " " */32);
    case 7 : 
    case 9 : 
    case 11 : 
        return buffer_add_char(buf, /* "#" */35);
    case 0 : 
    case 3 : 
    case 6 : 
    case 8 : 
    case 10 : 
    case 12 : 
        return /* () */0;
    
  }
}

function bprint_int_fmt(buf, ign_flag, iconv, pad, prec) {
  buffer_add_char(buf, /* "%" */37);
  bprint_ignored_flag(buf, ign_flag);
  bprint_iconv_flag(buf, iconv);
  bprint_padding(buf, pad);
  bprint_precision(buf, prec);
  return buffer_add_char(buf, char_of_iconv(iconv));
}

function bprint_altint_fmt(buf, ign_flag, iconv, pad, prec, c) {
  buffer_add_char(buf, /* "%" */37);
  bprint_ignored_flag(buf, ign_flag);
  bprint_iconv_flag(buf, iconv);
  bprint_padding(buf, pad);
  bprint_precision(buf, prec);
  buffer_add_char(buf, c);
  return buffer_add_char(buf, char_of_iconv(iconv));
}

function bprint_fconv_flag(buf, fconv) {
  switch (fconv) {
    case 1 : 
    case 4 : 
    case 7 : 
    case 10 : 
    case 13 : 
        return buffer_add_char(buf, /* "+" */43);
    case 2 : 
    case 5 : 
    case 8 : 
    case 11 : 
    case 14 : 
        return buffer_add_char(buf, /* " " */32);
    case 0 : 
    case 3 : 
    case 6 : 
    case 9 : 
    case 12 : 
    case 15 : 
        return /* () */0;
    
  }
}

function bprint_float_fmt(buf, ign_flag, fconv, pad, prec) {
  buffer_add_char(buf, /* "%" */37);
  bprint_ignored_flag(buf, ign_flag);
  bprint_fconv_flag(buf, fconv);
  bprint_padding(buf, pad);
  bprint_precision(buf, prec);
  return buffer_add_char(buf, char_of_fconv(fconv));
}

function string_of_formatting_lit(formatting_lit) {
  if (typeof formatting_lit === "number") {
    switch (formatting_lit) {
      case 0 : 
          return "@]";
      case 1 : 
          return "@}";
      case 2 : 
          return "@?";
      case 3 : 
          return "@\n";
      case 4 : 
          return "@.";
      case 5 : 
          return "@@";
      case 6 : 
          return "@%";
      
    }
  } else {
    switch (formatting_lit.tag | 0) {
      case 0 : 
      case 1 : 
          return formatting_lit[0];
      case 2 : 
          return "@" + Caml_bytes.bytes_to_string(Bytes.make(1, formatting_lit[0]));
      
    }
  }
}

function string_of_formatting_gen(formatting_gen) {
  return formatting_gen[0][1];
}

function bprint_char_literal(buf, chr) {
  if (chr !== 37) {
    return buffer_add_char(buf, chr);
  } else {
    return buffer_add_string(buf, "%%");
  }
}

function bprint_string_literal(buf, str) {
  for(var i = 0 ,i_finish = str.length - 1 | 0; i <= i_finish; ++i){
    bprint_char_literal(buf, Caml_string.get(str, i));
  }
  return /* () */0;
}

function bprint_fmtty(buf, _fmtty) {
  while(true) {
    var fmtty = _fmtty;
    if (typeof fmtty === "number") {
      return /* () */0;
    } else {
      switch (fmtty.tag | 0) {
        case 0 : 
            buffer_add_string(buf, "%c");
            _fmtty = fmtty[0];
            continue ;
        case 1 : 
            buffer_add_string(buf, "%s");
            _fmtty = fmtty[0];
            continue ;
        case 2 : 
            buffer_add_string(buf, "%i");
            _fmtty = fmtty[0];
            continue ;
        case 3 : 
            buffer_add_string(buf, "%li");
            _fmtty = fmtty[0];
            continue ;
        case 4 : 
            buffer_add_string(buf, "%ni");
            _fmtty = fmtty[0];
            continue ;
        case 5 : 
            buffer_add_string(buf, "%Li");
            _fmtty = fmtty[0];
            continue ;
        case 6 : 
            buffer_add_string(buf, "%f");
            _fmtty = fmtty[0];
            continue ;
        case 7 : 
            buffer_add_string(buf, "%B");
            _fmtty = fmtty[0];
            continue ;
        case 8 : 
            buffer_add_string(buf, "%{");
            bprint_fmtty(buf, fmtty[0]);
            buffer_add_string(buf, "%}");
            _fmtty = fmtty[1];
            continue ;
        case 9 : 
            buffer_add_string(buf, "%(");
            bprint_fmtty(buf, fmtty[0]);
            buffer_add_string(buf, "%)");
            _fmtty = fmtty[2];
            continue ;
        case 10 : 
            buffer_add_string(buf, "%a");
            _fmtty = fmtty[0];
            continue ;
        case 11 : 
            buffer_add_string(buf, "%t");
            _fmtty = fmtty[0];
            continue ;
        case 12 : 
            buffer_add_string(buf, "%?");
            _fmtty = fmtty[0];
            continue ;
        case 13 : 
            buffer_add_string(buf, "%r");
            _fmtty = fmtty[0];
            continue ;
        case 14 : 
            buffer_add_string(buf, "%_r");
            _fmtty = fmtty[0];
            continue ;
        
      }
    }
  };
}

function int_of_custom_arity(param) {
  if (param) {
    return 1 + int_of_custom_arity(param[0]) | 0;
  } else {
    return 0;
  }
}

function bprint_fmt(buf, fmt) {
  var _fmt = fmt;
  var _ign_flag = false;
  while(true) {
    var ign_flag = _ign_flag;
    var fmt$1 = _fmt;
    if (typeof fmt$1 === "number") {
      return /* () */0;
    } else {
      switch (fmt$1.tag | 0) {
        case 0 : 
            buffer_add_char(buf, /* "%" */37);
            bprint_ignored_flag(buf, ign_flag);
            buffer_add_char(buf, /* "c" */99);
            _ign_flag = false;
            _fmt = fmt$1[0];
            continue ;
        case 1 : 
            buffer_add_char(buf, /* "%" */37);
            bprint_ignored_flag(buf, ign_flag);
            buffer_add_char(buf, /* "C" */67);
            _ign_flag = false;
            _fmt = fmt$1[0];
            continue ;
        case 2 : 
            buffer_add_char(buf, /* "%" */37);
            bprint_ignored_flag(buf, ign_flag);
            bprint_padding(buf, fmt$1[0]);
            buffer_add_char(buf, /* "s" */115);
            _ign_flag = false;
            _fmt = fmt$1[1];
            continue ;
        case 3 : 
            buffer_add_char(buf, /* "%" */37);
            bprint_ignored_flag(buf, ign_flag);
            bprint_padding(buf, fmt$1[0]);
            buffer_add_char(buf, /* "S" */83);
            _ign_flag = false;
            _fmt = fmt$1[1];
            continue ;
        case 4 : 
            bprint_int_fmt(buf, ign_flag, fmt$1[0], fmt$1[1], fmt$1[2]);
            _ign_flag = false;
            _fmt = fmt$1[3];
            continue ;
        case 5 : 
            bprint_altint_fmt(buf, ign_flag, fmt$1[0], fmt$1[1], fmt$1[2], /* "l" */108);
            _ign_flag = false;
            _fmt = fmt$1[3];
            continue ;
        case 6 : 
            bprint_altint_fmt(buf, ign_flag, fmt$1[0], fmt$1[1], fmt$1[2], /* "n" */110);
            _ign_flag = false;
            _fmt = fmt$1[3];
            continue ;
        case 7 : 
            bprint_altint_fmt(buf, ign_flag, fmt$1[0], fmt$1[1], fmt$1[2], /* "L" */76);
            _ign_flag = false;
            _fmt = fmt$1[3];
            continue ;
        case 8 : 
            bprint_float_fmt(buf, ign_flag, fmt$1[0], fmt$1[1], fmt$1[2]);
            _ign_flag = false;
            _fmt = fmt$1[3];
            continue ;
        case 9 : 
            buffer_add_char(buf, /* "%" */37);
            bprint_ignored_flag(buf, ign_flag);
            buffer_add_char(buf, /* "B" */66);
            _ign_flag = false;
            _fmt = fmt$1[0];
            continue ;
        case 10 : 
            buffer_add_string(buf, "%!");
            _fmt = fmt$1[0];
            continue ;
        case 11 : 
            bprint_string_literal(buf, fmt$1[0]);
            _fmt = fmt$1[1];
            continue ;
        case 12 : 
            bprint_char_literal(buf, fmt$1[0]);
            _fmt = fmt$1[1];
            continue ;
        case 13 : 
            buffer_add_char(buf, /* "%" */37);
            bprint_ignored_flag(buf, ign_flag);
            bprint_pad_opt(buf, fmt$1[0]);
            buffer_add_char(buf, /* "{" */123);
            bprint_fmtty(buf, fmt$1[1]);
            buffer_add_char(buf, /* "%" */37);
            buffer_add_char(buf, /* "}" */125);
            _ign_flag = false;
            _fmt = fmt$1[2];
            continue ;
        case 14 : 
            buffer_add_char(buf, /* "%" */37);
            bprint_ignored_flag(buf, ign_flag);
            bprint_pad_opt(buf, fmt$1[0]);
            buffer_add_char(buf, /* "(" */40);
            bprint_fmtty(buf, fmt$1[1]);
            buffer_add_char(buf, /* "%" */37);
            buffer_add_char(buf, /* ")" */41);
            _ign_flag = false;
            _fmt = fmt$1[2];
            continue ;
        case 15 : 
            buffer_add_char(buf, /* "%" */37);
            bprint_ignored_flag(buf, ign_flag);
            buffer_add_char(buf, /* "a" */97);
            _ign_flag = false;
            _fmt = fmt$1[0];
            continue ;
        case 16 : 
            buffer_add_char(buf, /* "%" */37);
            bprint_ignored_flag(buf, ign_flag);
            buffer_add_char(buf, /* "t" */116);
            _ign_flag = false;
            _fmt = fmt$1[0];
            continue ;
        case 17 : 
            bprint_string_literal(buf, string_of_formatting_lit(fmt$1[0]));
            _fmt = fmt$1[1];
            continue ;
        case 18 : 
            bprint_string_literal(buf, "@{");
            bprint_string_literal(buf, string_of_formatting_gen(fmt$1[0]));
            _fmt = fmt$1[1];
            continue ;
        case 19 : 
            buffer_add_char(buf, /* "%" */37);
            bprint_ignored_flag(buf, ign_flag);
            buffer_add_char(buf, /* "r" */114);
            _ign_flag = false;
            _fmt = fmt$1[0];
            continue ;
        case 20 : 
            buffer_add_char(buf, /* "%" */37);
            bprint_ignored_flag(buf, ign_flag);
            bprint_pad_opt(buf, fmt$1[0]);
            bprint_char_set(buf, fmt$1[1]);
            _ign_flag = false;
            _fmt = fmt$1[2];
            continue ;
        case 21 : 
            buffer_add_char(buf, /* "%" */37);
            bprint_ignored_flag(buf, ign_flag);
            buffer_add_char(buf, char_of_counter(fmt$1[0]));
            _ign_flag = false;
            _fmt = fmt$1[1];
            continue ;
        case 22 : 
            buffer_add_char(buf, /* "%" */37);
            bprint_ignored_flag(buf, ign_flag);
            bprint_string_literal(buf, "0c");
            _ign_flag = false;
            _fmt = fmt$1[0];
            continue ;
        case 23 : 
            var match = param_format_of_ignored_format(fmt$1[0], fmt$1[1]);
            _ign_flag = true;
            _fmt = match[0];
            continue ;
        case 24 : 
            for(var _i = 1 ,_i_finish = int_of_custom_arity(fmt$1[0]); _i <= _i_finish; ++_i){
              buffer_add_char(buf, /* "%" */37);
              bprint_ignored_flag(buf, ign_flag);
              buffer_add_char(buf, /* "?" */63);
            }
            _ign_flag = false;
            _fmt = fmt$1[2];
            continue ;
        
      }
    }
  };
}

function string_of_fmt(fmt) {
  var buf = /* record */[
    /* ind */0,
    /* bytes */Caml_bytes.caml_create_bytes(16)
  ];
  bprint_fmt(buf, fmt);
  return buffer_contents(buf);
}

function symm(param) {
  if (typeof param === "number") {
    return /* End_of_fmtty */0;
  } else {
    switch (param.tag | 0) {
      case 0 : 
          return /* Char_ty */Block.__(0, [symm(param[0])]);
      case 1 : 
          return /* String_ty */Block.__(1, [symm(param[0])]);
      case 2 : 
          return /* Int_ty */Block.__(2, [symm(param[0])]);
      case 3 : 
          return /* Int32_ty */Block.__(3, [symm(param[0])]);
      case 4 : 
          return /* Nativeint_ty */Block.__(4, [symm(param[0])]);
      case 5 : 
          return /* Int64_ty */Block.__(5, [symm(param[0])]);
      case 6 : 
          return /* Float_ty */Block.__(6, [symm(param[0])]);
      case 7 : 
          return /* Bool_ty */Block.__(7, [symm(param[0])]);
      case 8 : 
          return /* Format_arg_ty */Block.__(8, [
                    param[0],
                    symm(param[1])
                  ]);
      case 9 : 
          return /* Format_subst_ty */Block.__(9, [
                    param[1],
                    param[0],
                    symm(param[2])
                  ]);
      case 10 : 
          return /* Alpha_ty */Block.__(10, [symm(param[0])]);
      case 11 : 
          return /* Theta_ty */Block.__(11, [symm(param[0])]);
      case 12 : 
          return /* Any_ty */Block.__(12, [symm(param[0])]);
      case 13 : 
          return /* Reader_ty */Block.__(13, [symm(param[0])]);
      case 14 : 
          return /* Ignored_reader_ty */Block.__(14, [symm(param[0])]);
      
    }
  }
}

function fmtty_rel_det(param) {
  if (typeof param === "number") {
    return /* tuple */[
            (function (param) {
                return /* Refl */0;
              }),
            (function (param) {
                return /* Refl */0;
              }),
            (function (param) {
                return /* Refl */0;
              }),
            (function (param) {
                return /* Refl */0;
              })
          ];
  } else {
    switch (param.tag | 0) {
      case 0 : 
          var match = fmtty_rel_det(param[0]);
          var af = match[1];
          var fa = match[0];
          return /* tuple */[
                  (function (param) {
                      Curry._1(fa, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(af, /* Refl */0);
                      return /* Refl */0;
                    }),
                  match[2],
                  match[3]
                ];
      case 1 : 
          var match$1 = fmtty_rel_det(param[0]);
          var af$1 = match$1[1];
          var fa$1 = match$1[0];
          return /* tuple */[
                  (function (param) {
                      Curry._1(fa$1, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(af$1, /* Refl */0);
                      return /* Refl */0;
                    }),
                  match$1[2],
                  match$1[3]
                ];
      case 2 : 
          var match$2 = fmtty_rel_det(param[0]);
          var af$2 = match$2[1];
          var fa$2 = match$2[0];
          return /* tuple */[
                  (function (param) {
                      Curry._1(fa$2, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(af$2, /* Refl */0);
                      return /* Refl */0;
                    }),
                  match$2[2],
                  match$2[3]
                ];
      case 3 : 
          var match$3 = fmtty_rel_det(param[0]);
          var af$3 = match$3[1];
          var fa$3 = match$3[0];
          return /* tuple */[
                  (function (param) {
                      Curry._1(fa$3, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(af$3, /* Refl */0);
                      return /* Refl */0;
                    }),
                  match$3[2],
                  match$3[3]
                ];
      case 4 : 
          var match$4 = fmtty_rel_det(param[0]);
          var af$4 = match$4[1];
          var fa$4 = match$4[0];
          return /* tuple */[
                  (function (param) {
                      Curry._1(fa$4, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(af$4, /* Refl */0);
                      return /* Refl */0;
                    }),
                  match$4[2],
                  match$4[3]
                ];
      case 5 : 
          var match$5 = fmtty_rel_det(param[0]);
          var af$5 = match$5[1];
          var fa$5 = match$5[0];
          return /* tuple */[
                  (function (param) {
                      Curry._1(fa$5, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(af$5, /* Refl */0);
                      return /* Refl */0;
                    }),
                  match$5[2],
                  match$5[3]
                ];
      case 6 : 
          var match$6 = fmtty_rel_det(param[0]);
          var af$6 = match$6[1];
          var fa$6 = match$6[0];
          return /* tuple */[
                  (function (param) {
                      Curry._1(fa$6, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(af$6, /* Refl */0);
                      return /* Refl */0;
                    }),
                  match$6[2],
                  match$6[3]
                ];
      case 7 : 
          var match$7 = fmtty_rel_det(param[0]);
          var af$7 = match$7[1];
          var fa$7 = match$7[0];
          return /* tuple */[
                  (function (param) {
                      Curry._1(fa$7, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(af$7, /* Refl */0);
                      return /* Refl */0;
                    }),
                  match$7[2],
                  match$7[3]
                ];
      case 8 : 
          var match$8 = fmtty_rel_det(param[1]);
          var af$8 = match$8[1];
          var fa$8 = match$8[0];
          return /* tuple */[
                  (function (param) {
                      Curry._1(fa$8, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(af$8, /* Refl */0);
                      return /* Refl */0;
                    }),
                  match$8[2],
                  match$8[3]
                ];
      case 9 : 
          var match$9 = fmtty_rel_det(param[2]);
          var de = match$9[3];
          var ed = match$9[2];
          var af$9 = match$9[1];
          var fa$9 = match$9[0];
          var ty = trans(symm(param[0]), param[1]);
          var match$10 = fmtty_rel_det(ty);
          var jd = match$10[3];
          var dj = match$10[2];
          var ga = match$10[1];
          var ag = match$10[0];
          return /* tuple */[
                  (function (param) {
                      Curry._1(fa$9, /* Refl */0);
                      Curry._1(ag, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(ga, /* Refl */0);
                      Curry._1(af$9, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(ed, /* Refl */0);
                      Curry._1(dj, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(jd, /* Refl */0);
                      Curry._1(de, /* Refl */0);
                      return /* Refl */0;
                    })
                ];
      case 10 : 
          var match$11 = fmtty_rel_det(param[0]);
          var af$10 = match$11[1];
          var fa$10 = match$11[0];
          return /* tuple */[
                  (function (param) {
                      Curry._1(fa$10, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(af$10, /* Refl */0);
                      return /* Refl */0;
                    }),
                  match$11[2],
                  match$11[3]
                ];
      case 11 : 
          var match$12 = fmtty_rel_det(param[0]);
          var af$11 = match$12[1];
          var fa$11 = match$12[0];
          return /* tuple */[
                  (function (param) {
                      Curry._1(fa$11, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(af$11, /* Refl */0);
                      return /* Refl */0;
                    }),
                  match$12[2],
                  match$12[3]
                ];
      case 12 : 
          var match$13 = fmtty_rel_det(param[0]);
          var af$12 = match$13[1];
          var fa$12 = match$13[0];
          return /* tuple */[
                  (function (param) {
                      Curry._1(fa$12, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(af$12, /* Refl */0);
                      return /* Refl */0;
                    }),
                  match$13[2],
                  match$13[3]
                ];
      case 13 : 
          var match$14 = fmtty_rel_det(param[0]);
          var de$1 = match$14[3];
          var ed$1 = match$14[2];
          var af$13 = match$14[1];
          var fa$13 = match$14[0];
          return /* tuple */[
                  (function (param) {
                      Curry._1(fa$13, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(af$13, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(ed$1, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(de$1, /* Refl */0);
                      return /* Refl */0;
                    })
                ];
      case 14 : 
          var match$15 = fmtty_rel_det(param[0]);
          var de$2 = match$15[3];
          var ed$2 = match$15[2];
          var af$14 = match$15[1];
          var fa$14 = match$15[0];
          return /* tuple */[
                  (function (param) {
                      Curry._1(fa$14, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(af$14, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(ed$2, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(de$2, /* Refl */0);
                      return /* Refl */0;
                    })
                ];
      
    }
  }
}

function trans(ty1, ty2) {
  var exit = 0;
  if (typeof ty1 === "number") {
    if (typeof ty2 === "number") {
      return /* End_of_fmtty */0;
    } else {
      switch (ty2.tag | 0) {
        case 8 : 
            exit = 6;
            break;
        case 9 : 
            exit = 7;
            break;
        case 10 : 
            exit = 1;
            break;
        case 11 : 
            exit = 2;
            break;
        case 12 : 
            exit = 3;
            break;
        case 13 : 
            exit = 4;
            break;
        case 14 : 
            exit = 5;
            break;
        default:
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "camlinternalFormat.ml",
                  816,
                  23
                ]
              ];
      }
    }
  } else {
    switch (ty1.tag | 0) {
      case 0 : 
          if (typeof ty2 === "number") {
            exit = 8;
          } else {
            switch (ty2.tag | 0) {
              case 0 : 
                  return /* Char_ty */Block.__(0, [trans(ty1[0], ty2[0])]);
              case 8 : 
                  exit = 6;
                  break;
              case 9 : 
                  exit = 7;
                  break;
              case 10 : 
                  exit = 1;
                  break;
              case 11 : 
                  exit = 2;
                  break;
              case 12 : 
                  exit = 3;
                  break;
              case 13 : 
                  exit = 4;
                  break;
              case 14 : 
                  exit = 5;
                  break;
              
            }
          }
          break;
      case 1 : 
          if (typeof ty2 === "number") {
            exit = 8;
          } else {
            switch (ty2.tag | 0) {
              case 1 : 
                  return /* String_ty */Block.__(1, [trans(ty1[0], ty2[0])]);
              case 8 : 
                  exit = 6;
                  break;
              case 9 : 
                  exit = 7;
                  break;
              case 10 : 
                  exit = 1;
                  break;
              case 11 : 
                  exit = 2;
                  break;
              case 12 : 
                  exit = 3;
                  break;
              case 13 : 
                  exit = 4;
                  break;
              case 14 : 
                  exit = 5;
                  break;
              
            }
          }
          break;
      case 2 : 
          if (typeof ty2 === "number") {
            exit = 8;
          } else {
            switch (ty2.tag | 0) {
              case 2 : 
                  return /* Int_ty */Block.__(2, [trans(ty1[0], ty2[0])]);
              case 8 : 
                  exit = 6;
                  break;
              case 9 : 
                  exit = 7;
                  break;
              case 10 : 
                  exit = 1;
                  break;
              case 11 : 
                  exit = 2;
                  break;
              case 12 : 
                  exit = 3;
                  break;
              case 13 : 
                  exit = 4;
                  break;
              case 14 : 
                  exit = 5;
                  break;
              
            }
          }
          break;
      case 3 : 
          if (typeof ty2 === "number") {
            exit = 8;
          } else {
            switch (ty2.tag | 0) {
              case 3 : 
                  return /* Int32_ty */Block.__(3, [trans(ty1[0], ty2[0])]);
              case 8 : 
                  exit = 6;
                  break;
              case 9 : 
                  exit = 7;
                  break;
              case 10 : 
                  exit = 1;
                  break;
              case 11 : 
                  exit = 2;
                  break;
              case 12 : 
                  exit = 3;
                  break;
              case 13 : 
                  exit = 4;
                  break;
              case 14 : 
                  exit = 5;
                  break;
              
            }
          }
          break;
      case 4 : 
          if (typeof ty2 === "number") {
            exit = 8;
          } else {
            switch (ty2.tag | 0) {
              case 4 : 
                  return /* Nativeint_ty */Block.__(4, [trans(ty1[0], ty2[0])]);
              case 8 : 
                  exit = 6;
                  break;
              case 9 : 
                  exit = 7;
                  break;
              case 10 : 
                  exit = 1;
                  break;
              case 11 : 
                  exit = 2;
                  break;
              case 12 : 
                  exit = 3;
                  break;
              case 13 : 
                  exit = 4;
                  break;
              case 14 : 
                  exit = 5;
                  break;
              
            }
          }
          break;
      case 5 : 
          if (typeof ty2 === "number") {
            exit = 8;
          } else {
            switch (ty2.tag | 0) {
              case 5 : 
                  return /* Int64_ty */Block.__(5, [trans(ty1[0], ty2[0])]);
              case 8 : 
                  exit = 6;
                  break;
              case 9 : 
                  exit = 7;
                  break;
              case 10 : 
                  exit = 1;
                  break;
              case 11 : 
                  exit = 2;
                  break;
              case 12 : 
                  exit = 3;
                  break;
              case 13 : 
                  exit = 4;
                  break;
              case 14 : 
                  exit = 5;
                  break;
              
            }
          }
          break;
      case 6 : 
          if (typeof ty2 === "number") {
            exit = 8;
          } else {
            switch (ty2.tag | 0) {
              case 6 : 
                  return /* Float_ty */Block.__(6, [trans(ty1[0], ty2[0])]);
              case 8 : 
                  exit = 6;
                  break;
              case 9 : 
                  exit = 7;
                  break;
              case 10 : 
                  exit = 1;
                  break;
              case 11 : 
                  exit = 2;
                  break;
              case 12 : 
                  exit = 3;
                  break;
              case 13 : 
                  exit = 4;
                  break;
              case 14 : 
                  exit = 5;
                  break;
              
            }
          }
          break;
      case 7 : 
          if (typeof ty2 === "number") {
            exit = 8;
          } else {
            switch (ty2.tag | 0) {
              case 7 : 
                  return /* Bool_ty */Block.__(7, [trans(ty1[0], ty2[0])]);
              case 8 : 
                  exit = 6;
                  break;
              case 9 : 
                  exit = 7;
                  break;
              case 10 : 
                  exit = 1;
                  break;
              case 11 : 
                  exit = 2;
                  break;
              case 12 : 
                  exit = 3;
                  break;
              case 13 : 
                  exit = 4;
                  break;
              case 14 : 
                  exit = 5;
                  break;
              
            }
          }
          break;
      case 8 : 
          if (typeof ty2 === "number") {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "camlinternalFormat.ml",
                    802,
                    26
                  ]
                ];
          } else {
            switch (ty2.tag | 0) {
              case 8 : 
                  return /* Format_arg_ty */Block.__(8, [
                            trans(ty1[0], ty2[0]),
                            trans(ty1[1], ty2[1])
                          ]);
              case 10 : 
                  exit = 1;
                  break;
              case 11 : 
                  exit = 2;
                  break;
              case 12 : 
                  exit = 3;
                  break;
              case 13 : 
                  exit = 4;
                  break;
              case 14 : 
                  exit = 5;
                  break;
              default:
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "camlinternalFormat.ml",
                        802,
                        26
                      ]
                    ];
            }
          }
          break;
      case 9 : 
          if (typeof ty2 === "number") {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "camlinternalFormat.ml",
                    812,
                    28
                  ]
                ];
          } else {
            switch (ty2.tag | 0) {
              case 8 : 
                  exit = 6;
                  break;
              case 9 : 
                  var ty = trans(symm(ty1[1]), ty2[0]);
                  var match = fmtty_rel_det(ty);
                  Curry._1(match[1], /* Refl */0);
                  Curry._1(match[3], /* Refl */0);
                  return /* Format_subst_ty */Block.__(9, [
                            ty1[0],
                            ty2[1],
                            trans(ty1[2], ty2[2])
                          ]);
              case 10 : 
                  exit = 1;
                  break;
              case 11 : 
                  exit = 2;
                  break;
              case 12 : 
                  exit = 3;
                  break;
              case 13 : 
                  exit = 4;
                  break;
              case 14 : 
                  exit = 5;
                  break;
              default:
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "camlinternalFormat.ml",
                        812,
                        28
                      ]
                    ];
            }
          }
          break;
      case 10 : 
          if (typeof ty2 === "number") {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "camlinternalFormat.ml",
                    780,
                    21
                  ]
                ];
          } else if (ty2.tag === 10) {
            return /* Alpha_ty */Block.__(10, [trans(ty1[0], ty2[0])]);
          } else {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "camlinternalFormat.ml",
                    780,
                    21
                  ]
                ];
          }
      case 11 : 
          if (typeof ty2 === "number") {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "camlinternalFormat.ml",
                    784,
                    21
                  ]
                ];
          } else {
            switch (ty2.tag | 0) {
              case 10 : 
                  exit = 1;
                  break;
              case 11 : 
                  return /* Theta_ty */Block.__(11, [trans(ty1[0], ty2[0])]);
              default:
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "camlinternalFormat.ml",
                        784,
                        21
                      ]
                    ];
            }
          }
          break;
      case 12 : 
          if (typeof ty2 === "number") {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "camlinternalFormat.ml",
                    788,
                    19
                  ]
                ];
          } else {
            switch (ty2.tag | 0) {
              case 10 : 
                  exit = 1;
                  break;
              case 11 : 
                  exit = 2;
                  break;
              case 12 : 
                  return /* Any_ty */Block.__(12, [trans(ty1[0], ty2[0])]);
              default:
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "camlinternalFormat.ml",
                        788,
                        19
                      ]
                    ];
            }
          }
          break;
      case 13 : 
          if (typeof ty2 === "number") {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "camlinternalFormat.ml",
                    792,
                    22
                  ]
                ];
          } else {
            switch (ty2.tag | 0) {
              case 10 : 
                  exit = 1;
                  break;
              case 11 : 
                  exit = 2;
                  break;
              case 12 : 
                  exit = 3;
                  break;
              case 13 : 
                  return /* Reader_ty */Block.__(13, [trans(ty1[0], ty2[0])]);
              default:
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "camlinternalFormat.ml",
                        792,
                        22
                      ]
                    ];
            }
          }
          break;
      case 14 : 
          if (typeof ty2 === "number") {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "camlinternalFormat.ml",
                    797,
                    30
                  ]
                ];
          } else {
            switch (ty2.tag | 0) {
              case 10 : 
                  exit = 1;
                  break;
              case 11 : 
                  exit = 2;
                  break;
              case 12 : 
                  exit = 3;
                  break;
              case 13 : 
                  exit = 4;
                  break;
              case 14 : 
                  return /* Ignored_reader_ty */Block.__(14, [trans(ty1[0], ty2[0])]);
              default:
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "camlinternalFormat.ml",
                        797,
                        30
                      ]
                    ];
            }
          }
          break;
      
    }
  }
  switch (exit) {
    case 1 : 
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "camlinternalFormat.ml",
                781,
                21
              ]
            ];
    case 2 : 
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "camlinternalFormat.ml",
                785,
                21
              ]
            ];
    case 3 : 
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "camlinternalFormat.ml",
                789,
                19
              ]
            ];
    case 4 : 
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "camlinternalFormat.ml",
                793,
                22
              ]
            ];
    case 5 : 
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "camlinternalFormat.ml",
                798,
                30
              ]
            ];
    case 6 : 
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "camlinternalFormat.ml",
                803,
                26
              ]
            ];
    case 7 : 
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "camlinternalFormat.ml",
                813,
                28
              ]
            ];
    case 8 : 
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "camlinternalFormat.ml",
                817,
                23
              ]
            ];
    
  }
}

function fmtty_of_formatting_gen(formatting_gen) {
  return fmtty_of_fmt(formatting_gen[0][0]);
}

function fmtty_of_fmt(_fmtty) {
  while(true) {
    var fmtty = _fmtty;
    var exit = 0;
    if (typeof fmtty === "number") {
      return /* End_of_fmtty */0;
    } else {
      switch (fmtty.tag | 0) {
        case 2 : 
        case 3 : 
            exit = 1;
            break;
        case 4 : 
            var ty_rest = fmtty_of_fmt(fmtty[3]);
            var prec_ty = fmtty_of_precision_fmtty(fmtty[2], /* Int_ty */Block.__(2, [ty_rest]));
            return fmtty_of_padding_fmtty(fmtty[1], prec_ty);
        case 5 : 
            var ty_rest$1 = fmtty_of_fmt(fmtty[3]);
            var prec_ty$1 = fmtty_of_precision_fmtty(fmtty[2], /* Int32_ty */Block.__(3, [ty_rest$1]));
            return fmtty_of_padding_fmtty(fmtty[1], prec_ty$1);
        case 6 : 
            var ty_rest$2 = fmtty_of_fmt(fmtty[3]);
            var prec_ty$2 = fmtty_of_precision_fmtty(fmtty[2], /* Nativeint_ty */Block.__(4, [ty_rest$2]));
            return fmtty_of_padding_fmtty(fmtty[1], prec_ty$2);
        case 7 : 
            var ty_rest$3 = fmtty_of_fmt(fmtty[3]);
            var prec_ty$3 = fmtty_of_precision_fmtty(fmtty[2], /* Int64_ty */Block.__(5, [ty_rest$3]));
            return fmtty_of_padding_fmtty(fmtty[1], prec_ty$3);
        case 8 : 
            var ty_rest$4 = fmtty_of_fmt(fmtty[3]);
            var prec_ty$4 = fmtty_of_precision_fmtty(fmtty[2], /* Float_ty */Block.__(6, [ty_rest$4]));
            return fmtty_of_padding_fmtty(fmtty[1], prec_ty$4);
        case 9 : 
            return /* Bool_ty */Block.__(7, [fmtty_of_fmt(fmtty[0])]);
        case 10 : 
            _fmtty = fmtty[0];
            continue ;
        case 13 : 
            return /* Format_arg_ty */Block.__(8, [
                      fmtty[1],
                      fmtty_of_fmt(fmtty[2])
                    ]);
        case 14 : 
            var ty = fmtty[1];
            return /* Format_subst_ty */Block.__(9, [
                      ty,
                      ty,
                      fmtty_of_fmt(fmtty[2])
                    ]);
        case 15 : 
            return /* Alpha_ty */Block.__(10, [fmtty_of_fmt(fmtty[0])]);
        case 16 : 
            return /* Theta_ty */Block.__(11, [fmtty_of_fmt(fmtty[0])]);
        case 18 : 
            return CamlinternalFormatBasics.concat_fmtty(fmtty_of_formatting_gen(fmtty[0]), fmtty_of_fmt(fmtty[1]));
        case 19 : 
            return /* Reader_ty */Block.__(13, [fmtty_of_fmt(fmtty[0])]);
        case 20 : 
            return /* String_ty */Block.__(1, [fmtty_of_fmt(fmtty[2])]);
        case 21 : 
            return /* Int_ty */Block.__(2, [fmtty_of_fmt(fmtty[1])]);
        case 0 : 
        case 1 : 
        case 22 : 
            return /* Char_ty */Block.__(0, [fmtty_of_fmt(fmtty[0])]);
        case 23 : 
            var ign = fmtty[0];
            var fmt = fmtty[1];
            if (typeof ign === "number") {
              if (ign === 3) {
                return /* Ignored_reader_ty */Block.__(14, [fmtty_of_fmt(fmt)]);
              } else {
                return fmtty_of_fmt(fmt);
              }
            } else if (ign.tag === 8) {
              return CamlinternalFormatBasics.concat_fmtty(ign[1], fmtty_of_fmt(fmt));
            } else {
              return fmtty_of_fmt(fmt);
            }
        case 24 : 
            return fmtty_of_custom(fmtty[0], fmtty_of_fmt(fmtty[2]));
        default:
          _fmtty = fmtty[1];
          continue ;
      }
    }
    if (exit === 1) {
      return fmtty_of_padding_fmtty(fmtty[0], /* String_ty */Block.__(1, [fmtty_of_fmt(fmtty[1])]));
    }
    
  };
}

function fmtty_of_custom(arity, fmtty) {
  if (arity) {
    return /* Any_ty */Block.__(12, [fmtty_of_custom(arity[0], fmtty)]);
  } else {
    return fmtty;
  }
}

function fmtty_of_padding_fmtty(pad, fmtty) {
  if (typeof pad === "number" || !pad.tag) {
    return fmtty;
  } else {
    return /* Int_ty */Block.__(2, [fmtty]);
  }
}

function fmtty_of_precision_fmtty(prec, fmtty) {
  if (typeof prec === "number" && prec !== 0) {
    return /* Int_ty */Block.__(2, [fmtty]);
  } else {
    return fmtty;
  }
}

var Type_mismatch = Caml_exceptions.create("CamlinternalFormat.Type_mismatch");

function type_padding(pad, fmtty) {
  if (typeof pad === "number") {
    return /* Padding_fmtty_EBB */[
            /* No_padding */0,
            fmtty
          ];
  } else if (pad.tag) {
    if (typeof fmtty === "number") {
      throw Type_mismatch;
    } else if (fmtty.tag === 2) {
      return /* Padding_fmtty_EBB */[
              /* Arg_padding */Block.__(1, [pad[0]]),
              fmtty[0]
            ];
    } else {
      throw Type_mismatch;
    }
  } else {
    return /* Padding_fmtty_EBB */[
            /* Lit_padding */Block.__(0, [
                pad[0],
                pad[1]
              ]),
            fmtty
          ];
  }
}

function type_padprec(pad, prec, fmtty) {
  var match = type_padding(pad, fmtty);
  if (typeof prec === "number") {
    if (prec !== 0) {
      var match$1 = match[1];
      if (typeof match$1 === "number") {
        throw Type_mismatch;
      } else if (match$1.tag === 2) {
        return /* Padprec_fmtty_EBB */[
                match[0],
                /* Arg_precision */1,
                match$1[0]
              ];
      } else {
        throw Type_mismatch;
      }
    } else {
      return /* Padprec_fmtty_EBB */[
              match[0],
              /* No_precision */0,
              match[1]
            ];
    }
  } else {
    return /* Padprec_fmtty_EBB */[
            match[0],
            /* Lit_precision */[prec[0]],
            match[1]
          ];
  }
}

function type_ignored_param_one(ign, fmt, fmtty) {
  var match = type_format_gen(fmt, fmtty);
  return /* Fmt_fmtty_EBB */[
          /* Ignored_param */Block.__(23, [
              ign,
              match[0]
            ]),
          match[1]
        ];
}

function type_format_gen(fmt, fmtty) {
  if (typeof fmt === "number") {
    return /* Fmt_fmtty_EBB */[
            /* End_of_format */0,
            fmtty
          ];
  } else {
    switch (fmt.tag | 0) {
      case 0 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag) {
            throw Type_mismatch;
          } else {
            var match = type_format_gen(fmt[0], fmtty[0]);
            return /* Fmt_fmtty_EBB */[
                    /* Char */Block.__(0, [match[0]]),
                    match[1]
                  ];
          }
      case 1 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag) {
            throw Type_mismatch;
          } else {
            var match$1 = type_format_gen(fmt[0], fmtty[0]);
            return /* Fmt_fmtty_EBB */[
                    /* Caml_char */Block.__(1, [match$1[0]]),
                    match$1[1]
                  ];
          }
      case 2 : 
          var match$2 = type_padding(fmt[0], fmtty);
          var match$3 = match$2[1];
          if (typeof match$3 === "number") {
            throw Type_mismatch;
          } else if (match$3.tag === 1) {
            var match$4 = type_format_gen(fmt[1], match$3[0]);
            return /* Fmt_fmtty_EBB */[
                    /* String */Block.__(2, [
                        match$2[0],
                        match$4[0]
                      ]),
                    match$4[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 3 : 
          var match$5 = type_padding(fmt[0], fmtty);
          var match$6 = match$5[1];
          if (typeof match$6 === "number") {
            throw Type_mismatch;
          } else if (match$6.tag === 1) {
            var match$7 = type_format_gen(fmt[1], match$6[0]);
            return /* Fmt_fmtty_EBB */[
                    /* Caml_string */Block.__(3, [
                        match$5[0],
                        match$7[0]
                      ]),
                    match$7[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 4 : 
          var match$8 = type_padprec(fmt[1], fmt[2], fmtty);
          var match$9 = match$8[2];
          if (typeof match$9 === "number") {
            throw Type_mismatch;
          } else if (match$9.tag === 2) {
            var match$10 = type_format_gen(fmt[3], match$9[0]);
            return /* Fmt_fmtty_EBB */[
                    /* Int */Block.__(4, [
                        fmt[0],
                        match$8[0],
                        match$8[1],
                        match$10[0]
                      ]),
                    match$10[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 5 : 
          var match$11 = type_padprec(fmt[1], fmt[2], fmtty);
          var match$12 = match$11[2];
          if (typeof match$12 === "number") {
            throw Type_mismatch;
          } else if (match$12.tag === 3) {
            var match$13 = type_format_gen(fmt[3], match$12[0]);
            return /* Fmt_fmtty_EBB */[
                    /* Int32 */Block.__(5, [
                        fmt[0],
                        match$11[0],
                        match$11[1],
                        match$13[0]
                      ]),
                    match$13[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 6 : 
          var match$14 = type_padprec(fmt[1], fmt[2], fmtty);
          var match$15 = match$14[2];
          if (typeof match$15 === "number") {
            throw Type_mismatch;
          } else if (match$15.tag === 4) {
            var match$16 = type_format_gen(fmt[3], match$15[0]);
            return /* Fmt_fmtty_EBB */[
                    /* Nativeint */Block.__(6, [
                        fmt[0],
                        match$14[0],
                        match$14[1],
                        match$16[0]
                      ]),
                    match$16[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 7 : 
          var match$17 = type_padprec(fmt[1], fmt[2], fmtty);
          var match$18 = match$17[2];
          if (typeof match$18 === "number") {
            throw Type_mismatch;
          } else if (match$18.tag === 5) {
            var match$19 = type_format_gen(fmt[3], match$18[0]);
            return /* Fmt_fmtty_EBB */[
                    /* Int64 */Block.__(7, [
                        fmt[0],
                        match$17[0],
                        match$17[1],
                        match$19[0]
                      ]),
                    match$19[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 8 : 
          var match$20 = type_padprec(fmt[1], fmt[2], fmtty);
          var match$21 = match$20[2];
          if (typeof match$21 === "number") {
            throw Type_mismatch;
          } else if (match$21.tag === 6) {
            var match$22 = type_format_gen(fmt[3], match$21[0]);
            return /* Fmt_fmtty_EBB */[
                    /* Float */Block.__(8, [
                        fmt[0],
                        match$20[0],
                        match$20[1],
                        match$22[0]
                      ]),
                    match$22[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 9 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 7) {
            var match$23 = type_format_gen(fmt[0], fmtty[0]);
            return /* Fmt_fmtty_EBB */[
                    /* Bool */Block.__(9, [match$23[0]]),
                    match$23[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 10 : 
          var match$24 = type_format_gen(fmt[0], fmtty);
          return /* Fmt_fmtty_EBB */[
                  /* Flush */Block.__(10, [match$24[0]]),
                  match$24[1]
                ];
      case 11 : 
          var match$25 = type_format_gen(fmt[1], fmtty);
          return /* Fmt_fmtty_EBB */[
                  /* String_literal */Block.__(11, [
                      fmt[0],
                      match$25[0]
                    ]),
                  match$25[1]
                ];
      case 12 : 
          var match$26 = type_format_gen(fmt[1], fmtty);
          return /* Fmt_fmtty_EBB */[
                  /* Char_literal */Block.__(12, [
                      fmt[0],
                      match$26[0]
                    ]),
                  match$26[1]
                ];
      case 13 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 8) {
            var sub_fmtty$prime = fmtty[0];
            if (Caml_obj.caml_notequal(/* Fmtty_EBB */[fmt[1]], /* Fmtty_EBB */[sub_fmtty$prime])) {
              throw Type_mismatch;
            }
            var match$27 = type_format_gen(fmt[2], fmtty[1]);
            return /* Fmt_fmtty_EBB */[
                    /* Format_arg */Block.__(13, [
                        fmt[0],
                        sub_fmtty$prime,
                        match$27[0]
                      ]),
                    match$27[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 14 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 9) {
            var sub_fmtty1 = fmtty[0];
            if (Caml_obj.caml_notequal(/* Fmtty_EBB */[CamlinternalFormatBasics.erase_rel(fmt[1])], /* Fmtty_EBB */[CamlinternalFormatBasics.erase_rel(sub_fmtty1)])) {
              throw Type_mismatch;
            }
            var match$28 = type_format_gen(fmt[2], CamlinternalFormatBasics.erase_rel(fmtty[2]));
            return /* Fmt_fmtty_EBB */[
                    /* Format_subst */Block.__(14, [
                        fmt[0],
                        sub_fmtty1,
                        match$28[0]
                      ]),
                    match$28[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 15 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 10) {
            var match$29 = type_format_gen(fmt[0], fmtty[0]);
            return /* Fmt_fmtty_EBB */[
                    /* Alpha */Block.__(15, [match$29[0]]),
                    match$29[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 16 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 11) {
            var match$30 = type_format_gen(fmt[0], fmtty[0]);
            return /* Fmt_fmtty_EBB */[
                    /* Theta */Block.__(16, [match$30[0]]),
                    match$30[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 17 : 
          var match$31 = type_format_gen(fmt[1], fmtty);
          return /* Fmt_fmtty_EBB */[
                  /* Formatting_lit */Block.__(17, [
                      fmt[0],
                      match$31[0]
                    ]),
                  match$31[1]
                ];
      case 18 : 
          var formatting_gen = fmt[0];
          var fmt0 = fmt[1];
          var fmtty0 = fmtty;
          if (formatting_gen.tag) {
            var match$32 = formatting_gen[0];
            var match$33 = type_format_gen(match$32[0], fmtty0);
            var match$34 = type_format_gen(fmt0, match$33[1]);
            return /* Fmt_fmtty_EBB */[
                    /* Formatting_gen */Block.__(18, [
                        /* Open_box */Block.__(1, [/* Format */[
                              match$33[0],
                              match$32[1]
                            ]]),
                        match$34[0]
                      ]),
                    match$34[1]
                  ];
          } else {
            var match$35 = formatting_gen[0];
            var match$36 = type_format_gen(match$35[0], fmtty0);
            var match$37 = type_format_gen(fmt0, match$36[1]);
            return /* Fmt_fmtty_EBB */[
                    /* Formatting_gen */Block.__(18, [
                        /* Open_tag */Block.__(0, [/* Format */[
                              match$36[0],
                              match$35[1]
                            ]]),
                        match$37[0]
                      ]),
                    match$37[1]
                  ];
          }
      case 19 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 13) {
            var match$38 = type_format_gen(fmt[0], fmtty[0]);
            return /* Fmt_fmtty_EBB */[
                    /* Reader */Block.__(19, [match$38[0]]),
                    match$38[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 20 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 1) {
            var match$39 = type_format_gen(fmt[2], fmtty[0]);
            return /* Fmt_fmtty_EBB */[
                    /* Scan_char_set */Block.__(20, [
                        fmt[0],
                        fmt[1],
                        match$39[0]
                      ]),
                    match$39[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 21 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 2) {
            var match$40 = type_format_gen(fmt[1], fmtty[0]);
            return /* Fmt_fmtty_EBB */[
                    /* Scan_get_counter */Block.__(21, [
                        fmt[0],
                        match$40[0]
                      ]),
                    match$40[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 23 : 
          var ign = fmt[0];
          var fmt$1 = fmt[1];
          var fmtty$1 = fmtty;
          if (typeof ign === "number") {
            if (ign === 3) {
              if (typeof fmtty$1 === "number") {
                throw Type_mismatch;
              } else if (fmtty$1.tag === 14) {
                var match$41 = type_format_gen(fmt$1, fmtty$1[0]);
                return /* Fmt_fmtty_EBB */[
                        /* Ignored_param */Block.__(23, [
                            /* Ignored_reader */3,
                            match$41[0]
                          ]),
                        match$41[1]
                      ];
              } else {
                throw Type_mismatch;
              }
            } else {
              return type_ignored_param_one(ign, fmt$1, fmtty$1);
            }
          } else {
            switch (ign.tag | 0) {
              case 7 : 
                  return type_ignored_param_one(/* Ignored_format_arg */Block.__(7, [
                                ign[0],
                                ign[1]
                              ]), fmt$1, fmtty$1);
              case 8 : 
                  var match$42 = type_ignored_format_substitution(ign[1], fmt$1, fmtty$1);
                  var match$43 = match$42[1];
                  return /* Fmt_fmtty_EBB */[
                          /* Ignored_param */Block.__(23, [
                              /* Ignored_format_subst */Block.__(8, [
                                  ign[0],
                                  match$42[0]
                                ]),
                              match$43[0]
                            ]),
                          match$43[1]
                        ];
              default:
                return type_ignored_param_one(ign, fmt$1, fmtty$1);
            }
          }
      case 22 : 
      case 24 : 
          throw Type_mismatch;
      
    }
  }
}

function type_ignored_format_substitution(sub_fmtty, fmt, fmtty) {
  if (typeof sub_fmtty === "number") {
    return /* Fmtty_fmt_EBB */[
            /* End_of_fmtty */0,
            type_format_gen(fmt, fmtty)
          ];
  } else {
    switch (sub_fmtty.tag | 0) {
      case 0 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag) {
            throw Type_mismatch;
          } else {
            var match = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
            return /* Fmtty_fmt_EBB */[
                    /* Char_ty */Block.__(0, [match[0]]),
                    match[1]
                  ];
          }
      case 1 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 1) {
            var match$1 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
            return /* Fmtty_fmt_EBB */[
                    /* String_ty */Block.__(1, [match$1[0]]),
                    match$1[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 2 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 2) {
            var match$2 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
            return /* Fmtty_fmt_EBB */[
                    /* Int_ty */Block.__(2, [match$2[0]]),
                    match$2[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 3 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 3) {
            var match$3 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
            return /* Fmtty_fmt_EBB */[
                    /* Int32_ty */Block.__(3, [match$3[0]]),
                    match$3[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 4 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 4) {
            var match$4 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
            return /* Fmtty_fmt_EBB */[
                    /* Nativeint_ty */Block.__(4, [match$4[0]]),
                    match$4[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 5 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 5) {
            var match$5 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
            return /* Fmtty_fmt_EBB */[
                    /* Int64_ty */Block.__(5, [match$5[0]]),
                    match$5[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 6 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 6) {
            var match$6 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
            return /* Fmtty_fmt_EBB */[
                    /* Float_ty */Block.__(6, [match$6[0]]),
                    match$6[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 7 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 7) {
            var match$7 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
            return /* Fmtty_fmt_EBB */[
                    /* Bool_ty */Block.__(7, [match$7[0]]),
                    match$7[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 8 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 8) {
            var sub2_fmtty$prime = fmtty[0];
            if (Caml_obj.caml_notequal(/* Fmtty_EBB */[sub_fmtty[0]], /* Fmtty_EBB */[sub2_fmtty$prime])) {
              throw Type_mismatch;
            }
            var match$8 = type_ignored_format_substitution(sub_fmtty[1], fmt, fmtty[1]);
            return /* Fmtty_fmt_EBB */[
                    /* Format_arg_ty */Block.__(8, [
                        sub2_fmtty$prime,
                        match$8[0]
                      ]),
                    match$8[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 9 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 9) {
            var sub2_fmtty$prime$1 = fmtty[1];
            var sub1_fmtty$prime = fmtty[0];
            if (Caml_obj.caml_notequal(/* Fmtty_EBB */[CamlinternalFormatBasics.erase_rel(sub_fmtty[0])], /* Fmtty_EBB */[CamlinternalFormatBasics.erase_rel(sub1_fmtty$prime)])) {
              throw Type_mismatch;
            }
            if (Caml_obj.caml_notequal(/* Fmtty_EBB */[CamlinternalFormatBasics.erase_rel(sub_fmtty[1])], /* Fmtty_EBB */[CamlinternalFormatBasics.erase_rel(sub2_fmtty$prime$1)])) {
              throw Type_mismatch;
            }
            var sub_fmtty$prime = trans(symm(sub1_fmtty$prime), sub2_fmtty$prime$1);
            var match$9 = fmtty_rel_det(sub_fmtty$prime);
            Curry._1(match$9[1], /* Refl */0);
            Curry._1(match$9[3], /* Refl */0);
            var match$10 = type_ignored_format_substitution(CamlinternalFormatBasics.erase_rel(sub_fmtty[2]), fmt, fmtty[2]);
            return /* Fmtty_fmt_EBB */[
                    /* Format_subst_ty */Block.__(9, [
                        sub1_fmtty$prime,
                        sub2_fmtty$prime$1,
                        symm(match$10[0])
                      ]),
                    match$10[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 10 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 10) {
            var match$11 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
            return /* Fmtty_fmt_EBB */[
                    /* Alpha_ty */Block.__(10, [match$11[0]]),
                    match$11[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 11 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 11) {
            var match$12 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
            return /* Fmtty_fmt_EBB */[
                    /* Theta_ty */Block.__(11, [match$12[0]]),
                    match$12[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 12 : 
          throw Type_mismatch;
      case 13 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 13) {
            var match$13 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
            return /* Fmtty_fmt_EBB */[
                    /* Reader_ty */Block.__(13, [match$13[0]]),
                    match$13[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 14 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 14) {
            var match$14 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
            return /* Fmtty_fmt_EBB */[
                    /* Ignored_reader_ty */Block.__(14, [match$14[0]]),
                    match$14[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      
    }
  }
}

function type_format(fmt, fmtty) {
  var match = type_format_gen(fmt, fmtty);
  if (typeof match[1] === "number") {
    return match[0];
  } else {
    throw Type_mismatch;
  }
}

function recast(fmt, fmtty) {
  return type_format(fmt, CamlinternalFormatBasics.erase_rel(symm(fmtty)));
}

function fix_padding(padty, width, str) {
  var len = str.length;
  var width$1 = Pervasives.abs(width);
  var padty$1 = width < 0 ? /* Left */0 : padty;
  if (width$1 <= len) {
    return str;
  } else {
    var res = Bytes.make(width$1, padty$1 === /* Zeros */2 ? /* "0" */48 : /* " " */32);
    switch (padty$1) {
      case 0 : 
          $$String.blit(str, 0, res, 0, len);
          break;
      case 1 : 
          $$String.blit(str, 0, res, width$1 - len | 0, len);
          break;
      case 2 : 
          if (len > 0 && (Caml_string.get(str, 0) === /* "+" */43 || Caml_string.get(str, 0) === /* "-" */45 || Caml_string.get(str, 0) === /* " " */32)) {
            res[0] = Caml_string.get(str, 0);
            $$String.blit(str, 1, res, (width$1 - len | 0) + 1 | 0, len - 1 | 0);
          } else if (len > 1 && Caml_string.get(str, 0) === /* "0" */48 && (Caml_string.get(str, 1) === /* "x" */120 || Caml_string.get(str, 1) === /* "X" */88)) {
            res[1] = Caml_string.get(str, 1);
            $$String.blit(str, 2, res, (width$1 - len | 0) + 2 | 0, len - 2 | 0);
          } else {
            $$String.blit(str, 0, res, width$1 - len | 0, len);
          }
          break;
      
    }
    return Caml_bytes.bytes_to_string(res);
  }
}

function fix_int_precision(prec, str) {
  var prec$1 = Pervasives.abs(prec);
  var len = str.length;
  var c = Caml_string.get(str, 0);
  var exit = 0;
  if (c >= 58) {
    if (c >= 71) {
      if (c > 102 || c < 97) {
        return str;
      } else {
        exit = 2;
      }
    } else if (c >= 65) {
      exit = 2;
    } else {
      return str;
    }
  } else if (c !== 32) {
    if (c >= 43) {
      switch (c - 43 | 0) {
        case 0 : 
        case 2 : 
            exit = 1;
            break;
        case 1 : 
        case 3 : 
        case 4 : 
            return str;
        case 5 : 
            if ((prec$1 + 2 | 0) > len && len > 1 && (Caml_string.get(str, 1) === /* "x" */120 || Caml_string.get(str, 1) === /* "X" */88)) {
              var res = Bytes.make(prec$1 + 2 | 0, /* "0" */48);
              res[1] = Caml_string.get(str, 1);
              $$String.blit(str, 2, res, (prec$1 - len | 0) + 4 | 0, len - 2 | 0);
              return Caml_bytes.bytes_to_string(res);
            } else {
              exit = 2;
            }
            break;
        case 6 : 
        case 7 : 
        case 8 : 
        case 9 : 
        case 10 : 
        case 11 : 
        case 12 : 
        case 13 : 
        case 14 : 
            exit = 2;
            break;
        
      }
    } else {
      return str;
    }
  } else {
    exit = 1;
  }
  switch (exit) {
    case 1 : 
        if ((prec$1 + 1 | 0) > len) {
          var res$1 = Bytes.make(prec$1 + 1 | 0, /* "0" */48);
          res$1[0] = c;
          $$String.blit(str, 1, res$1, (prec$1 - len | 0) + 2 | 0, len - 1 | 0);
          return Caml_bytes.bytes_to_string(res$1);
        } else {
          return str;
        }
    case 2 : 
        if (prec$1 > len) {
          var res$2 = Bytes.make(prec$1, /* "0" */48);
          $$String.blit(str, 0, res$2, prec$1 - len | 0, len);
          return Caml_bytes.bytes_to_string(res$2);
        } else {
          return str;
        }
    
  }
}

function string_to_caml_string(str) {
  return $$String.concat($$String.escaped(str), /* :: */[
              "\"",
              /* :: */[
                "\"",
                /* [] */0
              ]
            ]);
}

function format_of_iconv(iconv) {
  switch (iconv) {
    case 0 : 
        return "%d";
    case 1 : 
        return "%+d";
    case 2 : 
        return "% d";
    case 3 : 
        return "%i";
    case 4 : 
        return "%+i";
    case 5 : 
        return "% i";
    case 6 : 
        return "%x";
    case 7 : 
        return "%#x";
    case 8 : 
        return "%X";
    case 9 : 
        return "%#X";
    case 10 : 
        return "%o";
    case 11 : 
        return "%#o";
    case 12 : 
        return "%u";
    
  }
}

function format_of_aconv(iconv, c) {
  var seps;
  switch (iconv) {
    case 0 : 
        seps = /* :: */[
          "%",
          /* :: */[
            "d",
            /* [] */0
          ]
        ];
        break;
    case 1 : 
        seps = /* :: */[
          "%+",
          /* :: */[
            "d",
            /* [] */0
          ]
        ];
        break;
    case 2 : 
        seps = /* :: */[
          "% ",
          /* :: */[
            "d",
            /* [] */0
          ]
        ];
        break;
    case 3 : 
        seps = /* :: */[
          "%",
          /* :: */[
            "i",
            /* [] */0
          ]
        ];
        break;
    case 4 : 
        seps = /* :: */[
          "%+",
          /* :: */[
            "i",
            /* [] */0
          ]
        ];
        break;
    case 5 : 
        seps = /* :: */[
          "% ",
          /* :: */[
            "i",
            /* [] */0
          ]
        ];
        break;
    case 6 : 
        seps = /* :: */[
          "%",
          /* :: */[
            "x",
            /* [] */0
          ]
        ];
        break;
    case 7 : 
        seps = /* :: */[
          "%#",
          /* :: */[
            "x",
            /* [] */0
          ]
        ];
        break;
    case 8 : 
        seps = /* :: */[
          "%",
          /* :: */[
            "X",
            /* [] */0
          ]
        ];
        break;
    case 9 : 
        seps = /* :: */[
          "%#",
          /* :: */[
            "X",
            /* [] */0
          ]
        ];
        break;
    case 10 : 
        seps = /* :: */[
          "%",
          /* :: */[
            "o",
            /* [] */0
          ]
        ];
        break;
    case 11 : 
        seps = /* :: */[
          "%#",
          /* :: */[
            "o",
            /* [] */0
          ]
        ];
        break;
    case 12 : 
        seps = /* :: */[
          "%",
          /* :: */[
            "u",
            /* [] */0
          ]
        ];
        break;
    
  }
  return $$String.concat(Caml_bytes.bytes_to_string(Bytes.make(1, c)), seps);
}

function format_of_fconv(fconv, prec) {
  if (fconv === /* Float_F */15) {
    return "%.12g";
  } else {
    var prec$1 = Pervasives.abs(prec);
    var symb = char_of_fconv(fconv);
    var buf = /* record */[
      /* ind */0,
      /* bytes */Caml_bytes.caml_create_bytes(16)
    ];
    buffer_add_char(buf, /* "%" */37);
    bprint_fconv_flag(buf, fconv);
    buffer_add_char(buf, /* "." */46);
    buffer_add_string(buf, String(prec$1));
    buffer_add_char(buf, symb);
    return buffer_contents(buf);
  }
}

function convert_int(iconv, n) {
  return Caml_format.caml_format_int(format_of_iconv(iconv), n);
}

function convert_int32(iconv, n) {
  return Caml_format.caml_int32_format(format_of_aconv(iconv, /* "l" */108), n);
}

function convert_nativeint(iconv, n) {
  return Caml_format.caml_nativeint_format(format_of_aconv(iconv, /* "n" */110), n);
}

function convert_int64(iconv, n) {
  return Caml_format.caml_int64_format(format_of_aconv(iconv, /* "L" */76), n);
}

function convert_float(fconv, prec, x) {
  var prec$1 = Pervasives.abs(prec);
  var str = Caml_format.caml_format_float(format_of_fconv(fconv, prec$1), x);
  if (fconv !== /* Float_F */15) {
    return str;
  } else {
    var len = str.length;
    var is_valid = function (_i) {
      while(true) {
        var i = _i;
        if (i === len) {
          return false;
        } else {
          var match = Caml_string.get(str, i);
          var switcher = match - 46 | 0;
          if (switcher > 23 || switcher < 0) {
            if (switcher !== 55) {
              _i = i + 1 | 0;
              continue ;
            } else {
              return true;
            }
          } else if (switcher > 22 || switcher < 1) {
            return true;
          } else {
            _i = i + 1 | 0;
            continue ;
          }
        }
      };
    };
    var match = Pervasives.classify_float(x);
    if (match !== 3) {
      if (match >= 4) {
        return "nan";
      } else if (is_valid(0)) {
        return str;
      } else {
        return str + ".";
      }
    } else if (x < 0.0) {
      return "neg_infinity";
    } else {
      return "infinity";
    }
  }
}

function format_caml_char(c) {
  return $$String.concat(Char.escaped(c), /* :: */[
              "'",
              /* :: */[
                "'",
                /* [] */0
              ]
            ]);
}

function string_of_fmtty(fmtty) {
  var buf = /* record */[
    /* ind */0,
    /* bytes */Caml_bytes.caml_create_bytes(16)
  ];
  bprint_fmtty(buf, fmtty);
  return buffer_contents(buf);
}

function make_printf(_k, o, _acc, _fmt) {
  while(true) {
    var fmt = _fmt;
    var acc = _acc;
    var k = _k;
    if (typeof fmt === "number") {
      return Curry._2(k, o, acc);
    } else {
      switch (fmt.tag | 0) {
        case 0 : 
            var rest = fmt[0];
            return (function(k,acc,rest){
            return function (c) {
              var new_acc = /* Acc_data_char */Block.__(5, [
                  acc,
                  c
                ]);
              return make_printf(k, o, new_acc, rest);
            }
            }(k,acc,rest));
        case 1 : 
            var rest$1 = fmt[0];
            return (function(k,acc,rest$1){
            return function (c) {
              var new_acc_001 = format_caml_char(c);
              var new_acc = /* Acc_data_string */Block.__(4, [
                  acc,
                  new_acc_001
                ]);
              return make_printf(k, o, new_acc, rest$1);
            }
            }(k,acc,rest$1));
        case 2 : 
            return make_string_padding(k, o, acc, fmt[1], fmt[0], (function (str) {
                          return str;
                        }));
        case 3 : 
            return make_string_padding(k, o, acc, fmt[1], fmt[0], string_to_caml_string);
        case 4 : 
            return make_int_padding_precision(k, o, acc, fmt[3], fmt[1], fmt[2], convert_int, fmt[0]);
        case 5 : 
            return make_int_padding_precision(k, o, acc, fmt[3], fmt[1], fmt[2], convert_int32, fmt[0]);
        case 6 : 
            return make_int_padding_precision(k, o, acc, fmt[3], fmt[1], fmt[2], convert_nativeint, fmt[0]);
        case 7 : 
            return make_int_padding_precision(k, o, acc, fmt[3], fmt[1], fmt[2], convert_int64, fmt[0]);
        case 8 : 
            var k$1 = k;
            var o$1 = o;
            var acc$1 = acc;
            var fmt$1 = fmt[3];
            var pad = fmt[1];
            var prec = fmt[2];
            var fconv = fmt[0];
            if (typeof pad === "number") {
              if (typeof prec === "number") {
                if (prec !== 0) {
                  return (function(k$1,o$1,acc$1,fmt$1,fconv){
                  return function (p, x) {
                    var str = convert_float(fconv, p, x);
                    return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [
                                  acc$1,
                                  str
                                ]), fmt$1);
                  }
                  }(k$1,o$1,acc$1,fmt$1,fconv));
                } else {
                  return (function(k$1,o$1,acc$1,fmt$1,fconv){
                  return function (x) {
                    var str = convert_float(fconv, 6, x);
                    return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [
                                  acc$1,
                                  str
                                ]), fmt$1);
                  }
                  }(k$1,o$1,acc$1,fmt$1,fconv));
                }
              } else {
                var p = prec[0];
                return (function(k$1,o$1,acc$1,fmt$1,fconv,p){
                return function (x) {
                  var str = convert_float(fconv, p, x);
                  return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [
                                acc$1,
                                str
                              ]), fmt$1);
                }
                }(k$1,o$1,acc$1,fmt$1,fconv,p));
              }
            } else if (pad.tag) {
              var padty = pad[0];
              if (typeof prec === "number") {
                if (prec !== 0) {
                  return (function(k$1,o$1,acc$1,fmt$1,fconv,padty){
                  return function (w, p, x) {
                    var str = fix_padding(padty, w, convert_float(fconv, p, x));
                    return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [
                                  acc$1,
                                  str
                                ]), fmt$1);
                  }
                  }(k$1,o$1,acc$1,fmt$1,fconv,padty));
                } else {
                  return (function(k$1,o$1,acc$1,fmt$1,fconv,padty){
                  return function (w, x) {
                    var str = convert_float(fconv, 6, x);
                    var str$prime = fix_padding(padty, w, str);
                    return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [
                                  acc$1,
                                  str$prime
                                ]), fmt$1);
                  }
                  }(k$1,o$1,acc$1,fmt$1,fconv,padty));
                }
              } else {
                var p$1 = prec[0];
                return (function(k$1,o$1,acc$1,fmt$1,fconv,padty,p$1){
                return function (w, x) {
                  var str = fix_padding(padty, w, convert_float(fconv, p$1, x));
                  return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [
                                acc$1,
                                str
                              ]), fmt$1);
                }
                }(k$1,o$1,acc$1,fmt$1,fconv,padty,p$1));
              }
            } else {
              var w = pad[1];
              var padty$1 = pad[0];
              if (typeof prec === "number") {
                if (prec !== 0) {
                  return (function(k$1,o$1,acc$1,fmt$1,fconv,padty$1,w){
                  return function (p, x) {
                    var str = fix_padding(padty$1, w, convert_float(fconv, p, x));
                    return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [
                                  acc$1,
                                  str
                                ]), fmt$1);
                  }
                  }(k$1,o$1,acc$1,fmt$1,fconv,padty$1,w));
                } else {
                  return (function(k$1,o$1,acc$1,fmt$1,fconv,padty$1,w){
                  return function (x) {
                    var str = convert_float(fconv, 6, x);
                    var str$prime = fix_padding(padty$1, w, str);
                    return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [
                                  acc$1,
                                  str$prime
                                ]), fmt$1);
                  }
                  }(k$1,o$1,acc$1,fmt$1,fconv,padty$1,w));
                }
              } else {
                var p$2 = prec[0];
                return (function(k$1,o$1,acc$1,fmt$1,fconv,padty$1,w,p$2){
                return function (x) {
                  var str = fix_padding(padty$1, w, convert_float(fconv, p$2, x));
                  return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [
                                acc$1,
                                str
                              ]), fmt$1);
                }
                }(k$1,o$1,acc$1,fmt$1,fconv,padty$1,w,p$2));
              }
            }
        case 9 : 
            var rest$2 = fmt[0];
            return (function(k,acc,rest$2){
            return function (b) {
              return make_printf(k, o, /* Acc_data_string */Block.__(4, [
                            acc,
                            b ? "true" : "false"
                          ]), rest$2);
            }
            }(k,acc,rest$2));
        case 10 : 
            _fmt = fmt[0];
            _acc = /* Acc_flush */Block.__(7, [acc]);
            continue ;
        case 11 : 
            _fmt = fmt[1];
            _acc = /* Acc_string_literal */Block.__(2, [
                acc,
                fmt[0]
              ]);
            continue ;
        case 12 : 
            _fmt = fmt[1];
            _acc = /* Acc_char_literal */Block.__(3, [
                acc,
                fmt[0]
              ]);
            continue ;
        case 13 : 
            var rest$3 = fmt[2];
            var ty = string_of_fmtty(fmt[1]);
            return (function(k,acc,rest$3,ty){
            return function (str) {
              return make_printf(k, o, /* Acc_data_string */Block.__(4, [
                            acc,
                            ty
                          ]), rest$3);
            }
            }(k,acc,rest$3,ty));
        case 14 : 
            var rest$4 = fmt[2];
            var fmtty = fmt[1];
            return (function(k,acc,fmtty,rest$4){
            return function (param) {
              return make_printf(k, o, acc, CamlinternalFormatBasics.concat_fmt(recast(param[0], fmtty), rest$4));
            }
            }(k,acc,fmtty,rest$4));
        case 15 : 
            var rest$5 = fmt[0];
            return (function(k,acc,rest$5){
            return function (f, x) {
              return make_printf(k, o, /* Acc_delay */Block.__(6, [
                            acc,
                            (function (o) {
                                return Curry._2(f, o, x);
                              })
                          ]), rest$5);
            }
            }(k,acc,rest$5));
        case 16 : 
            var rest$6 = fmt[0];
            return (function(k,acc,rest$6){
            return function (f) {
              return make_printf(k, o, /* Acc_delay */Block.__(6, [
                            acc,
                            f
                          ]), rest$6);
            }
            }(k,acc,rest$6));
        case 17 : 
            _fmt = fmt[1];
            _acc = /* Acc_formatting_lit */Block.__(0, [
                acc,
                fmt[0]
              ]);
            continue ;
        case 18 : 
            var match = fmt[0];
            if (match.tag) {
              var rest$7 = fmt[1];
              var k$prime = (function(k,acc,rest$7){
              return function k$prime(koc, kacc) {
                return make_printf(k, koc, /* Acc_formatting_gen */Block.__(1, [
                              acc,
                              /* Acc_open_box */Block.__(1, [kacc])
                            ]), rest$7);
              }
              }(k,acc,rest$7));
              _fmt = match[0][0];
              _acc = /* End_of_acc */0;
              _k = k$prime;
              continue ;
            } else {
              var rest$8 = fmt[1];
              var k$prime$1 = (function(k,acc,rest$8){
              return function k$prime$1(koc, kacc) {
                return make_printf(k, koc, /* Acc_formatting_gen */Block.__(1, [
                              acc,
                              /* Acc_open_tag */Block.__(0, [kacc])
                            ]), rest$8);
              }
              }(k,acc,rest$8));
              _fmt = match[0][0];
              _acc = /* End_of_acc */0;
              _k = k$prime$1;
              continue ;
            }
        case 19 : 
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "camlinternalFormat.ml",
                    1449,
                    4
                  ]
                ];
        case 20 : 
            var rest$9 = fmt[2];
            var new_acc = /* Acc_invalid_arg */Block.__(8, [
                acc,
                "Printf: bad conversion %["
              ]);
            return (function(k,rest$9,new_acc){
            return function (param) {
              return make_printf(k, o, new_acc, rest$9);
            }
            }(k,rest$9,new_acc));
        case 21 : 
            var rest$10 = fmt[1];
            return (function(k,acc,rest$10){
            return function (n) {
              var new_acc_001 = Caml_format.caml_format_int("%u", n);
              var new_acc = /* Acc_data_string */Block.__(4, [
                  acc,
                  new_acc_001
                ]);
              return make_printf(k, o, new_acc, rest$10);
            }
            }(k,acc,rest$10));
        case 22 : 
            var rest$11 = fmt[0];
            return (function(k,acc,rest$11){
            return function (c) {
              var new_acc = /* Acc_data_char */Block.__(5, [
                  acc,
                  c
                ]);
              return make_printf(k, o, new_acc, rest$11);
            }
            }(k,acc,rest$11));
        case 23 : 
            var k$2 = k;
            var o$2 = o;
            var acc$2 = acc;
            var ign = fmt[0];
            var fmt$2 = fmt[1];
            if (typeof ign === "number") {
              if (ign === 3) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "camlinternalFormat.ml",
                        1517,
                        39
                      ]
                    ];
              } else {
                return make_invalid_arg(k$2, o$2, acc$2, fmt$2);
              }
            } else if (ign.tag === 8) {
              return make_from_fmtty(k$2, o$2, acc$2, ign[1], fmt$2);
            } else {
              return make_invalid_arg(k$2, o$2, acc$2, fmt$2);
            }
        case 24 : 
            return make_custom(k, o, acc, fmt[2], fmt[0], Curry._1(fmt[1], /* () */0));
        
      }
    }
  };
}

function make_from_fmtty(k, o, acc, fmtty, fmt) {
  if (typeof fmtty === "number") {
    return make_invalid_arg(k, o, acc, fmt);
  } else {
    switch (fmtty.tag | 0) {
      case 0 : 
          var rest = fmtty[0];
          return (function (param) {
              return make_from_fmtty(k, o, acc, rest, fmt);
            });
      case 1 : 
          var rest$1 = fmtty[0];
          return (function (param) {
              return make_from_fmtty(k, o, acc, rest$1, fmt);
            });
      case 2 : 
          var rest$2 = fmtty[0];
          return (function (param) {
              return make_from_fmtty(k, o, acc, rest$2, fmt);
            });
      case 3 : 
          var rest$3 = fmtty[0];
          return (function (param) {
              return make_from_fmtty(k, o, acc, rest$3, fmt);
            });
      case 4 : 
          var rest$4 = fmtty[0];
          return (function (param) {
              return make_from_fmtty(k, o, acc, rest$4, fmt);
            });
      case 5 : 
          var rest$5 = fmtty[0];
          return (function (param) {
              return make_from_fmtty(k, o, acc, rest$5, fmt);
            });
      case 6 : 
          var rest$6 = fmtty[0];
          return (function (param) {
              return make_from_fmtty(k, o, acc, rest$6, fmt);
            });
      case 7 : 
          var rest$7 = fmtty[0];
          return (function (param) {
              return make_from_fmtty(k, o, acc, rest$7, fmt);
            });
      case 8 : 
          var rest$8 = fmtty[1];
          return (function (param) {
              return make_from_fmtty(k, o, acc, rest$8, fmt);
            });
      case 9 : 
          var rest$9 = fmtty[2];
          var ty = trans(symm(fmtty[0]), fmtty[1]);
          return (function (param) {
              return make_from_fmtty(k, o, acc, CamlinternalFormatBasics.concat_fmtty(ty, rest$9), fmt);
            });
      case 10 : 
          var rest$10 = fmtty[0];
          return (function (param, param$1) {
              return make_from_fmtty(k, o, acc, rest$10, fmt);
            });
      case 11 : 
          var rest$11 = fmtty[0];
          return (function (param) {
              return make_from_fmtty(k, o, acc, rest$11, fmt);
            });
      case 12 : 
          var rest$12 = fmtty[0];
          return (function (param) {
              return make_from_fmtty(k, o, acc, rest$12, fmt);
            });
      case 13 : 
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "camlinternalFormat.ml",
                  1540,
                  31
                ]
              ];
      case 14 : 
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "camlinternalFormat.ml",
                  1541,
                  31
                ]
              ];
      
    }
  }
}

function make_invalid_arg(k, o, acc, fmt) {
  return make_printf(k, o, /* Acc_invalid_arg */Block.__(8, [
                acc,
                "Printf: bad conversion %_"
              ]), fmt);
}

function make_string_padding(k, o, acc, fmt, pad, trans) {
  if (typeof pad === "number") {
    return (function (x) {
        var new_acc_001 = Curry._1(trans, x);
        var new_acc = /* Acc_data_string */Block.__(4, [
            acc,
            new_acc_001
          ]);
        return make_printf(k, o, new_acc, fmt);
      });
  } else if (pad.tag) {
    var padty = pad[0];
    return (function (w, x) {
        var new_acc_001 = fix_padding(padty, w, Curry._1(trans, x));
        var new_acc = /* Acc_data_string */Block.__(4, [
            acc,
            new_acc_001
          ]);
        return make_printf(k, o, new_acc, fmt);
      });
  } else {
    var width = pad[1];
    var padty$1 = pad[0];
    return (function (x) {
        var new_acc_001 = fix_padding(padty$1, width, Curry._1(trans, x));
        var new_acc = /* Acc_data_string */Block.__(4, [
            acc,
            new_acc_001
          ]);
        return make_printf(k, o, new_acc, fmt);
      });
  }
}

function make_int_padding_precision(k, o, acc, fmt, pad, prec, trans, iconv) {
  if (typeof pad === "number") {
    if (typeof prec === "number") {
      if (prec !== 0) {
        return (function (p, x) {
            var str = fix_int_precision(p, Curry._2(trans, iconv, x));
            return make_printf(k, o, /* Acc_data_string */Block.__(4, [
                          acc,
                          str
                        ]), fmt);
          });
      } else {
        return (function (x) {
            var str = Curry._2(trans, iconv, x);
            return make_printf(k, o, /* Acc_data_string */Block.__(4, [
                          acc,
                          str
                        ]), fmt);
          });
      }
    } else {
      var p = prec[0];
      return (function (x) {
          var str = fix_int_precision(p, Curry._2(trans, iconv, x));
          return make_printf(k, o, /* Acc_data_string */Block.__(4, [
                        acc,
                        str
                      ]), fmt);
        });
    }
  } else if (pad.tag) {
    var padty = pad[0];
    if (typeof prec === "number") {
      if (prec !== 0) {
        return (function (w, p, x) {
            var str = fix_padding(padty, w, fix_int_precision(p, Curry._2(trans, iconv, x)));
            return make_printf(k, o, /* Acc_data_string */Block.__(4, [
                          acc,
                          str
                        ]), fmt);
          });
      } else {
        return (function (w, x) {
            var str = fix_padding(padty, w, Curry._2(trans, iconv, x));
            return make_printf(k, o, /* Acc_data_string */Block.__(4, [
                          acc,
                          str
                        ]), fmt);
          });
      }
    } else {
      var p$1 = prec[0];
      return (function (w, x) {
          var str = fix_padding(padty, w, fix_int_precision(p$1, Curry._2(trans, iconv, x)));
          return make_printf(k, o, /* Acc_data_string */Block.__(4, [
                        acc,
                        str
                      ]), fmt);
        });
    }
  } else {
    var w = pad[1];
    var padty$1 = pad[0];
    if (typeof prec === "number") {
      if (prec !== 0) {
        return (function (p, x) {
            var str = fix_padding(padty$1, w, fix_int_precision(p, Curry._2(trans, iconv, x)));
            return make_printf(k, o, /* Acc_data_string */Block.__(4, [
                          acc,
                          str
                        ]), fmt);
          });
      } else {
        return (function (x) {
            var str = fix_padding(padty$1, w, Curry._2(trans, iconv, x));
            return make_printf(k, o, /* Acc_data_string */Block.__(4, [
                          acc,
                          str
                        ]), fmt);
          });
      }
    } else {
      var p$2 = prec[0];
      return (function (x) {
          var str = fix_padding(padty$1, w, fix_int_precision(p$2, Curry._2(trans, iconv, x)));
          return make_printf(k, o, /* Acc_data_string */Block.__(4, [
                        acc,
                        str
                      ]), fmt);
        });
    }
  }
}

function make_custom(k, o, acc, rest, arity, f) {
  if (arity) {
    var arity$1 = arity[0];
    return (function (x) {
        return make_custom(k, o, acc, rest, arity$1, Curry._1(f, x));
      });
  } else {
    return make_printf(k, o, /* Acc_data_string */Block.__(4, [
                  acc,
                  f
                ]), rest);
  }
}

function output_acc(o, _acc) {
  while(true) {
    var acc = _acc;
    var exit = 0;
    if (typeof acc === "number") {
      return /* () */0;
    } else {
      switch (acc.tag | 0) {
        case 0 : 
            var s = string_of_formatting_lit(acc[1]);
            output_acc(o, acc[0]);
            return Pervasives.output_string(o, s);
        case 1 : 
            var match = acc[1];
            var p = acc[0];
            output_acc(o, p);
            if (match.tag) {
              Pervasives.output_string(o, "@[");
              _acc = match[0];
              continue ;
            } else {
              Pervasives.output_string(o, "@{");
              _acc = match[0];
              continue ;
            }
        case 2 : 
        case 4 : 
            exit = 1;
            break;
        case 3 : 
        case 5 : 
            exit = 2;
            break;
        case 6 : 
            output_acc(o, acc[0]);
            return Curry._1(acc[1], o);
        case 7 : 
            output_acc(o, acc[0]);
            return Caml_io.caml_ml_flush(o);
        case 8 : 
            output_acc(o, acc[0]);
            throw [
                  Caml_builtin_exceptions.invalid_argument,
                  acc[1]
                ];
        
      }
    }
    switch (exit) {
      case 1 : 
          output_acc(o, acc[0]);
          return Pervasives.output_string(o, acc[1]);
      case 2 : 
          output_acc(o, acc[0]);
          return Caml_io.caml_ml_output_char(o, acc[1]);
      
    }
  };
}

function bufput_acc(b, _acc) {
  while(true) {
    var acc = _acc;
    var exit = 0;
    if (typeof acc === "number") {
      return /* () */0;
    } else {
      switch (acc.tag | 0) {
        case 0 : 
            var s = string_of_formatting_lit(acc[1]);
            bufput_acc(b, acc[0]);
            return $$Buffer.add_string(b, s);
        case 1 : 
            var match = acc[1];
            var p = acc[0];
            bufput_acc(b, p);
            if (match.tag) {
              $$Buffer.add_string(b, "@[");
              _acc = match[0];
              continue ;
            } else {
              $$Buffer.add_string(b, "@{");
              _acc = match[0];
              continue ;
            }
        case 2 : 
        case 4 : 
            exit = 1;
            break;
        case 3 : 
        case 5 : 
            exit = 2;
            break;
        case 6 : 
            bufput_acc(b, acc[0]);
            return Curry._1(acc[1], b);
        case 7 : 
            _acc = acc[0];
            continue ;
        case 8 : 
            bufput_acc(b, acc[0]);
            throw [
                  Caml_builtin_exceptions.invalid_argument,
                  acc[1]
                ];
        
      }
    }
    switch (exit) {
      case 1 : 
          bufput_acc(b, acc[0]);
          return $$Buffer.add_string(b, acc[1]);
      case 2 : 
          bufput_acc(b, acc[0]);
          return $$Buffer.add_char(b, acc[1]);
      
    }
  };
}

function strput_acc(b, _acc) {
  while(true) {
    var acc = _acc;
    var exit = 0;
    if (typeof acc === "number") {
      return /* () */0;
    } else {
      switch (acc.tag | 0) {
        case 0 : 
            var s = string_of_formatting_lit(acc[1]);
            strput_acc(b, acc[0]);
            return $$Buffer.add_string(b, s);
        case 1 : 
            var match = acc[1];
            var p = acc[0];
            strput_acc(b, p);
            if (match.tag) {
              $$Buffer.add_string(b, "@[");
              _acc = match[0];
              continue ;
            } else {
              $$Buffer.add_string(b, "@{");
              _acc = match[0];
              continue ;
            }
        case 2 : 
        case 4 : 
            exit = 1;
            break;
        case 3 : 
        case 5 : 
            exit = 2;
            break;
        case 6 : 
            strput_acc(b, acc[0]);
            return $$Buffer.add_string(b, Curry._1(acc[1], /* () */0));
        case 7 : 
            _acc = acc[0];
            continue ;
        case 8 : 
            strput_acc(b, acc[0]);
            throw [
                  Caml_builtin_exceptions.invalid_argument,
                  acc[1]
                ];
        
      }
    }
    switch (exit) {
      case 1 : 
          strput_acc(b, acc[0]);
          return $$Buffer.add_string(b, acc[1]);
      case 2 : 
          strput_acc(b, acc[0]);
          return $$Buffer.add_char(b, acc[1]);
      
    }
  };
}

function failwith_message(param) {
  var buf = $$Buffer.create(256);
  var k = function (param, acc) {
    strput_acc(buf, acc);
    var s = $$Buffer.contents(buf);
    throw [
          Caml_builtin_exceptions.failure,
          s
        ];
  };
  return make_printf(k, /* () */0, /* End_of_acc */0, param[0]);
}

function open_box_of_string(str) {
  if (str === "") {
    return /* tuple */[
            0,
            /* Pp_box */4
          ];
  } else {
    var len = str.length;
    var invalid_box = function (param) {
      return Curry._1(failwith_message(/* Format */[
                      /* String_literal */Block.__(11, [
                          "invalid box description ",
                          /* Caml_string */Block.__(3, [
                              /* No_padding */0,
                              /* End_of_format */0
                            ])
                        ]),
                      "invalid box description %S"
                    ]), str);
    };
    var parse_spaces = function (_i) {
      while(true) {
        var i = _i;
        if (i === len) {
          return i;
        } else {
          var match = Caml_string.get(str, i);
          if (match !== 9) {
            if (match !== 32) {
              return i;
            } else {
              _i = i + 1 | 0;
              continue ;
            }
          } else {
            _i = i + 1 | 0;
            continue ;
          }
        }
      };
    };
    var parse_lword = function (i, _j) {
      while(true) {
        var j = _j;
        if (j === len) {
          return j;
        } else {
          var match = Caml_string.get(str, j);
          if (match > 122 || match < 97) {
            return j;
          } else {
            _j = j + 1 | 0;
            continue ;
          }
        }
      };
    };
    var parse_int = function (i, _j) {
      while(true) {
        var j = _j;
        if (j === len) {
          return j;
        } else {
          var match = Caml_string.get(str, j);
          if (match >= 48) {
            if (match >= 58) {
              return j;
            } else {
              _j = j + 1 | 0;
              continue ;
            }
          } else if (match !== 45) {
            return j;
          } else {
            _j = j + 1 | 0;
            continue ;
          }
        }
      };
    };
    var wstart = parse_spaces(0);
    var wend = parse_lword(wstart, wstart);
    var box_name = $$String.sub(str, wstart, wend - wstart | 0);
    var nstart = parse_spaces(wend);
    var nend = parse_int(nstart, nstart);
    var indent;
    if (nstart === nend) {
      indent = 0;
    } else {
      try {
        indent = Caml_format.caml_int_of_string($$String.sub(str, nstart, nend - nstart | 0));
      }
      catch (raw_exn){
        var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
        if (exn[0] === Caml_builtin_exceptions.failure) {
          indent = invalid_box(/* () */0);
        } else {
          throw exn;
        }
      }
    }
    var exp_end = parse_spaces(nend);
    if (exp_end !== len) {
      invalid_box(/* () */0);
    }
    var box_type;
    switch (box_name) {
      case "" : 
      case "b" : 
          box_type = /* Pp_box */4;
          break;
      case "h" : 
          box_type = /* Pp_hbox */0;
          break;
      case "hov" : 
          box_type = /* Pp_hovbox */3;
          break;
      case "hv" : 
          box_type = /* Pp_hvbox */2;
          break;
      case "v" : 
          box_type = /* Pp_vbox */1;
          break;
      default:
        box_type = invalid_box(/* () */0);
    }
    return /* tuple */[
            indent,
            box_type
          ];
  }
}

function make_padding_fmt_ebb(pad, fmt) {
  if (typeof pad === "number") {
    return /* Padding_fmt_EBB */[
            /* No_padding */0,
            fmt
          ];
  } else if (pad.tag) {
    return /* Padding_fmt_EBB */[
            /* Arg_padding */Block.__(1, [pad[0]]),
            fmt
          ];
  } else {
    return /* Padding_fmt_EBB */[
            /* Lit_padding */Block.__(0, [
                pad[0],
                pad[1]
              ]),
            fmt
          ];
  }
}

function make_precision_fmt_ebb(prec, fmt) {
  if (typeof prec === "number") {
    if (prec !== 0) {
      return /* Precision_fmt_EBB */[
              /* Arg_precision */1,
              fmt
            ];
    } else {
      return /* Precision_fmt_EBB */[
              /* No_precision */0,
              fmt
            ];
    }
  } else {
    return /* Precision_fmt_EBB */[
            /* Lit_precision */[prec[0]],
            fmt
          ];
  }
}

function make_padprec_fmt_ebb(pad, prec, fmt) {
  var match = make_precision_fmt_ebb(prec, fmt);
  var fmt$prime = match[1];
  var prec$1 = match[0];
  if (typeof pad === "number") {
    return /* Padprec_fmt_EBB */[
            /* No_padding */0,
            prec$1,
            fmt$prime
          ];
  } else if (pad.tag) {
    return /* Padprec_fmt_EBB */[
            /* Arg_padding */Block.__(1, [pad[0]]),
            prec$1,
            fmt$prime
          ];
  } else {
    return /* Padprec_fmt_EBB */[
            /* Lit_padding */Block.__(0, [
                pad[0],
                pad[1]
              ]),
            prec$1,
            fmt$prime
          ];
  }
}

function fmt_ebb_of_string(legacy_behavior, str) {
  var legacy_behavior$1 = legacy_behavior !== undefined ? legacy_behavior : true;
  var invalid_format_message = function (str_ind, msg) {
    return Curry._3(failwith_message(/* Format */[
                    /* String_literal */Block.__(11, [
                        "invalid format ",
                        /* Caml_string */Block.__(3, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                ": at character number ",
                                /* Int */Block.__(4, [
                                    /* Int_d */0,
                                    /* No_padding */0,
                                    /* No_precision */0,
                                    /* String_literal */Block.__(11, [
                                        ", ",
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* End_of_format */0
                                          ])
                                      ])
                                  ])
                              ])
                          ])
                      ]),
                    "invalid format %S: at character number %d, %s"
                  ]), str, str_ind, msg);
  };
  var invalid_format_without = function (str_ind, c, s) {
    return Curry._4(failwith_message(/* Format */[
                    /* String_literal */Block.__(11, [
                        "invalid format ",
                        /* Caml_string */Block.__(3, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                ": at character number ",
                                /* Int */Block.__(4, [
                                    /* Int_d */0,
                                    /* No_padding */0,
                                    /* No_precision */0,
                                    /* String_literal */Block.__(11, [
                                        ", '",
                                        /* Char */Block.__(0, [/* String_literal */Block.__(11, [
                                                "' without ",
                                                /* String */Block.__(2, [
                                                    /* No_padding */0,
                                                    /* End_of_format */0
                                                  ])
                                              ])])
                                      ])
                                  ])
                              ])
                          ])
                      ]),
                    "invalid format %S: at character number %d, '%c' without %s"
                  ]), str, str_ind, c, s);
  };
  var expected_character = function (str_ind, expected, read) {
    return Curry._4(failwith_message(/* Format */[
                    /* String_literal */Block.__(11, [
                        "invalid format ",
                        /* Caml_string */Block.__(3, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                ": at character number ",
                                /* Int */Block.__(4, [
                                    /* Int_d */0,
                                    /* No_padding */0,
                                    /* No_precision */0,
                                    /* String_literal */Block.__(11, [
                                        ", ",
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* String_literal */Block.__(11, [
                                                " expected, read ",
                                                /* Caml_char */Block.__(1, [/* End_of_format */0])
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ])
                      ]),
                    "invalid format %S: at character number %d, %s expected, read %C"
                  ]), str, str_ind, expected, read);
  };
  var compute_int_conv = function (pct_ind, str_ind, _plus, _sharp, _space, symb) {
    while(true) {
      var space = _space;
      var sharp = _sharp;
      var plus = _plus;
      var exit = 0;
      var exit$1 = 0;
      if (plus) {
        if (sharp) {
          exit$1 = 2;
        } else if (space) {
          exit = 1;
        } else if (symb !== 100) {
          if (symb !== 105) {
            exit = 1;
          } else {
            return /* Int_pi */4;
          }
        } else {
          return /* Int_pd */1;
        }
      } else if (sharp) {
        if (space) {
          exit$1 = 2;
        } else if (symb !== 88) {
          if (symb !== 111) {
            if (symb !== 120) {
              exit$1 = 2;
            } else {
              return /* Int_Cx */7;
            }
          } else {
            return /* Int_Co */11;
          }
        } else {
          return /* Int_CX */9;
        }
      } else if (space) {
        if (symb !== 100) {
          if (symb !== 105) {
            exit = 1;
          } else {
            return /* Int_si */5;
          }
        } else {
          return /* Int_sd */2;
        }
      } else {
        switch (symb) {
          case 88 : 
              return /* Int_X */8;
          case 100 : 
              return /* Int_d */0;
          case 105 : 
              return /* Int_i */3;
          case 111 : 
              return /* Int_o */10;
          case 117 : 
              return /* Int_u */12;
          case 89 : 
          case 90 : 
          case 91 : 
          case 92 : 
          case 93 : 
          case 94 : 
          case 95 : 
          case 96 : 
          case 97 : 
          case 98 : 
          case 99 : 
          case 101 : 
          case 102 : 
          case 103 : 
          case 104 : 
          case 106 : 
          case 107 : 
          case 108 : 
          case 109 : 
          case 110 : 
          case 112 : 
          case 113 : 
          case 114 : 
          case 115 : 
          case 116 : 
          case 118 : 
          case 119 : 
              exit = 1;
              break;
          case 120 : 
              return /* Int_x */6;
          default:
            exit = 1;
        }
      }
      if (exit$1 === 2) {
        var exit$2 = 0;
        switch (symb) {
          case 88 : 
              if (legacy_behavior$1) {
                return /* Int_CX */9;
              } else {
                exit = 1;
              }
              break;
          case 111 : 
              if (legacy_behavior$1) {
                return /* Int_Co */11;
              } else {
                exit = 1;
              }
              break;
          case 100 : 
          case 105 : 
          case 117 : 
              exit$2 = 3;
              break;
          case 89 : 
          case 90 : 
          case 91 : 
          case 92 : 
          case 93 : 
          case 94 : 
          case 95 : 
          case 96 : 
          case 97 : 
          case 98 : 
          case 99 : 
          case 101 : 
          case 102 : 
          case 103 : 
          case 104 : 
          case 106 : 
          case 107 : 
          case 108 : 
          case 109 : 
          case 110 : 
          case 112 : 
          case 113 : 
          case 114 : 
          case 115 : 
          case 116 : 
          case 118 : 
          case 119 : 
              exit = 1;
              break;
          case 120 : 
              if (legacy_behavior$1) {
                return /* Int_Cx */7;
              } else {
                exit = 1;
              }
              break;
          default:
            exit = 1;
        }
        if (exit$2 === 3) {
          if (legacy_behavior$1) {
            _sharp = false;
            continue ;
          } else {
            return incompatible_flag(pct_ind, str_ind, symb, "'#'");
          }
        }
        
      }
      if (exit === 1) {
        if (plus) {
          if (space) {
            if (legacy_behavior$1) {
              _space = false;
              continue ;
            } else {
              return incompatible_flag(pct_ind, str_ind, /* " " */32, "'+'");
            }
          } else if (legacy_behavior$1) {
            _plus = false;
            continue ;
          } else {
            return incompatible_flag(pct_ind, str_ind, symb, "'+'");
          }
        } else if (space) {
          if (legacy_behavior$1) {
            _space = false;
            continue ;
          } else {
            return incompatible_flag(pct_ind, str_ind, symb, "' '");
          }
        } else {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "camlinternalFormat.ml",
                  2719,
                  28
                ]
              ];
        }
      }
      
    };
  };
  var incompatible_flag = function (pct_ind, str_ind, symb, option) {
    var subfmt = $$String.sub(str, pct_ind, str_ind - pct_ind | 0);
    return Curry._5(failwith_message(/* Format */[
                    /* String_literal */Block.__(11, [
                        "invalid format ",
                        /* Caml_string */Block.__(3, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                ": at character number ",
                                /* Int */Block.__(4, [
                                    /* Int_d */0,
                                    /* No_padding */0,
                                    /* No_precision */0,
                                    /* String_literal */Block.__(11, [
                                        ", ",
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* String_literal */Block.__(11, [
                                                " is incompatible with '",
                                                /* Char */Block.__(0, [/* String_literal */Block.__(11, [
                                                        "' in sub-format ",
                                                        /* Caml_string */Block.__(3, [
                                                            /* No_padding */0,
                                                            /* End_of_format */0
                                                          ])
                                                      ])])
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ])
                      ]),
                    "invalid format %S: at character number %d, %s is incompatible with '%c' in sub-format %S"
                  ]), str, pct_ind, option, symb, subfmt);
  };
  var parse_positive = function (_str_ind, end_ind, _acc) {
    while(true) {
      var acc = _acc;
      var str_ind = _str_ind;
      if (str_ind === end_ind) {
        invalid_format_message(end_ind, "unexpected end of format");
      }
      var c = Caml_string.get(str, str_ind);
      if (c > 57 || c < 48) {
        return /* tuple */[
                str_ind,
                acc
              ];
      } else {
        var new_acc = Caml_int32.imul(acc, 10) + (c - /* "0" */48 | 0) | 0;
        _acc = new_acc;
        _str_ind = str_ind + 1 | 0;
        continue ;
      }
    };
  };
  var parse_after_precision = function (pct_ind, str_ind, end_ind, minus, plus, sharp, space, ign, pad, prec) {
    if (str_ind === end_ind) {
      invalid_format_message(end_ind, "unexpected end of format");
    }
    var parse_conv = function (padprec) {
      return parse_conversion(pct_ind, str_ind + 1 | 0, end_ind, plus, sharp, space, ign, pad, prec, padprec, Caml_string.get(str, str_ind));
    };
    if (typeof pad === "number") {
      var exit = 0;
      if (typeof prec === "number" && prec === 0) {
        return parse_conv(/* No_padding */0);
      } else {
        exit = 1;
      }
      if (exit === 1) {
        if (minus) {
          if (typeof prec === "number") {
            return parse_conv(/* Arg_padding */Block.__(1, [/* Left */0]));
          } else {
            return parse_conv(/* Lit_padding */Block.__(0, [
                          /* Left */0,
                          prec[0]
                        ]));
          }
        } else if (typeof prec === "number") {
          return parse_conv(/* Arg_padding */Block.__(1, [/* Right */1]));
        } else {
          return parse_conv(/* Lit_padding */Block.__(0, [
                        /* Right */1,
                        prec[0]
                      ]));
        }
      }
      
    } else {
      return parse_conv(pad);
    }
  };
  var parse_after_padding = function (pct_ind, str_ind, end_ind, minus, plus, sharp, space, ign, pad) {
    if (str_ind === end_ind) {
      invalid_format_message(end_ind, "unexpected end of format");
    }
    var symb = Caml_string.get(str, str_ind);
    if (symb !== 46) {
      return parse_conversion(pct_ind, str_ind + 1 | 0, end_ind, plus, sharp, space, ign, pad, /* No_precision */0, pad, symb);
    } else {
      var pct_ind$1 = pct_ind;
      var str_ind$1 = str_ind + 1 | 0;
      var end_ind$1 = end_ind;
      var minus$1 = minus;
      var plus$1 = plus;
      var sharp$1 = sharp;
      var space$1 = space;
      var ign$1 = ign;
      var pad$1 = pad;
      if (str_ind$1 === end_ind$1) {
        invalid_format_message(end_ind$1, "unexpected end of format");
      }
      var parse_literal = function (minus, str_ind) {
        var match = parse_positive(str_ind, end_ind$1, 0);
        return parse_after_precision(pct_ind$1, match[0], end_ind$1, minus, plus$1, sharp$1, space$1, ign$1, pad$1, /* Lit_precision */[match[1]]);
      };
      var symb$1 = Caml_string.get(str, str_ind$1);
      var exit = 0;
      var exit$1 = 0;
      if (symb$1 >= 48) {
        if (symb$1 >= 58) {
          exit = 1;
        } else {
          return parse_literal(minus$1, str_ind$1);
        }
      } else if (symb$1 >= 42) {
        switch (symb$1 - 42 | 0) {
          case 0 : 
              return parse_after_precision(pct_ind$1, str_ind$1 + 1 | 0, end_ind$1, minus$1, plus$1, sharp$1, space$1, ign$1, pad$1, /* Arg_precision */1);
          case 1 : 
          case 3 : 
              exit$1 = 2;
              break;
          case 2 : 
          case 4 : 
          case 5 : 
              exit = 1;
              break;
          
        }
      } else {
        exit = 1;
      }
      if (exit$1 === 2) {
        if (legacy_behavior$1) {
          return parse_literal(minus$1 || symb$1 === /* "-" */45, str_ind$1 + 1 | 0);
        } else {
          exit = 1;
        }
      }
      if (exit === 1) {
        if (legacy_behavior$1) {
          return parse_after_precision(pct_ind$1, str_ind$1, end_ind$1, minus$1, plus$1, sharp$1, space$1, ign$1, pad$1, /* Lit_precision */[0]);
        } else {
          return invalid_format_without(str_ind$1 - 1 | 0, /* "." */46, "precision");
        }
      }
      
    }
  };
  var parse_literal = function (lit_start, _str_ind, end_ind) {
    while(true) {
      var str_ind = _str_ind;
      if (str_ind === end_ind) {
        return add_literal(lit_start, str_ind, /* End_of_format */0);
      } else {
        var match = Caml_string.get(str, str_ind);
        if (match !== 37) {
          if (match !== 64) {
            _str_ind = str_ind + 1 | 0;
            continue ;
          } else {
            var match$1 = parse_after_at(str_ind + 1 | 0, end_ind);
            return add_literal(lit_start, str_ind, match$1[0]);
          }
        } else {
          var match$2 = parse_format(str_ind, end_ind);
          return add_literal(lit_start, str_ind, match$2[0]);
        }
      }
    };
  };
  var parse_format = function (pct_ind, end_ind) {
    var pct_ind$1 = pct_ind;
    var str_ind = pct_ind + 1 | 0;
    var end_ind$1 = end_ind;
    if (str_ind === end_ind$1) {
      invalid_format_message(end_ind$1, "unexpected end of format");
    }
    var match = Caml_string.get(str, str_ind);
    if (match !== 95) {
      return parse_flags(pct_ind$1, str_ind, end_ind$1, false);
    } else {
      return parse_flags(pct_ind$1, str_ind + 1 | 0, end_ind$1, true);
    }
  };
  var parse_after_at = function (str_ind, end_ind) {
    if (str_ind === end_ind) {
      return /* Fmt_EBB */[/* Char_literal */Block.__(12, [
                  /* "@" */64,
                  /* End_of_format */0
                ])];
    } else {
      var c = Caml_string.get(str, str_ind);
      var exit = 0;
      if (c >= 65) {
        if (c >= 94) {
          switch (c) {
            case 123 : 
                return parse_tag(true, str_ind + 1 | 0, end_ind);
            case 124 : 
                exit = 1;
                break;
            case 125 : 
                var beg_ind = str_ind + 1 | 0;
                var match = parse_literal(beg_ind, beg_ind, end_ind);
                return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [
                            /* Close_tag */1,
                            match[0]
                          ])];
            default:
              exit = 1;
          }
        } else if (c >= 91) {
          switch (c - 91 | 0) {
            case 0 : 
                return parse_tag(false, str_ind + 1 | 0, end_ind);
            case 1 : 
                exit = 1;
                break;
            case 2 : 
                var beg_ind$1 = str_ind + 1 | 0;
                var match$1 = parse_literal(beg_ind$1, beg_ind$1, end_ind);
                return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [
                            /* Close_box */0,
                            match$1[0]
                          ])];
            
          }
        } else {
          exit = 1;
        }
      } else if (c !== 10) {
        if (c >= 32) {
          switch (c - 32 | 0) {
            case 0 : 
                var beg_ind$2 = str_ind + 1 | 0;
                var match$2 = parse_literal(beg_ind$2, beg_ind$2, end_ind);
                return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [
                            /* Break */Block.__(0, [
                                "@ ",
                                1,
                                0
                              ]),
                            match$2[0]
                          ])];
            case 5 : 
                if ((str_ind + 1 | 0) < end_ind && Caml_string.get(str, str_ind + 1 | 0) === /* "%" */37) {
                  var beg_ind$3 = str_ind + 2 | 0;
                  var match$3 = parse_literal(beg_ind$3, beg_ind$3, end_ind);
                  return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [
                              /* Escaped_percent */6,
                              match$3[0]
                            ])];
                } else {
                  var match$4 = parse_literal(str_ind, str_ind, end_ind);
                  return /* Fmt_EBB */[/* Char_literal */Block.__(12, [
                              /* "@" */64,
                              match$4[0]
                            ])];
                }
            case 12 : 
                var beg_ind$4 = str_ind + 1 | 0;
                var match$5 = parse_literal(beg_ind$4, beg_ind$4, end_ind);
                return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [
                            /* Break */Block.__(0, [
                                "@,",
                                0,
                                0
                              ]),
                            match$5[0]
                          ])];
            case 14 : 
                var beg_ind$5 = str_ind + 1 | 0;
                var match$6 = parse_literal(beg_ind$5, beg_ind$5, end_ind);
                return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [
                            /* Flush_newline */4,
                            match$6[0]
                          ])];
            case 27 : 
                var str_ind$1 = str_ind + 1 | 0;
                var end_ind$1 = end_ind;
                var match$7;
                try {
                  if (str_ind$1 === end_ind$1 || Caml_string.get(str, str_ind$1) !== /* "<" */60) {
                    throw Caml_builtin_exceptions.not_found;
                  }
                  var str_ind_1 = parse_spaces(str_ind$1 + 1 | 0, end_ind$1);
                  var match$8 = Caml_string.get(str, str_ind_1);
                  var exit$1 = 0;
                  if (match$8 >= 48) {
                    if (match$8 >= 58) {
                      throw Caml_builtin_exceptions.not_found;
                    } else {
                      exit$1 = 1;
                    }
                  } else if (match$8 !== 45) {
                    throw Caml_builtin_exceptions.not_found;
                  } else {
                    exit$1 = 1;
                  }
                  if (exit$1 === 1) {
                    var match$9 = parse_integer(str_ind_1, end_ind$1);
                    var width = match$9[1];
                    var str_ind_3 = parse_spaces(match$9[0], end_ind$1);
                    var match$10 = Caml_string.get(str, str_ind_3);
                    var switcher = match$10 - 45 | 0;
                    if (switcher > 12 || switcher < 0) {
                      if (switcher !== 17) {
                        throw Caml_builtin_exceptions.not_found;
                      } else {
                        var s = $$String.sub(str, str_ind$1 - 2 | 0, (str_ind_3 - str_ind$1 | 0) + 3 | 0);
                        match$7 = /* tuple */[
                          str_ind_3 + 1 | 0,
                          /* Break */Block.__(0, [
                              s,
                              width,
                              0
                            ])
                        ];
                      }
                    } else if (switcher === 2 || switcher === 1) {
                      throw Caml_builtin_exceptions.not_found;
                    } else {
                      var match$11 = parse_integer(str_ind_3, end_ind$1);
                      var str_ind_5 = parse_spaces(match$11[0], end_ind$1);
                      if (Caml_string.get(str, str_ind_5) !== /* ">" */62) {
                        throw Caml_builtin_exceptions.not_found;
                      }
                      var s$1 = $$String.sub(str, str_ind$1 - 2 | 0, (str_ind_5 - str_ind$1 | 0) + 3 | 0);
                      match$7 = /* tuple */[
                        str_ind_5 + 1 | 0,
                        /* Break */Block.__(0, [
                            s$1,
                            width,
                            match$11[1]
                          ])
                      ];
                    }
                  }
                  
                }
                catch (raw_exn){
                  var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                  if (exn === Caml_builtin_exceptions.not_found || exn[0] === Caml_builtin_exceptions.failure) {
                    match$7 = /* tuple */[
                      str_ind$1,
                      /* Break */Block.__(0, [
                          "@;",
                          1,
                          0
                        ])
                    ];
                  } else {
                    throw exn;
                  }
                }
                var next_ind = match$7[0];
                var match$12 = parse_literal(next_ind, next_ind, end_ind$1);
                return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [
                            match$7[1],
                            match$12[0]
                          ])];
            case 28 : 
                var str_ind$2 = str_ind + 1 | 0;
                var end_ind$2 = end_ind;
                var match$13;
                try {
                  var str_ind_1$1 = parse_spaces(str_ind$2, end_ind$2);
                  var match$14 = Caml_string.get(str, str_ind_1$1);
                  var exit$2 = 0;
                  if (match$14 >= 48) {
                    if (match$14 >= 58) {
                      match$13 = undefined;
                    } else {
                      exit$2 = 1;
                    }
                  } else if (match$14 !== 45) {
                    match$13 = undefined;
                  } else {
                    exit$2 = 1;
                  }
                  if (exit$2 === 1) {
                    var match$15 = parse_integer(str_ind_1$1, end_ind$2);
                    var str_ind_3$1 = parse_spaces(match$15[0], end_ind$2);
                    if (Caml_string.get(str, str_ind_3$1) !== /* ">" */62) {
                      throw Caml_builtin_exceptions.not_found;
                    }
                    var s$2 = $$String.sub(str, str_ind$2 - 2 | 0, (str_ind_3$1 - str_ind$2 | 0) + 3 | 0);
                    match$13 = /* tuple */[
                      str_ind_3$1 + 1 | 0,
                      /* Magic_size */Block.__(1, [
                          s$2,
                          match$15[1]
                        ])
                    ];
                  }
                  
                }
                catch (raw_exn$1){
                  var exn$1 = Caml_js_exceptions.internalToOCamlException(raw_exn$1);
                  if (exn$1 === Caml_builtin_exceptions.not_found || exn$1[0] === Caml_builtin_exceptions.failure) {
                    match$13 = undefined;
                  } else {
                    throw exn$1;
                  }
                }
                if (match$13 !== undefined) {
                  var match$16 = match$13;
                  var next_ind$1 = match$16[0];
                  var match$17 = parse_literal(next_ind$1, next_ind$1, end_ind$2);
                  return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [
                              match$16[1],
                              match$17[0]
                            ])];
                } else {
                  var match$18 = parse_literal(str_ind$2, str_ind$2, end_ind$2);
                  return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [
                              /* Scan_indic */Block.__(2, [/* "<" */60]),
                              match$18[0]
                            ])];
                }
            case 1 : 
            case 2 : 
            case 3 : 
            case 4 : 
            case 6 : 
            case 7 : 
            case 8 : 
            case 9 : 
            case 10 : 
            case 11 : 
            case 13 : 
            case 15 : 
            case 16 : 
            case 17 : 
            case 18 : 
            case 19 : 
            case 20 : 
            case 21 : 
            case 22 : 
            case 23 : 
            case 24 : 
            case 25 : 
            case 26 : 
            case 29 : 
            case 30 : 
                exit = 1;
                break;
            case 31 : 
                var beg_ind$6 = str_ind + 1 | 0;
                var match$19 = parse_literal(beg_ind$6, beg_ind$6, end_ind);
                return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [
                            /* FFlush */2,
                            match$19[0]
                          ])];
            case 32 : 
                var beg_ind$7 = str_ind + 1 | 0;
                var match$20 = parse_literal(beg_ind$7, beg_ind$7, end_ind);
                return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [
                            /* Escaped_at */5,
                            match$20[0]
                          ])];
            
          }
        } else {
          exit = 1;
        }
      } else {
        var beg_ind$8 = str_ind + 1 | 0;
        var match$21 = parse_literal(beg_ind$8, beg_ind$8, end_ind);
        return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [
                    /* Force_newline */3,
                    match$21[0]
                  ])];
      }
      if (exit === 1) {
        var beg_ind$9 = str_ind + 1 | 0;
        var match$22 = parse_literal(beg_ind$9, beg_ind$9, end_ind);
        return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [
                    /* Scan_indic */Block.__(2, [c]),
                    match$22[0]
                  ])];
      }
      
    }
  };
  var add_literal = function (lit_start, str_ind, fmt) {
    var size = str_ind - lit_start | 0;
    if (size !== 0) {
      if (size !== 1) {
        return /* Fmt_EBB */[/* String_literal */Block.__(11, [
                    $$String.sub(str, lit_start, size),
                    fmt
                  ])];
      } else {
        return /* Fmt_EBB */[/* Char_literal */Block.__(12, [
                    Caml_string.get(str, lit_start),
                    fmt
                  ])];
      }
    } else {
      return /* Fmt_EBB */[fmt];
    }
  };
  var parse_spaces = function (_str_ind, end_ind) {
    while(true) {
      var str_ind = _str_ind;
      if (str_ind === end_ind) {
        invalid_format_message(end_ind, "unexpected end of format");
      }
      if (Caml_string.get(str, str_ind) === /* " " */32) {
        _str_ind = str_ind + 1 | 0;
        continue ;
      } else {
        return str_ind;
      }
    };
  };
  var parse_integer = function (str_ind, end_ind) {
    if (str_ind === end_ind) {
      invalid_format_message(end_ind, "unexpected end of format");
    }
    var match = Caml_string.get(str, str_ind);
    if (match >= 48) {
      if (match >= 58) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "camlinternalFormat.ml",
                2624,
                11
              ]
            ];
      } else {
        return parse_positive(str_ind, end_ind, 0);
      }
    } else if (match !== 45) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "camlinternalFormat.ml",
              2624,
              11
            ]
          ];
    } else {
      if ((str_ind + 1 | 0) === end_ind) {
        invalid_format_message(end_ind, "unexpected end of format");
      }
      var c = Caml_string.get(str, str_ind + 1 | 0);
      if (c > 57 || c < 48) {
        return expected_character(str_ind + 1 | 0, "digit", c);
      } else {
        var match$1 = parse_positive(str_ind + 1 | 0, end_ind, 0);
        return /* tuple */[
                match$1[0],
                -match$1[1] | 0
              ];
      }
    }
  };
  var compute_float_conv = function (pct_ind, str_ind, _plus, _space, symb) {
    while(true) {
      var space = _space;
      var plus = _plus;
      if (plus) {
        if (space) {
          if (legacy_behavior$1) {
            _space = false;
            continue ;
          } else {
            return incompatible_flag(pct_ind, str_ind, /* " " */32, "'+'");
          }
        } else {
          var exit = 0;
          if (symb >= 72) {
            switch (symb) {
              case 101 : 
                  return /* Float_pe */4;
              case 102 : 
                  return /* Float_pf */1;
              case 103 : 
                  return /* Float_pg */10;
              default:
                exit = 1;
            }
          } else if (symb >= 69) {
            switch (symb - 69 | 0) {
              case 0 : 
                  return /* Float_pE */7;
              case 1 : 
                  exit = 1;
                  break;
              case 2 : 
                  return /* Float_pG */13;
              
            }
          } else {
            exit = 1;
          }
          if (exit === 1) {
            if (legacy_behavior$1) {
              _plus = false;
              continue ;
            } else {
              return incompatible_flag(pct_ind, str_ind, symb, "'+'");
            }
          }
          
        }
      } else if (space) {
        var exit$1 = 0;
        if (symb >= 72) {
          switch (symb) {
            case 101 : 
                return /* Float_se */5;
            case 102 : 
                return /* Float_sf */2;
            case 103 : 
                return /* Float_sg */11;
            default:
              exit$1 = 1;
          }
        } else if (symb >= 69) {
          switch (symb - 69 | 0) {
            case 0 : 
                return /* Float_sE */8;
            case 1 : 
                exit$1 = 1;
                break;
            case 2 : 
                return /* Float_sG */14;
            
          }
        } else {
          exit$1 = 1;
        }
        if (exit$1 === 1) {
          if (legacy_behavior$1) {
            _space = false;
            continue ;
          } else {
            return incompatible_flag(pct_ind, str_ind, symb, "' '");
          }
        }
        
      } else if (symb >= 72) {
        switch (symb) {
          case 101 : 
              return /* Float_e */3;
          case 102 : 
              return /* Float_f */0;
          case 103 : 
              return /* Float_g */9;
          default:
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "camlinternalFormat.ml",
                    2747,
                    25
                  ]
                ];
        }
      } else if (symb >= 69) {
        switch (symb - 69 | 0) {
          case 0 : 
              return /* Float_E */6;
          case 1 : 
              return /* Float_F */15;
          case 2 : 
              return /* Float_G */12;
          
        }
      } else {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "camlinternalFormat.ml",
                2747,
                25
              ]
            ];
      }
    };
  };
  var search_subformat_end = function (_str_ind, end_ind, c) {
    while(true) {
      var str_ind = _str_ind;
      if (str_ind === end_ind) {
        Curry._3(failwith_message(/* Format */[
                  /* String_literal */Block.__(11, [
                      "invalid format ",
                      /* Caml_string */Block.__(3, [
                          /* No_padding */0,
                          /* String_literal */Block.__(11, [
                              ": unclosed sub-format, expected \"",
                              /* Char_literal */Block.__(12, [
                                  /* "%" */37,
                                  /* Char */Block.__(0, [/* String_literal */Block.__(11, [
                                          "\" at character number ",
                                          /* Int */Block.__(4, [
                                              /* Int_d */0,
                                              /* No_padding */0,
                                              /* No_precision */0,
                                              /* End_of_format */0
                                            ])
                                        ])])
                                ])
                            ])
                        ])
                    ]),
                  "invalid format %S: unclosed sub-format, expected \"%%%c\" at character number %d"
                ]), str, c, end_ind);
      }
      var match = Caml_string.get(str, str_ind);
      if (match !== 37) {
        _str_ind = str_ind + 1 | 0;
        continue ;
      } else {
        if ((str_ind + 1 | 0) === end_ind) {
          invalid_format_message(end_ind, "unexpected end of format");
        }
        if (Caml_string.get(str, str_ind + 1 | 0) === c) {
          return str_ind;
        } else {
          var match$1 = Caml_string.get(str, str_ind + 1 | 0);
          var exit = 0;
          if (match$1 >= 95) {
            if (match$1 >= 123) {
              if (match$1 >= 126) {
                exit = 1;
              } else {
                switch (match$1 - 123 | 0) {
                  case 0 : 
                      var sub_end = search_subformat_end(str_ind + 2 | 0, end_ind, /* "}" */125);
                      _str_ind = sub_end + 2 | 0;
                      continue ;
                  case 1 : 
                      exit = 1;
                      break;
                  case 2 : 
                      return expected_character(str_ind + 1 | 0, "character ')'", /* "}" */125);
                  
                }
              }
            } else if (match$1 >= 96) {
              exit = 1;
            } else {
              if ((str_ind + 2 | 0) === end_ind) {
                invalid_format_message(end_ind, "unexpected end of format");
              }
              var match$2 = Caml_string.get(str, str_ind + 2 | 0);
              if (match$2 !== 40) {
                if (match$2 !== 123) {
                  _str_ind = str_ind + 3 | 0;
                  continue ;
                } else {
                  var sub_end$1 = search_subformat_end(str_ind + 3 | 0, end_ind, /* "}" */125);
                  _str_ind = sub_end$1 + 2 | 0;
                  continue ;
                }
              } else {
                var sub_end$2 = search_subformat_end(str_ind + 3 | 0, end_ind, /* ")" */41);
                _str_ind = sub_end$2 + 2 | 0;
                continue ;
              }
            }
          } else if (match$1 !== 40) {
            if (match$1 !== 41) {
              exit = 1;
            } else {
              return expected_character(str_ind + 1 | 0, "character '}'", /* ")" */41);
            }
          } else {
            var sub_end$3 = search_subformat_end(str_ind + 2 | 0, end_ind, /* ")" */41);
            _str_ind = sub_end$3 + 2 | 0;
            continue ;
          }
          if (exit === 1) {
            _str_ind = str_ind + 2 | 0;
            continue ;
          }
          
        }
      }
    };
  };
  var parse_conversion = function (pct_ind, str_ind, end_ind, plus, sharp, space, ign, pad, prec, padprec, symb) {
    var plus_used = false;
    var sharp_used = false;
    var space_used = false;
    var ign_used = /* record */[/* contents */false];
    var pad_used = false;
    var prec_used = /* record */[/* contents */false];
    var check_no_0 = function (symb, pad) {
      if (typeof pad === "number") {
        return pad;
      } else if (pad.tag) {
        if (pad[0] >= 2) {
          if (legacy_behavior$1) {
            return /* Arg_padding */Block.__(1, [/* Right */1]);
          } else {
            return incompatible_flag(pct_ind, str_ind, symb, "0");
          }
        } else {
          return pad;
        }
      } else if (pad[0] >= 2) {
        if (legacy_behavior$1) {
          return /* Lit_padding */Block.__(0, [
                    /* Right */1,
                    pad[1]
                  ]);
        } else {
          return incompatible_flag(pct_ind, str_ind, symb, "0");
        }
      } else {
        return pad;
      }
    };
    var opt_of_pad = function (c, pad) {
      if (typeof pad === "number") {
        return undefined;
      } else if (pad.tag) {
        return incompatible_flag(pct_ind, str_ind, c, "'*'");
      } else {
        switch (pad[0]) {
          case 0 : 
              if (legacy_behavior$1) {
                return pad[1];
              } else {
                return incompatible_flag(pct_ind, str_ind, c, "'-'");
              }
          case 1 : 
              return pad[1];
          case 2 : 
              if (legacy_behavior$1) {
                return pad[1];
              } else {
                return incompatible_flag(pct_ind, str_ind, c, "'0'");
              }
          
        }
      }
    };
    var get_prec_opt = function (param) {
      prec_used[0] = true;
      if (typeof prec === "number") {
        if (prec !== 0) {
          return incompatible_flag(pct_ind, str_ind, /* "_" */95, "'*'");
        } else {
          return undefined;
        }
      } else {
        return prec[0];
      }
    };
    var fmt_result;
    var exit = 0;
    var exit$1 = 0;
    var exit$2 = 0;
    if (symb >= 124) {
      exit$1 = 6;
    } else {
      switch (symb) {
        case 33 : 
            var match = parse_literal(str_ind, str_ind, end_ind);
            fmt_result = /* Fmt_EBB */[/* Flush */Block.__(10, [match[0]])];
            break;
        case 40 : 
            var sub_end = search_subformat_end(str_ind, end_ind, /* ")" */41);
            var beg_ind = sub_end + 2 | 0;
            var match$1 = parse_literal(beg_ind, beg_ind, end_ind);
            var fmt_rest = match$1[0];
            var match$2 = parse_literal(str_ind, str_ind, sub_end);
            var sub_fmtty = fmtty_of_fmt(match$2[0]);
            if (ign_used[0] = true, ign) {
              pad_used = true;
              var ignored_000 = opt_of_pad(/* "_" */95, pad);
              var ignored = /* Ignored_format_subst */Block.__(8, [
                  ignored_000,
                  sub_fmtty
                ]);
              fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [
                    ignored,
                    fmt_rest
                  ])];
            } else {
              pad_used = true;
              fmt_result = /* Fmt_EBB */[/* Format_subst */Block.__(14, [
                    opt_of_pad(/* "(" */40, pad),
                    sub_fmtty,
                    fmt_rest
                  ])];
            }
            break;
        case 44 : 
            fmt_result = parse_literal(str_ind, str_ind, end_ind);
            break;
        case 37 : 
        case 64 : 
            exit$1 = 4;
            break;
        case 67 : 
            var match$3 = parse_literal(str_ind, str_ind, end_ind);
            var fmt_rest$1 = match$3[0];
            fmt_result = (ign_used[0] = true, ign) ? /* Fmt_EBB */[/* Ignored_param */Block.__(23, [
                    /* Ignored_caml_char */1,
                    fmt_rest$1
                  ])] : /* Fmt_EBB */[/* Caml_char */Block.__(1, [fmt_rest$1])];
            break;
        case 78 : 
            var match$4 = parse_literal(str_ind, str_ind, end_ind);
            var fmt_rest$2 = match$4[0];
            if (ign_used[0] = true, ign) {
              var ignored$1 = /* Ignored_scan_get_counter */Block.__(10, [/* Token_counter */2]);
              fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [
                    ignored$1,
                    fmt_rest$2
                  ])];
            } else {
              fmt_result = /* Fmt_EBB */[/* Scan_get_counter */Block.__(21, [
                    /* Token_counter */2,
                    fmt_rest$2
                  ])];
            }
            break;
        case 83 : 
            pad_used = true;
            var pad$1 = check_no_0(symb, padprec);
            var match$5 = parse_literal(str_ind, str_ind, end_ind);
            var fmt_rest$3 = match$5[0];
            if (ign_used[0] = true, ign) {
              pad_used = true;
              var ignored$2 = /* Ignored_caml_string */Block.__(1, [opt_of_pad(/* "_" */95, padprec)]);
              fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [
                    ignored$2,
                    fmt_rest$3
                  ])];
            } else {
              var match$6 = make_padding_fmt_ebb(pad$1, fmt_rest$3);
              fmt_result = /* Fmt_EBB */[/* Caml_string */Block.__(3, [
                    match$6[0],
                    match$6[1]
                  ])];
            }
            break;
        case 91 : 
            var match$7 = parse_char_set(str_ind, end_ind);
            var char_set = match$7[1];
            var next_ind = match$7[0];
            var match$8 = parse_literal(next_ind, next_ind, end_ind);
            var fmt_rest$4 = match$8[0];
            if (ign_used[0] = true, ign) {
              pad_used = true;
              var ignored_000$1 = opt_of_pad(/* "_" */95, pad);
              var ignored$3 = /* Ignored_scan_char_set */Block.__(9, [
                  ignored_000$1,
                  char_set
                ]);
              fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [
                    ignored$3,
                    fmt_rest$4
                  ])];
            } else {
              pad_used = true;
              fmt_result = /* Fmt_EBB */[/* Scan_char_set */Block.__(20, [
                    opt_of_pad(/* "[" */91, pad),
                    char_set,
                    fmt_rest$4
                  ])];
            }
            break;
        case 32 : 
        case 35 : 
        case 43 : 
        case 45 : 
        case 95 : 
            exit$1 = 5;
            break;
        case 97 : 
            var match$9 = parse_literal(str_ind, str_ind, end_ind);
            fmt_result = /* Fmt_EBB */[/* Alpha */Block.__(15, [match$9[0]])];
            break;
        case 66 : 
        case 98 : 
            exit$1 = 3;
            break;
        case 99 : 
            var char_format = function (fmt_rest) {
              if (ign_used[0] = true, ign) {
                return /* Fmt_EBB */[/* Ignored_param */Block.__(23, [
                            /* Ignored_char */0,
                            fmt_rest
                          ])];
              } else {
                return /* Fmt_EBB */[/* Char */Block.__(0, [fmt_rest])];
              }
            };
            var scan_format = function (fmt_rest) {
              if (ign_used[0] = true, ign) {
                return /* Fmt_EBB */[/* Ignored_param */Block.__(23, [
                            /* Ignored_scan_next_char */4,
                            fmt_rest
                          ])];
              } else {
                return /* Fmt_EBB */[/* Scan_next_char */Block.__(22, [fmt_rest])];
              }
            };
            var match$10 = parse_literal(str_ind, str_ind, end_ind);
            var fmt_rest$5 = match$10[0];
            pad_used = true;
            var match$11 = opt_of_pad(/* "c" */99, pad);
            fmt_result = match$11 !== undefined ? (
                match$11 !== 0 ? (
                    legacy_behavior$1 ? char_format(fmt_rest$5) : invalid_format_message(str_ind, "non-zero widths are unsupported for %c conversions")
                  ) : scan_format(fmt_rest$5)
              ) : char_format(fmt_rest$5);
            break;
        case 69 : 
        case 70 : 
        case 71 : 
        case 101 : 
        case 102 : 
        case 103 : 
            exit$1 = 2;
            break;
        case 76 : 
        case 108 : 
        case 110 : 
            exit$2 = 8;
            break;
        case 114 : 
            var match$12 = parse_literal(str_ind, str_ind, end_ind);
            var fmt_rest$6 = match$12[0];
            fmt_result = (ign_used[0] = true, ign) ? /* Fmt_EBB */[/* Ignored_param */Block.__(23, [
                    /* Ignored_reader */3,
                    fmt_rest$6
                  ])] : /* Fmt_EBB */[/* Reader */Block.__(19, [fmt_rest$6])];
            break;
        case 115 : 
            pad_used = true;
            var pad$2 = check_no_0(symb, padprec);
            var match$13 = parse_literal(str_ind, str_ind, end_ind);
            var fmt_rest$7 = match$13[0];
            if (ign_used[0] = true, ign) {
              pad_used = true;
              var ignored$4 = /* Ignored_string */Block.__(0, [opt_of_pad(/* "_" */95, padprec)]);
              fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [
                    ignored$4,
                    fmt_rest$7
                  ])];
            } else {
              var match$14 = make_padding_fmt_ebb(pad$2, fmt_rest$7);
              fmt_result = /* Fmt_EBB */[/* String */Block.__(2, [
                    match$14[0],
                    match$14[1]
                  ])];
            }
            break;
        case 116 : 
            var match$15 = parse_literal(str_ind, str_ind, end_ind);
            fmt_result = /* Fmt_EBB */[/* Theta */Block.__(16, [match$15[0]])];
            break;
        case 88 : 
        case 100 : 
        case 105 : 
        case 111 : 
        case 117 : 
        case 120 : 
            exit$2 = 7;
            break;
        case 0 : 
        case 1 : 
        case 2 : 
        case 3 : 
        case 4 : 
        case 5 : 
        case 6 : 
        case 7 : 
        case 8 : 
        case 9 : 
        case 10 : 
        case 11 : 
        case 12 : 
        case 13 : 
        case 14 : 
        case 15 : 
        case 16 : 
        case 17 : 
        case 18 : 
        case 19 : 
        case 20 : 
        case 21 : 
        case 22 : 
        case 23 : 
        case 24 : 
        case 25 : 
        case 26 : 
        case 27 : 
        case 28 : 
        case 29 : 
        case 30 : 
        case 31 : 
        case 34 : 
        case 36 : 
        case 38 : 
        case 39 : 
        case 41 : 
        case 42 : 
        case 46 : 
        case 47 : 
        case 48 : 
        case 49 : 
        case 50 : 
        case 51 : 
        case 52 : 
        case 53 : 
        case 54 : 
        case 55 : 
        case 56 : 
        case 57 : 
        case 58 : 
        case 59 : 
        case 60 : 
        case 61 : 
        case 62 : 
        case 63 : 
        case 65 : 
        case 68 : 
        case 72 : 
        case 73 : 
        case 74 : 
        case 75 : 
        case 77 : 
        case 79 : 
        case 80 : 
        case 81 : 
        case 82 : 
        case 84 : 
        case 85 : 
        case 86 : 
        case 87 : 
        case 89 : 
        case 90 : 
        case 92 : 
        case 93 : 
        case 94 : 
        case 96 : 
        case 104 : 
        case 106 : 
        case 107 : 
        case 109 : 
        case 112 : 
        case 113 : 
        case 118 : 
        case 119 : 
        case 121 : 
        case 122 : 
            exit$1 = 6;
            break;
        case 123 : 
            var sub_end$1 = search_subformat_end(str_ind, end_ind, /* "}" */125);
            var match$16 = parse_literal(str_ind, str_ind, sub_end$1);
            var beg_ind$1 = sub_end$1 + 2 | 0;
            var match$17 = parse_literal(beg_ind$1, beg_ind$1, end_ind);
            var fmt_rest$8 = match$17[0];
            var sub_fmtty$1 = fmtty_of_fmt(match$16[0]);
            if (ign_used[0] = true, ign) {
              pad_used = true;
              var ignored_000$2 = opt_of_pad(/* "_" */95, pad);
              var ignored$5 = /* Ignored_format_arg */Block.__(7, [
                  ignored_000$2,
                  sub_fmtty$1
                ]);
              fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [
                    ignored$5,
                    fmt_rest$8
                  ])];
            } else {
              pad_used = true;
              fmt_result = /* Fmt_EBB */[/* Format_arg */Block.__(13, [
                    opt_of_pad(/* "{" */123, pad),
                    sub_fmtty$1,
                    fmt_rest$8
                  ])];
            }
            break;
        
      }
    }
    switch (exit$2) {
      case 7 : 
          plus_used = true;
          sharp_used = true;
          space_used = true;
          var iconv = compute_int_conv(pct_ind, str_ind, plus, sharp, space, symb);
          var match$18 = parse_literal(str_ind, str_ind, end_ind);
          var fmt_rest$9 = match$18[0];
          if (ign_used[0] = true, ign) {
            pad_used = true;
            var ignored_001 = opt_of_pad(/* "_" */95, pad);
            var ignored$6 = /* Ignored_int */Block.__(2, [
                iconv,
                ignored_001
              ]);
            fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [
                  ignored$6,
                  fmt_rest$9
                ])];
          } else {
            pad_used = true;
            prec_used[0] = true;
            var pad$3;
            var exit$3 = 0;
            if (typeof prec === "number" && prec === 0) {
              pad$3 = pad;
            } else {
              exit$3 = 9;
            }
            if (exit$3 === 9) {
              pad$3 = typeof pad === "number" ? /* No_padding */0 : (
                  pad.tag ? (
                      pad[0] >= 2 ? (
                          legacy_behavior$1 ? /* Arg_padding */Block.__(1, [/* Right */1]) : incompatible_flag(pct_ind, str_ind, /* "0" */48, "precision")
                        ) : pad
                    ) : (
                      pad[0] >= 2 ? (
                          legacy_behavior$1 ? /* Lit_padding */Block.__(0, [
                                /* Right */1,
                                pad[1]
                              ]) : incompatible_flag(pct_ind, str_ind, /* "0" */48, "precision")
                        ) : pad
                    )
                );
            }
            var match$19 = make_padprec_fmt_ebb(pad$3, (prec_used[0] = true, prec), fmt_rest$9);
            fmt_result = /* Fmt_EBB */[/* Int */Block.__(4, [
                  iconv,
                  match$19[0],
                  match$19[1],
                  match$19[2]
                ])];
          }
          break;
      case 8 : 
          if (str_ind === end_ind || !is_int_base(Caml_string.get(str, str_ind))) {
            var match$20 = parse_literal(str_ind, str_ind, end_ind);
            var fmt_rest$10 = match$20[0];
            var counter = counter_of_char(symb);
            if (ign_used[0] = true, ign) {
              var ignored$7 = /* Ignored_scan_get_counter */Block.__(10, [counter]);
              fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [
                    ignored$7,
                    fmt_rest$10
                  ])];
            } else {
              fmt_result = /* Fmt_EBB */[/* Scan_get_counter */Block.__(21, [
                    counter,
                    fmt_rest$10
                  ])];
            }
          } else {
            exit$1 = 6;
          }
          break;
      
    }
    switch (exit$1) {
      case 2 : 
          plus_used = true;
          space_used = true;
          var fconv = compute_float_conv(pct_ind, str_ind, plus, space, symb);
          var match$21 = parse_literal(str_ind, str_ind, end_ind);
          var fmt_rest$11 = match$21[0];
          if (ign_used[0] = true, ign) {
            pad_used = true;
            var ignored_000$3 = opt_of_pad(/* "_" */95, pad);
            var ignored_001$1 = get_prec_opt(/* () */0);
            var ignored$8 = /* Ignored_float */Block.__(6, [
                ignored_000$3,
                ignored_001$1
              ]);
            fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [
                  ignored$8,
                  fmt_rest$11
                ])];
          } else {
            pad_used = true;
            var match$22 = make_padprec_fmt_ebb(pad, (prec_used[0] = true, prec), fmt_rest$11);
            fmt_result = /* Fmt_EBB */[/* Float */Block.__(8, [
                  fconv,
                  match$22[0],
                  match$22[1],
                  match$22[2]
                ])];
          }
          break;
      case 3 : 
          var match$23 = parse_literal(str_ind, str_ind, end_ind);
          var fmt_rest$12 = match$23[0];
          fmt_result = (ign_used[0] = true, ign) ? /* Fmt_EBB */[/* Ignored_param */Block.__(23, [
                  /* Ignored_bool */2,
                  fmt_rest$12
                ])] : /* Fmt_EBB */[/* Bool */Block.__(9, [fmt_rest$12])];
          break;
      case 4 : 
          var match$24 = parse_literal(str_ind, str_ind, end_ind);
          fmt_result = /* Fmt_EBB */[/* Char_literal */Block.__(12, [
                symb,
                match$24[0]
              ])];
          break;
      case 5 : 
          fmt_result = Curry._3(failwith_message(/* Format */[
                    /* String_literal */Block.__(11, [
                        "invalid format ",
                        /* Caml_string */Block.__(3, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                ": at character number ",
                                /* Int */Block.__(4, [
                                    /* Int_d */0,
                                    /* No_padding */0,
                                    /* No_precision */0,
                                    /* String_literal */Block.__(11, [
                                        ", flag ",
                                        /* Caml_char */Block.__(1, [/* String_literal */Block.__(11, [
                                                " is only allowed after the '",
                                                /* Char_literal */Block.__(12, [
                                                    /* "%" */37,
                                                    /* String_literal */Block.__(11, [
                                                        "', before padding and precision",
                                                        /* End_of_format */0
                                                      ])
                                                  ])
                                              ])])
                                      ])
                                  ])
                              ])
                          ])
                      ]),
                    "invalid format %S: at character number %d, flag %C is only allowed after the '%%', before padding and precision"
                  ]), str, pct_ind, symb);
          break;
      case 6 : 
          if (symb >= 108) {
            if (symb >= 111) {
              exit = 1;
            } else {
              switch (symb - 108 | 0) {
                case 0 : 
                    plus_used = true;
                    sharp_used = true;
                    space_used = true;
                    var iconv$1 = compute_int_conv(pct_ind, str_ind + 1 | 0, plus, sharp, space, Caml_string.get(str, str_ind));
                    var beg_ind$2 = str_ind + 1 | 0;
                    var match$25 = parse_literal(beg_ind$2, beg_ind$2, end_ind);
                    var fmt_rest$13 = match$25[0];
                    if (ign_used[0] = true, ign) {
                      pad_used = true;
                      var ignored_001$2 = opt_of_pad(/* "_" */95, pad);
                      var ignored$9 = /* Ignored_int32 */Block.__(3, [
                          iconv$1,
                          ignored_001$2
                        ]);
                      fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [
                            ignored$9,
                            fmt_rest$13
                          ])];
                    } else {
                      pad_used = true;
                      var match$26 = make_padprec_fmt_ebb(pad, (prec_used[0] = true, prec), fmt_rest$13);
                      fmt_result = /* Fmt_EBB */[/* Int32 */Block.__(5, [
                            iconv$1,
                            match$26[0],
                            match$26[1],
                            match$26[2]
                          ])];
                    }
                    break;
                case 1 : 
                    exit = 1;
                    break;
                case 2 : 
                    plus_used = true;
                    sharp_used = true;
                    space_used = true;
                    var iconv$2 = compute_int_conv(pct_ind, str_ind + 1 | 0, plus, sharp, space, Caml_string.get(str, str_ind));
                    var beg_ind$3 = str_ind + 1 | 0;
                    var match$27 = parse_literal(beg_ind$3, beg_ind$3, end_ind);
                    var fmt_rest$14 = match$27[0];
                    if (ign_used[0] = true, ign) {
                      pad_used = true;
                      var ignored_001$3 = opt_of_pad(/* "_" */95, pad);
                      var ignored$10 = /* Ignored_nativeint */Block.__(4, [
                          iconv$2,
                          ignored_001$3
                        ]);
                      fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [
                            ignored$10,
                            fmt_rest$14
                          ])];
                    } else {
                      pad_used = true;
                      var match$28 = make_padprec_fmt_ebb(pad, (prec_used[0] = true, prec), fmt_rest$14);
                      fmt_result = /* Fmt_EBB */[/* Nativeint */Block.__(6, [
                            iconv$2,
                            match$28[0],
                            match$28[1],
                            match$28[2]
                          ])];
                    }
                    break;
                
              }
            }
          } else if (symb !== 76) {
            exit = 1;
          } else {
            plus_used = true;
            sharp_used = true;
            space_used = true;
            var iconv$3 = compute_int_conv(pct_ind, str_ind + 1 | 0, plus, sharp, space, Caml_string.get(str, str_ind));
            var beg_ind$4 = str_ind + 1 | 0;
            var match$29 = parse_literal(beg_ind$4, beg_ind$4, end_ind);
            var fmt_rest$15 = match$29[0];
            if (ign_used[0] = true, ign) {
              pad_used = true;
              var ignored_001$4 = opt_of_pad(/* "_" */95, pad);
              var ignored$11 = /* Ignored_int64 */Block.__(5, [
                  iconv$3,
                  ignored_001$4
                ]);
              fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [
                    ignored$11,
                    fmt_rest$15
                  ])];
            } else {
              pad_used = true;
              var match$30 = make_padprec_fmt_ebb(pad, (prec_used[0] = true, prec), fmt_rest$15);
              fmt_result = /* Fmt_EBB */[/* Int64 */Block.__(7, [
                    iconv$3,
                    match$30[0],
                    match$30[1],
                    match$30[2]
                  ])];
            }
          }
          break;
      
    }
    if (exit === 1) {
      fmt_result = Curry._3(failwith_message(/* Format */[
                /* String_literal */Block.__(11, [
                    "invalid format ",
                    /* Caml_string */Block.__(3, [
                        /* No_padding */0,
                        /* String_literal */Block.__(11, [
                            ": at character number ",
                            /* Int */Block.__(4, [
                                /* Int_d */0,
                                /* No_padding */0,
                                /* No_precision */0,
                                /* String_literal */Block.__(11, [
                                    ", invalid conversion \"",
                                    /* Char_literal */Block.__(12, [
                                        /* "%" */37,
                                        /* Char */Block.__(0, [/* Char_literal */Block.__(12, [
                                                /* "\"" */34,
                                                /* End_of_format */0
                                              ])])
                                      ])
                                  ])
                              ])
                          ])
                      ])
                  ]),
                "invalid format %S: at character number %d, invalid conversion \"%%%c\""
              ]), str, str_ind - 1 | 0, symb);
    }
    if (!legacy_behavior$1) {
      if (!plus_used && plus) {
        incompatible_flag(pct_ind, str_ind, symb, "'+'");
      }
      if (!sharp_used && sharp) {
        incompatible_flag(pct_ind, str_ind, symb, "'#'");
      }
      if (!space_used && space) {
        incompatible_flag(pct_ind, str_ind, symb, "' '");
      }
      if (!pad_used && Caml_obj.caml_notequal(/* Padding_EBB */[pad], /* Padding_EBB */[/* No_padding */0])) {
        incompatible_flag(pct_ind, str_ind, symb, "`padding'");
      }
      if (!prec_used[0] && Caml_obj.caml_notequal(/* Precision_EBB */[prec], /* Precision_EBB */[/* No_precision */0])) {
        incompatible_flag(pct_ind, str_ind, ign ? /* "_" */95 : symb, "`precision'");
      }
      if (ign && plus) {
        incompatible_flag(pct_ind, str_ind, /* "_" */95, "'+'");
      }
      
    }
    if (!ign_used[0] && ign) {
      var exit$4 = 0;
      if (symb >= 38) {
        if (symb !== 44) {
          if (symb !== 64) {
            exit$4 = 1;
          } else if (!legacy_behavior$1) {
            exit$4 = 1;
          }
          
        } else if (!legacy_behavior$1) {
          exit$4 = 1;
        }
        
      } else if (symb !== 33) {
        if (symb >= 37) {
          if (!legacy_behavior$1) {
            exit$4 = 1;
          }
          
        } else {
          exit$4 = 1;
        }
      } else if (!legacy_behavior$1) {
        exit$4 = 1;
      }
      if (exit$4 === 1) {
        incompatible_flag(pct_ind, str_ind, symb, "'_'");
      }
      
    }
    return fmt_result;
  };
  var parse_flags = function (pct_ind, str_ind, end_ind, ign) {
    var zero = /* record */[/* contents */false];
    var minus = /* record */[/* contents */false];
    var plus = /* record */[/* contents */false];
    var space = /* record */[/* contents */false];
    var sharp = /* record */[/* contents */false];
    var set_flag = function (str_ind, flag) {
      if (flag[0] && !legacy_behavior$1) {
        Curry._3(failwith_message(/* Format */[
                  /* String_literal */Block.__(11, [
                      "invalid format ",
                      /* Caml_string */Block.__(3, [
                          /* No_padding */0,
                          /* String_literal */Block.__(11, [
                              ": at character number ",
                              /* Int */Block.__(4, [
                                  /* Int_d */0,
                                  /* No_padding */0,
                                  /* No_precision */0,
                                  /* String_literal */Block.__(11, [
                                      ", duplicate flag ",
                                      /* Caml_char */Block.__(1, [/* End_of_format */0])
                                    ])
                                ])
                            ])
                        ])
                    ]),
                  "invalid format %S: at character number %d, duplicate flag %C"
                ]), str, str_ind, Caml_string.get(str, str_ind));
      }
      flag[0] = true;
      return /* () */0;
    };
    var _str_ind = str_ind;
    while(true) {
      var str_ind$1 = _str_ind;
      if (str_ind$1 === end_ind) {
        invalid_format_message(end_ind, "unexpected end of format");
      }
      var match = Caml_string.get(str, str_ind$1);
      var exit = 0;
      switch (match) {
        case 32 : 
            set_flag(str_ind$1, space);
            _str_ind = str_ind$1 + 1 | 0;
            continue ;
        case 35 : 
            set_flag(str_ind$1, sharp);
            _str_ind = str_ind$1 + 1 | 0;
            continue ;
        case 43 : 
            set_flag(str_ind$1, plus);
            _str_ind = str_ind$1 + 1 | 0;
            continue ;
        case 45 : 
            set_flag(str_ind$1, minus);
            _str_ind = str_ind$1 + 1 | 0;
            continue ;
        case 33 : 
        case 34 : 
        case 36 : 
        case 37 : 
        case 38 : 
        case 39 : 
        case 40 : 
        case 41 : 
        case 42 : 
        case 44 : 
        case 46 : 
        case 47 : 
            exit = 1;
            break;
        case 48 : 
            set_flag(str_ind$1, zero);
            _str_ind = str_ind$1 + 1 | 0;
            continue ;
        default:
          exit = 1;
      }
      if (exit === 1) {
        var pct_ind$1 = pct_ind;
        var str_ind$2 = str_ind$1;
        var end_ind$1 = end_ind;
        var zero$1 = zero[0];
        var minus$1 = minus[0];
        var plus$1 = plus[0];
        var sharp$1 = sharp[0];
        var space$1 = space[0];
        var ign$1 = ign;
        if (str_ind$2 === end_ind$1) {
          invalid_format_message(end_ind$1, "unexpected end of format");
        }
        var padty = zero$1 ? (
            minus$1 ? (
                legacy_behavior$1 ? /* Left */0 : incompatible_flag(pct_ind$1, str_ind$2, /* "-" */45, "0")
              ) : /* Zeros */2
          ) : (
            minus$1 ? /* Left */0 : /* Right */1
          );
        var match$1 = Caml_string.get(str, str_ind$2);
        var exit$1 = 0;
        if (match$1 >= 48) {
          if (match$1 >= 58) {
            exit$1 = 1;
          } else {
            var match$2 = parse_positive(str_ind$2, end_ind$1, 0);
            return parse_after_padding(pct_ind$1, match$2[0], end_ind$1, minus$1, plus$1, sharp$1, space$1, ign$1, /* Lit_padding */Block.__(0, [
                          padty,
                          match$2[1]
                        ]));
          }
        } else if (match$1 !== 42) {
          exit$1 = 1;
        } else {
          return parse_after_padding(pct_ind$1, str_ind$2 + 1 | 0, end_ind$1, minus$1, plus$1, sharp$1, space$1, ign$1, /* Arg_padding */Block.__(1, [padty]));
        }
        if (exit$1 === 1) {
          switch (padty) {
            case 0 : 
                if (!legacy_behavior$1) {
                  invalid_format_without(str_ind$2 - 1 | 0, /* "-" */45, "padding");
                }
                return parse_after_padding(pct_ind$1, str_ind$2, end_ind$1, minus$1, plus$1, sharp$1, space$1, ign$1, /* No_padding */0);
            case 1 : 
                return parse_after_padding(pct_ind$1, str_ind$2, end_ind$1, minus$1, plus$1, sharp$1, space$1, ign$1, /* No_padding */0);
            case 2 : 
                return parse_after_padding(pct_ind$1, str_ind$2, end_ind$1, minus$1, plus$1, sharp$1, space$1, ign$1, /* Lit_padding */Block.__(0, [
                              /* Right */1,
                              0
                            ]));
            
          }
        }
        
      }
      
    };
  };
  var is_int_base = function (symb) {
    switch (symb) {
      case 89 : 
      case 90 : 
      case 91 : 
      case 92 : 
      case 93 : 
      case 94 : 
      case 95 : 
      case 96 : 
      case 97 : 
      case 98 : 
      case 99 : 
      case 101 : 
      case 102 : 
      case 103 : 
      case 104 : 
      case 106 : 
      case 107 : 
      case 108 : 
      case 109 : 
      case 110 : 
      case 112 : 
      case 113 : 
      case 114 : 
      case 115 : 
      case 116 : 
      case 118 : 
      case 119 : 
          return false;
      case 88 : 
      case 100 : 
      case 105 : 
      case 111 : 
      case 117 : 
      case 120 : 
          return true;
      default:
        return false;
    }
  };
  var counter_of_char = function (symb) {
    var exit = 0;
    if (symb >= 108) {
      if (symb >= 111) {
        exit = 1;
      } else {
        switch (symb - 108 | 0) {
          case 0 : 
              return /* Line_counter */0;
          case 1 : 
              exit = 1;
              break;
          case 2 : 
              return /* Char_counter */1;
          
        }
      }
    } else if (symb !== 76) {
      exit = 1;
    } else {
      return /* Token_counter */2;
    }
    if (exit === 1) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "camlinternalFormat.ml",
              2686,
              34
            ]
          ];
    }
    
  };
  var parse_char_set = function (str_ind, end_ind) {
    if (str_ind === end_ind) {
      invalid_format_message(end_ind, "unexpected end of format");
    }
    var char_set = Bytes.make(32, /* "\000" */0);
    var add_range = function (c, c$prime) {
      for(var i = c; i <= c$prime; ++i){
        add_in_char_set(char_set, Pervasives.char_of_int(i));
      }
      return /* () */0;
    };
    var fail_single_percent = function (str_ind) {
      return Curry._2(failwith_message(/* Format */[
                      /* String_literal */Block.__(11, [
                          "invalid format ",
                          /* Caml_string */Block.__(3, [
                              /* No_padding */0,
                              /* String_literal */Block.__(11, [
                                  ": '",
                                  /* Char_literal */Block.__(12, [
                                      /* "%" */37,
                                      /* String_literal */Block.__(11, [
                                          "' alone is not accepted in character sets, use ",
                                          /* Char_literal */Block.__(12, [
                                              /* "%" */37,
                                              /* Char_literal */Block.__(12, [
                                                  /* "%" */37,
                                                  /* String_literal */Block.__(11, [
                                                      " instead at position ",
                                                      /* Int */Block.__(4, [
                                                          /* Int_d */0,
                                                          /* No_padding */0,
                                                          /* No_precision */0,
                                                          /* Char_literal */Block.__(12, [
                                                              /* "." */46,
                                                              /* End_of_format */0
                                                            ])
                                                        ])
                                                    ])
                                                ])
                                            ])
                                        ])
                                    ])
                                ])
                            ])
                        ]),
                      "invalid format %S: '%%' alone is not accepted in character sets, use %%%% instead at position %d."
                    ]), str, str_ind);
    };
    var parse_char_set_after_char = function (_str_ind, end_ind, _c) {
      while(true) {
        var c = _c;
        var str_ind = _str_ind;
        if (str_ind === end_ind) {
          invalid_format_message(end_ind, "unexpected end of format");
        }
        var c$prime = Caml_string.get(str, str_ind);
        var exit = 0;
        var exit$1 = 0;
        if (c$prime >= 46) {
          if (c$prime !== 64) {
            if (c$prime !== 93) {
              exit = 1;
            } else {
              add_in_char_set(char_set, c);
              return str_ind + 1 | 0;
            }
          } else {
            exit$1 = 2;
          }
        } else if (c$prime !== 37) {
          if (c$prime >= 45) {
            var str_ind$1 = str_ind + 1 | 0;
            var end_ind$1 = end_ind;
            var c$1 = c;
            if (str_ind$1 === end_ind$1) {
              invalid_format_message(end_ind$1, "unexpected end of format");
            }
            var c$prime$1 = Caml_string.get(str, str_ind$1);
            if (c$prime$1 !== 37) {
              if (c$prime$1 !== 93) {
                add_range(c$1, c$prime$1);
                return parse_char_set_content(str_ind$1 + 1 | 0, end_ind$1);
              } else {
                add_in_char_set(char_set, c$1);
                add_in_char_set(char_set, /* "-" */45);
                return str_ind$1 + 1 | 0;
              }
            } else {
              if ((str_ind$1 + 1 | 0) === end_ind$1) {
                invalid_format_message(end_ind$1, "unexpected end of format");
              }
              var c$prime$2 = Caml_string.get(str, str_ind$1 + 1 | 0);
              var exit$2 = 0;
              if (c$prime$2 !== 37 && c$prime$2 !== 64) {
                return fail_single_percent(str_ind$1);
              } else {
                exit$2 = 1;
              }
              if (exit$2 === 1) {
                add_range(c$1, c$prime$2);
                return parse_char_set_content(str_ind$1 + 2 | 0, end_ind$1);
              }
              
            }
          } else {
            exit = 1;
          }
        } else {
          exit$1 = 2;
        }
        if (exit$1 === 2) {
          if (c === /* "%" */37) {
            add_in_char_set(char_set, c$prime);
            return parse_char_set_content(str_ind + 1 | 0, end_ind);
          } else {
            exit = 1;
          }
        }
        if (exit === 1) {
          if (c === /* "%" */37) {
            fail_single_percent(str_ind);
          }
          add_in_char_set(char_set, c);
          _c = c$prime;
          _str_ind = str_ind + 1 | 0;
          continue ;
        }
        
      };
    };
    var parse_char_set_content = function (_str_ind, end_ind) {
      while(true) {
        var str_ind = _str_ind;
        if (str_ind === end_ind) {
          invalid_format_message(end_ind, "unexpected end of format");
        }
        var c = Caml_string.get(str, str_ind);
        if (c !== 45) {
          if (c !== 93) {
            return parse_char_set_after_char(str_ind + 1 | 0, end_ind, c);
          } else {
            return str_ind + 1 | 0;
          }
        } else {
          add_in_char_set(char_set, /* "-" */45);
          _str_ind = str_ind + 1 | 0;
          continue ;
        }
      };
    };
    var parse_char_set_start = function (str_ind, end_ind) {
      if (str_ind === end_ind) {
        invalid_format_message(end_ind, "unexpected end of format");
      }
      var c = Caml_string.get(str, str_ind);
      return parse_char_set_after_char(str_ind + 1 | 0, end_ind, c);
    };
    if (str_ind === end_ind) {
      invalid_format_message(end_ind, "unexpected end of format");
    }
    var match = Caml_string.get(str, str_ind);
    var match$1 = match !== 94 ? /* tuple */[
        str_ind,
        false
      ] : /* tuple */[
        str_ind + 1 | 0,
        true
      ];
    var next_ind = parse_char_set_start(match$1[0], end_ind);
    var char_set$1 = Bytes.to_string(char_set);
    return /* tuple */[
            next_ind,
            match$1[1] ? rev_char_set(char_set$1) : char_set$1
          ];
  };
  var check_open_box = function (fmt) {
    if (typeof fmt === "number" || !(fmt.tag === 11 && typeof fmt[1] === "number")) {
      return /* () */0;
    } else {
      try {
        open_box_of_string(fmt[0]);
        return /* () */0;
      }
      catch (raw_exn){
        var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
        if (exn[0] === Caml_builtin_exceptions.failure) {
          return /* () */0;
        } else {
          throw exn;
        }
      }
    }
  };
  var parse_tag = function (is_open_tag, str_ind, end_ind) {
    try {
      if (str_ind === end_ind) {
        throw Caml_builtin_exceptions.not_found;
      }
      var match = Caml_string.get(str, str_ind);
      if (match !== 60) {
        throw Caml_builtin_exceptions.not_found;
      } else {
        var ind = $$String.index_from(str, str_ind + 1 | 0, /* ">" */62);
        if (ind >= end_ind) {
          throw Caml_builtin_exceptions.not_found;
        }
        var sub_str = $$String.sub(str, str_ind, (ind - str_ind | 0) + 1 | 0);
        var beg_ind = ind + 1 | 0;
        var match$1 = parse_literal(beg_ind, beg_ind, end_ind);
        var match$2 = parse_literal(str_ind, str_ind, ind + 1 | 0);
        var sub_fmt = match$2[0];
        var sub_format = /* Format */[
          sub_fmt,
          sub_str
        ];
        var formatting = is_open_tag ? /* Open_tag */Block.__(0, [sub_format]) : (check_open_box(sub_fmt), /* Open_box */Block.__(1, [sub_format]));
        return /* Fmt_EBB */[/* Formatting_gen */Block.__(18, [
                    formatting,
                    match$1[0]
                  ])];
      }
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        var match$3 = parse_literal(str_ind, str_ind, end_ind);
        var sub_format$1 = /* Format */[
          /* End_of_format */0,
          ""
        ];
        var formatting$1 = is_open_tag ? /* Open_tag */Block.__(0, [sub_format$1]) : /* Open_box */Block.__(1, [sub_format$1]);
        return /* Fmt_EBB */[/* Formatting_gen */Block.__(18, [
                    formatting$1,
                    match$3[0]
                  ])];
      } else {
        throw exn;
      }
    }
  };
  return parse_literal(0, 0, str.length);
}

function format_of_string_fmtty(str, fmtty) {
  var match = fmt_ebb_of_string(undefined, str);
  try {
    return /* Format */[
            type_format(match[0], fmtty),
            str
          ];
  }
  catch (exn){
    if (exn === Type_mismatch) {
      return Curry._2(failwith_message(/* Format */[
                      /* String_literal */Block.__(11, [
                          "bad input: format type mismatch between ",
                          /* Caml_string */Block.__(3, [
                              /* No_padding */0,
                              /* String_literal */Block.__(11, [
                                  " and ",
                                  /* Caml_string */Block.__(3, [
                                      /* No_padding */0,
                                      /* End_of_format */0
                                    ])
                                ])
                            ])
                        ]),
                      "bad input: format type mismatch between %S and %S"
                    ]), str, string_of_fmtty(fmtty));
    } else {
      throw exn;
    }
  }
}

function format_of_string_format(str, param) {
  var match = fmt_ebb_of_string(undefined, str);
  try {
    return /* Format */[
            type_format(match[0], fmtty_of_fmt(param[0])),
            str
          ];
  }
  catch (exn){
    if (exn === Type_mismatch) {
      return Curry._2(failwith_message(/* Format */[
                      /* String_literal */Block.__(11, [
                          "bad input: format type mismatch between ",
                          /* Caml_string */Block.__(3, [
                              /* No_padding */0,
                              /* String_literal */Block.__(11, [
                                  " and ",
                                  /* Caml_string */Block.__(3, [
                                      /* No_padding */0,
                                      /* End_of_format */0
                                    ])
                                ])
                            ])
                        ]),
                      "bad input: format type mismatch between %S and %S"
                    ]), str, param[1]);
    } else {
      throw exn;
    }
  }
}

exports.is_in_char_set = is_in_char_set;
exports.rev_char_set = rev_char_set;
exports.create_char_set = create_char_set;
exports.add_in_char_set = add_in_char_set;
exports.freeze_char_set = freeze_char_set;
exports.param_format_of_ignored_format = param_format_of_ignored_format;
exports.make_printf = make_printf;
exports.output_acc = output_acc;
exports.bufput_acc = bufput_acc;
exports.strput_acc = strput_acc;
exports.type_format = type_format;
exports.fmt_ebb_of_string = fmt_ebb_of_string;
exports.format_of_string_fmtty = format_of_string_fmtty;
exports.format_of_string_format = format_of_string_format;
exports.char_of_iconv = char_of_iconv;
exports.string_of_formatting_lit = string_of_formatting_lit;
exports.string_of_formatting_gen = string_of_formatting_gen;
exports.string_of_fmtty = string_of_fmtty;
exports.string_of_fmt = string_of_fmt;
exports.open_box_of_string = open_box_of_string;
exports.symm = symm;
exports.trans = trans;
exports.recast = recast;
/* No side effect */

},{"./block.js":2,"./buffer.js":3,"./bytes.js":4,"./caml_builtin_exceptions.js":6,"./caml_bytes.js":7,"./caml_exceptions.js":8,"./caml_format.js":9,"./caml_int32.js":10,"./caml_io.js":12,"./caml_js_exceptions.js":13,"./caml_obj.js":15,"./caml_primitive.js":17,"./caml_string.js":18,"./camlinternalFormatBasics.js":22,"./char.js":23,"./curry.js":24,"./pervasives.js":26,"./string.js":28}],22:[function(require,module,exports){
'use strict';

var Block = require("./block.js");

function erase_rel(param) {
  if (typeof param === "number") {
    return /* End_of_fmtty */0;
  } else {
    switch (param.tag | 0) {
      case 0 : 
          return /* Char_ty */Block.__(0, [erase_rel(param[0])]);
      case 1 : 
          return /* String_ty */Block.__(1, [erase_rel(param[0])]);
      case 2 : 
          return /* Int_ty */Block.__(2, [erase_rel(param[0])]);
      case 3 : 
          return /* Int32_ty */Block.__(3, [erase_rel(param[0])]);
      case 4 : 
          return /* Nativeint_ty */Block.__(4, [erase_rel(param[0])]);
      case 5 : 
          return /* Int64_ty */Block.__(5, [erase_rel(param[0])]);
      case 6 : 
          return /* Float_ty */Block.__(6, [erase_rel(param[0])]);
      case 7 : 
          return /* Bool_ty */Block.__(7, [erase_rel(param[0])]);
      case 8 : 
          return /* Format_arg_ty */Block.__(8, [
                    param[0],
                    erase_rel(param[1])
                  ]);
      case 9 : 
          var ty1 = param[0];
          return /* Format_subst_ty */Block.__(9, [
                    ty1,
                    ty1,
                    erase_rel(param[2])
                  ]);
      case 10 : 
          return /* Alpha_ty */Block.__(10, [erase_rel(param[0])]);
      case 11 : 
          return /* Theta_ty */Block.__(11, [erase_rel(param[0])]);
      case 12 : 
          return /* Any_ty */Block.__(12, [erase_rel(param[0])]);
      case 13 : 
          return /* Reader_ty */Block.__(13, [erase_rel(param[0])]);
      case 14 : 
          return /* Ignored_reader_ty */Block.__(14, [erase_rel(param[0])]);
      
    }
  }
}

function concat_fmtty(fmtty1, fmtty2) {
  if (typeof fmtty1 === "number") {
    return fmtty2;
  } else {
    switch (fmtty1.tag | 0) {
      case 0 : 
          return /* Char_ty */Block.__(0, [concat_fmtty(fmtty1[0], fmtty2)]);
      case 1 : 
          return /* String_ty */Block.__(1, [concat_fmtty(fmtty1[0], fmtty2)]);
      case 2 : 
          return /* Int_ty */Block.__(2, [concat_fmtty(fmtty1[0], fmtty2)]);
      case 3 : 
          return /* Int32_ty */Block.__(3, [concat_fmtty(fmtty1[0], fmtty2)]);
      case 4 : 
          return /* Nativeint_ty */Block.__(4, [concat_fmtty(fmtty1[0], fmtty2)]);
      case 5 : 
          return /* Int64_ty */Block.__(5, [concat_fmtty(fmtty1[0], fmtty2)]);
      case 6 : 
          return /* Float_ty */Block.__(6, [concat_fmtty(fmtty1[0], fmtty2)]);
      case 7 : 
          return /* Bool_ty */Block.__(7, [concat_fmtty(fmtty1[0], fmtty2)]);
      case 8 : 
          return /* Format_arg_ty */Block.__(8, [
                    fmtty1[0],
                    concat_fmtty(fmtty1[1], fmtty2)
                  ]);
      case 9 : 
          return /* Format_subst_ty */Block.__(9, [
                    fmtty1[0],
                    fmtty1[1],
                    concat_fmtty(fmtty1[2], fmtty2)
                  ]);
      case 10 : 
          return /* Alpha_ty */Block.__(10, [concat_fmtty(fmtty1[0], fmtty2)]);
      case 11 : 
          return /* Theta_ty */Block.__(11, [concat_fmtty(fmtty1[0], fmtty2)]);
      case 12 : 
          return /* Any_ty */Block.__(12, [concat_fmtty(fmtty1[0], fmtty2)]);
      case 13 : 
          return /* Reader_ty */Block.__(13, [concat_fmtty(fmtty1[0], fmtty2)]);
      case 14 : 
          return /* Ignored_reader_ty */Block.__(14, [concat_fmtty(fmtty1[0], fmtty2)]);
      
    }
  }
}

function concat_fmt(fmt1, fmt2) {
  if (typeof fmt1 === "number") {
    return fmt2;
  } else {
    switch (fmt1.tag | 0) {
      case 0 : 
          return /* Char */Block.__(0, [concat_fmt(fmt1[0], fmt2)]);
      case 1 : 
          return /* Caml_char */Block.__(1, [concat_fmt(fmt1[0], fmt2)]);
      case 2 : 
          return /* String */Block.__(2, [
                    fmt1[0],
                    concat_fmt(fmt1[1], fmt2)
                  ]);
      case 3 : 
          return /* Caml_string */Block.__(3, [
                    fmt1[0],
                    concat_fmt(fmt1[1], fmt2)
                  ]);
      case 4 : 
          return /* Int */Block.__(4, [
                    fmt1[0],
                    fmt1[1],
                    fmt1[2],
                    concat_fmt(fmt1[3], fmt2)
                  ]);
      case 5 : 
          return /* Int32 */Block.__(5, [
                    fmt1[0],
                    fmt1[1],
                    fmt1[2],
                    concat_fmt(fmt1[3], fmt2)
                  ]);
      case 6 : 
          return /* Nativeint */Block.__(6, [
                    fmt1[0],
                    fmt1[1],
                    fmt1[2],
                    concat_fmt(fmt1[3], fmt2)
                  ]);
      case 7 : 
          return /* Int64 */Block.__(7, [
                    fmt1[0],
                    fmt1[1],
                    fmt1[2],
                    concat_fmt(fmt1[3], fmt2)
                  ]);
      case 8 : 
          return /* Float */Block.__(8, [
                    fmt1[0],
                    fmt1[1],
                    fmt1[2],
                    concat_fmt(fmt1[3], fmt2)
                  ]);
      case 9 : 
          return /* Bool */Block.__(9, [concat_fmt(fmt1[0], fmt2)]);
      case 10 : 
          return /* Flush */Block.__(10, [concat_fmt(fmt1[0], fmt2)]);
      case 11 : 
          return /* String_literal */Block.__(11, [
                    fmt1[0],
                    concat_fmt(fmt1[1], fmt2)
                  ]);
      case 12 : 
          return /* Char_literal */Block.__(12, [
                    fmt1[0],
                    concat_fmt(fmt1[1], fmt2)
                  ]);
      case 13 : 
          return /* Format_arg */Block.__(13, [
                    fmt1[0],
                    fmt1[1],
                    concat_fmt(fmt1[2], fmt2)
                  ]);
      case 14 : 
          return /* Format_subst */Block.__(14, [
                    fmt1[0],
                    fmt1[1],
                    concat_fmt(fmt1[2], fmt2)
                  ]);
      case 15 : 
          return /* Alpha */Block.__(15, [concat_fmt(fmt1[0], fmt2)]);
      case 16 : 
          return /* Theta */Block.__(16, [concat_fmt(fmt1[0], fmt2)]);
      case 17 : 
          return /* Formatting_lit */Block.__(17, [
                    fmt1[0],
                    concat_fmt(fmt1[1], fmt2)
                  ]);
      case 18 : 
          return /* Formatting_gen */Block.__(18, [
                    fmt1[0],
                    concat_fmt(fmt1[1], fmt2)
                  ]);
      case 19 : 
          return /* Reader */Block.__(19, [concat_fmt(fmt1[0], fmt2)]);
      case 20 : 
          return /* Scan_char_set */Block.__(20, [
                    fmt1[0],
                    fmt1[1],
                    concat_fmt(fmt1[2], fmt2)
                  ]);
      case 21 : 
          return /* Scan_get_counter */Block.__(21, [
                    fmt1[0],
                    concat_fmt(fmt1[1], fmt2)
                  ]);
      case 22 : 
          return /* Scan_next_char */Block.__(22, [concat_fmt(fmt1[0], fmt2)]);
      case 23 : 
          return /* Ignored_param */Block.__(23, [
                    fmt1[0],
                    concat_fmt(fmt1[1], fmt2)
                  ]);
      case 24 : 
          return /* Custom */Block.__(24, [
                    fmt1[0],
                    fmt1[1],
                    concat_fmt(fmt1[2], fmt2)
                  ]);
      
    }
  }
}

exports.concat_fmtty = concat_fmtty;
exports.erase_rel = erase_rel;
exports.concat_fmt = concat_fmt;
/* No side effect */

},{"./block.js":2}],23:[function(require,module,exports){
'use strict';

var Caml_bytes = require("./caml_bytes.js");
var Caml_builtin_exceptions = require("./caml_builtin_exceptions.js");

function chr(n) {
  if (n < 0 || n > 255) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "Char.chr"
        ];
  } else {
    return n;
  }
}

function escaped(c) {
  var exit = 0;
  if (c >= 40) {
    if (c !== 92) {
      exit = c >= 127 ? 1 : 2;
    } else {
      return "\\\\";
    }
  } else if (c >= 32) {
    if (c >= 39) {
      return "\\'";
    } else {
      exit = 2;
    }
  } else if (c >= 14) {
    exit = 1;
  } else {
    switch (c) {
      case 8 : 
          return "\\b";
      case 9 : 
          return "\\t";
      case 10 : 
          return "\\n";
      case 0 : 
      case 1 : 
      case 2 : 
      case 3 : 
      case 4 : 
      case 5 : 
      case 6 : 
      case 7 : 
      case 11 : 
      case 12 : 
          exit = 1;
          break;
      case 13 : 
          return "\\r";
      
    }
  }
  switch (exit) {
    case 1 : 
        var s = [
          0,
          0,
          0,
          0
        ];
        s[0] = /* "\\" */92;
        s[1] = 48 + (c / 100 | 0) | 0;
        s[2] = 48 + (c / 10 | 0) % 10 | 0;
        s[3] = 48 + c % 10 | 0;
        return Caml_bytes.bytes_to_string(s);
    case 2 : 
        var s$1 = [0];
        s$1[0] = c;
        return Caml_bytes.bytes_to_string(s$1);
    
  }
}

function lowercase(c) {
  if (c >= /* "A" */65 && c <= /* "Z" */90 || c >= /* "\192" */192 && c <= /* "\214" */214 || c >= /* "\216" */216 && c <= /* "\222" */222) {
    return c + 32 | 0;
  } else {
    return c;
  }
}

function uppercase(c) {
  if (c >= /* "a" */97 && c <= /* "z" */122 || c >= /* "\224" */224 && c <= /* "\246" */246 || c >= /* "\248" */248 && c <= /* "\254" */254) {
    return c - 32 | 0;
  } else {
    return c;
  }
}

function compare(c1, c2) {
  return c1 - c2 | 0;
}

exports.chr = chr;
exports.escaped = escaped;
exports.lowercase = lowercase;
exports.uppercase = uppercase;
exports.compare = compare;
/* No side effect */

},{"./caml_builtin_exceptions.js":6,"./caml_bytes.js":7}],24:[function(require,module,exports){
'use strict';

var Caml_array = require("./caml_array.js");

function app(_f, _args) {
  while(true) {
    var args = _args;
    var f = _f;
    var init_arity = f.length;
    var arity = init_arity === 0 ? 1 : init_arity;
    var len = args.length;
    var d = arity - len | 0;
    if (d === 0) {
      return f.apply(null, args);
    } else if (d < 0) {
      _args = Caml_array.caml_array_sub(args, arity, -d | 0);
      _f = f.apply(null, Caml_array.caml_array_sub(args, 0, arity));
      continue ;
    } else {
      return (function(f,args){
      return function (x) {
        return app(f, args.concat(/* array */[x]));
      }
      }(f,args));
    }
  };
}

function curry_1(o, a0, arity) {
  switch (arity) {
    case 1 : 
        return o(a0);
    case 2 : 
        return (function (param) {
            return o(a0, param);
          });
    case 3 : 
        return (function (param, param$1) {
            return o(a0, param, param$1);
          });
    case 4 : 
        return (function (param, param$1, param$2) {
            return o(a0, param, param$1, param$2);
          });
    case 5 : 
        return (function (param, param$1, param$2, param$3) {
            return o(a0, param, param$1, param$2, param$3);
          });
    case 6 : 
        return (function (param, param$1, param$2, param$3, param$4) {
            return o(a0, param, param$1, param$2, param$3, param$4);
          });
    case 7 : 
        return (function (param, param$1, param$2, param$3, param$4, param$5) {
            return o(a0, param, param$1, param$2, param$3, param$4, param$5);
          });
    default:
      return app(o, /* array */[a0]);
  }
}

function _1(o, a0) {
  var arity = o.length;
  if (arity === 1) {
    return o(a0);
  } else {
    return curry_1(o, a0, arity);
  }
}

function __1(o) {
  var arity = o.length;
  if (arity === 1) {
    return o;
  } else {
    return (function (a0) {
        return _1(o, a0);
      });
  }
}

function curry_2(o, a0, a1, arity) {
  switch (arity) {
    case 1 : 
        return app(o(a0), /* array */[a1]);
    case 2 : 
        return o(a0, a1);
    case 3 : 
        return (function (param) {
            return o(a0, a1, param);
          });
    case 4 : 
        return (function (param, param$1) {
            return o(a0, a1, param, param$1);
          });
    case 5 : 
        return (function (param, param$1, param$2) {
            return o(a0, a1, param, param$1, param$2);
          });
    case 6 : 
        return (function (param, param$1, param$2, param$3) {
            return o(a0, a1, param, param$1, param$2, param$3);
          });
    case 7 : 
        return (function (param, param$1, param$2, param$3, param$4) {
            return o(a0, a1, param, param$1, param$2, param$3, param$4);
          });
    default:
      return app(o, /* array */[
                  a0,
                  a1
                ]);
  }
}

function _2(o, a0, a1) {
  var arity = o.length;
  if (arity === 2) {
    return o(a0, a1);
  } else {
    return curry_2(o, a0, a1, arity);
  }
}

function __2(o) {
  var arity = o.length;
  if (arity === 2) {
    return o;
  } else {
    return (function (a0, a1) {
        return _2(o, a0, a1);
      });
  }
}

function curry_3(o, a0, a1, a2, arity) {
  switch (arity) {
    case 1 : 
        return app(o(a0), /* array */[
                    a1,
                    a2
                  ]);
    case 2 : 
        return app(o(a0, a1), /* array */[a2]);
    case 3 : 
        return o(a0, a1, a2);
    case 4 : 
        return (function (param) {
            return o(a0, a1, a2, param);
          });
    case 5 : 
        return (function (param, param$1) {
            return o(a0, a1, a2, param, param$1);
          });
    case 6 : 
        return (function (param, param$1, param$2) {
            return o(a0, a1, a2, param, param$1, param$2);
          });
    case 7 : 
        return (function (param, param$1, param$2, param$3) {
            return o(a0, a1, a2, param, param$1, param$2, param$3);
          });
    default:
      return app(o, /* array */[
                  a0,
                  a1,
                  a2
                ]);
  }
}

function _3(o, a0, a1, a2) {
  var arity = o.length;
  if (arity === 3) {
    return o(a0, a1, a2);
  } else {
    return curry_3(o, a0, a1, a2, arity);
  }
}

function __3(o) {
  var arity = o.length;
  if (arity === 3) {
    return o;
  } else {
    return (function (a0, a1, a2) {
        return _3(o, a0, a1, a2);
      });
  }
}

function curry_4(o, a0, a1, a2, a3, arity) {
  switch (arity) {
    case 1 : 
        return app(o(a0), /* array */[
                    a1,
                    a2,
                    a3
                  ]);
    case 2 : 
        return app(o(a0, a1), /* array */[
                    a2,
                    a3
                  ]);
    case 3 : 
        return app(o(a0, a1, a2), /* array */[a3]);
    case 4 : 
        return o(a0, a1, a2, a3);
    case 5 : 
        return (function (param) {
            return o(a0, a1, a2, a3, param);
          });
    case 6 : 
        return (function (param, param$1) {
            return o(a0, a1, a2, a3, param, param$1);
          });
    case 7 : 
        return (function (param, param$1, param$2) {
            return o(a0, a1, a2, a3, param, param$1, param$2);
          });
    default:
      return app(o, /* array */[
                  a0,
                  a1,
                  a2,
                  a3
                ]);
  }
}

function _4(o, a0, a1, a2, a3) {
  var arity = o.length;
  if (arity === 4) {
    return o(a0, a1, a2, a3);
  } else {
    return curry_4(o, a0, a1, a2, a3, arity);
  }
}

function __4(o) {
  var arity = o.length;
  if (arity === 4) {
    return o;
  } else {
    return (function (a0, a1, a2, a3) {
        return _4(o, a0, a1, a2, a3);
      });
  }
}

function curry_5(o, a0, a1, a2, a3, a4, arity) {
  switch (arity) {
    case 1 : 
        return app(o(a0), /* array */[
                    a1,
                    a2,
                    a3,
                    a4
                  ]);
    case 2 : 
        return app(o(a0, a1), /* array */[
                    a2,
                    a3,
                    a4
                  ]);
    case 3 : 
        return app(o(a0, a1, a2), /* array */[
                    a3,
                    a4
                  ]);
    case 4 : 
        return app(o(a0, a1, a2, a3), /* array */[a4]);
    case 5 : 
        return o(a0, a1, a2, a3, a4);
    case 6 : 
        return (function (param) {
            return o(a0, a1, a2, a3, a4, param);
          });
    case 7 : 
        return (function (param, param$1) {
            return o(a0, a1, a2, a3, a4, param, param$1);
          });
    default:
      return app(o, /* array */[
                  a0,
                  a1,
                  a2,
                  a3,
                  a4
                ]);
  }
}

function _5(o, a0, a1, a2, a3, a4) {
  var arity = o.length;
  if (arity === 5) {
    return o(a0, a1, a2, a3, a4);
  } else {
    return curry_5(o, a0, a1, a2, a3, a4, arity);
  }
}

function __5(o) {
  var arity = o.length;
  if (arity === 5) {
    return o;
  } else {
    return (function (a0, a1, a2, a3, a4) {
        return _5(o, a0, a1, a2, a3, a4);
      });
  }
}

function curry_6(o, a0, a1, a2, a3, a4, a5, arity) {
  switch (arity) {
    case 1 : 
        return app(o(a0), /* array */[
                    a1,
                    a2,
                    a3,
                    a4,
                    a5
                  ]);
    case 2 : 
        return app(o(a0, a1), /* array */[
                    a2,
                    a3,
                    a4,
                    a5
                  ]);
    case 3 : 
        return app(o(a0, a1, a2), /* array */[
                    a3,
                    a4,
                    a5
                  ]);
    case 4 : 
        return app(o(a0, a1, a2, a3), /* array */[
                    a4,
                    a5
                  ]);
    case 5 : 
        return app(o(a0, a1, a2, a3, a4), /* array */[a5]);
    case 6 : 
        return o(a0, a1, a2, a3, a4, a5);
    case 7 : 
        return (function (param) {
            return o(a0, a1, a2, a3, a4, a5, param);
          });
    default:
      return app(o, /* array */[
                  a0,
                  a1,
                  a2,
                  a3,
                  a4,
                  a5
                ]);
  }
}

function _6(o, a0, a1, a2, a3, a4, a5) {
  var arity = o.length;
  if (arity === 6) {
    return o(a0, a1, a2, a3, a4, a5);
  } else {
    return curry_6(o, a0, a1, a2, a3, a4, a5, arity);
  }
}

function __6(o) {
  var arity = o.length;
  if (arity === 6) {
    return o;
  } else {
    return (function (a0, a1, a2, a3, a4, a5) {
        return _6(o, a0, a1, a2, a3, a4, a5);
      });
  }
}

function curry_7(o, a0, a1, a2, a3, a4, a5, a6, arity) {
  switch (arity) {
    case 1 : 
        return app(o(a0), /* array */[
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6
                  ]);
    case 2 : 
        return app(o(a0, a1), /* array */[
                    a2,
                    a3,
                    a4,
                    a5,
                    a6
                  ]);
    case 3 : 
        return app(o(a0, a1, a2), /* array */[
                    a3,
                    a4,
                    a5,
                    a6
                  ]);
    case 4 : 
        return app(o(a0, a1, a2, a3), /* array */[
                    a4,
                    a5,
                    a6
                  ]);
    case 5 : 
        return app(o(a0, a1, a2, a3, a4), /* array */[
                    a5,
                    a6
                  ]);
    case 6 : 
        return app(o(a0, a1, a2, a3, a4, a5), /* array */[a6]);
    case 7 : 
        return o(a0, a1, a2, a3, a4, a5, a6);
    default:
      return app(o, /* array */[
                  a0,
                  a1,
                  a2,
                  a3,
                  a4,
                  a5,
                  a6
                ]);
  }
}

function _7(o, a0, a1, a2, a3, a4, a5, a6) {
  var arity = o.length;
  if (arity === 7) {
    return o(a0, a1, a2, a3, a4, a5, a6);
  } else {
    return curry_7(o, a0, a1, a2, a3, a4, a5, a6, arity);
  }
}

function __7(o) {
  var arity = o.length;
  if (arity === 7) {
    return o;
  } else {
    return (function (a0, a1, a2, a3, a4, a5, a6) {
        return _7(o, a0, a1, a2, a3, a4, a5, a6);
      });
  }
}

function curry_8(o, a0, a1, a2, a3, a4, a5, a6, a7, arity) {
  switch (arity) {
    case 1 : 
        return app(o(a0), /* array */[
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7
                  ]);
    case 2 : 
        return app(o(a0, a1), /* array */[
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7
                  ]);
    case 3 : 
        return app(o(a0, a1, a2), /* array */[
                    a3,
                    a4,
                    a5,
                    a6,
                    a7
                  ]);
    case 4 : 
        return app(o(a0, a1, a2, a3), /* array */[
                    a4,
                    a5,
                    a6,
                    a7
                  ]);
    case 5 : 
        return app(o(a0, a1, a2, a3, a4), /* array */[
                    a5,
                    a6,
                    a7
                  ]);
    case 6 : 
        return app(o(a0, a1, a2, a3, a4, a5), /* array */[
                    a6,
                    a7
                  ]);
    case 7 : 
        return app(o(a0, a1, a2, a3, a4, a5, a6), /* array */[a7]);
    default:
      return app(o, /* array */[
                  a0,
                  a1,
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7
                ]);
  }
}

function _8(o, a0, a1, a2, a3, a4, a5, a6, a7) {
  var arity = o.length;
  if (arity === 8) {
    return o(a0, a1, a2, a3, a4, a5, a6, a7);
  } else {
    return curry_8(o, a0, a1, a2, a3, a4, a5, a6, a7, arity);
  }
}

function __8(o) {
  var arity = o.length;
  if (arity === 8) {
    return o;
  } else {
    return (function (a0, a1, a2, a3, a4, a5, a6, a7) {
        return _8(o, a0, a1, a2, a3, a4, a5, a6, a7);
      });
  }
}

exports.app = app;
exports.curry_1 = curry_1;
exports._1 = _1;
exports.__1 = __1;
exports.curry_2 = curry_2;
exports._2 = _2;
exports.__2 = __2;
exports.curry_3 = curry_3;
exports._3 = _3;
exports.__3 = __3;
exports.curry_4 = curry_4;
exports._4 = _4;
exports.__4 = __4;
exports.curry_5 = curry_5;
exports._5 = _5;
exports.__5 = __5;
exports.curry_6 = curry_6;
exports._6 = _6;
exports.__6 = __6;
exports.curry_7 = curry_7;
exports._7 = _7;
exports.__7 = __7;
exports.curry_8 = curry_8;
exports._8 = _8;
exports.__8 = __8;
/* No side effect */

},{"./caml_array.js":5}],25:[function(require,module,exports){
'use strict';

var Curry = require("./curry.js");
var Caml_obj = require("./caml_obj.js");
var Pervasives = require("./pervasives.js");
var Caml_builtin_exceptions = require("./caml_builtin_exceptions.js");

function length(l) {
  var _len = 0;
  var _param = l;
  while(true) {
    var param = _param;
    var len = _len;
    if (param) {
      _param = param[1];
      _len = len + 1 | 0;
      continue ;
    } else {
      return len;
    }
  };
}

function hd(param) {
  if (param) {
    return param[0];
  } else {
    throw [
          Caml_builtin_exceptions.failure,
          "hd"
        ];
  }
}

function tl(param) {
  if (param) {
    return param[1];
  } else {
    throw [
          Caml_builtin_exceptions.failure,
          "tl"
        ];
  }
}

function nth(l, n) {
  if (n < 0) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "List.nth"
        ];
  } else {
    var _l = l;
    var _n = n;
    while(true) {
      var n$1 = _n;
      var l$1 = _l;
      if (l$1) {
        if (n$1 === 0) {
          return l$1[0];
        } else {
          _n = n$1 - 1 | 0;
          _l = l$1[1];
          continue ;
        }
      } else {
        throw [
              Caml_builtin_exceptions.failure,
              "nth"
            ];
      }
    };
  }
}

function rev_append(_l1, _l2) {
  while(true) {
    var l2 = _l2;
    var l1 = _l1;
    if (l1) {
      _l2 = /* :: */[
        l1[0],
        l2
      ];
      _l1 = l1[1];
      continue ;
    } else {
      return l2;
    }
  };
}

function rev(l) {
  return rev_append(l, /* [] */0);
}

function flatten(param) {
  if (param) {
    return Pervasives.$at(param[0], flatten(param[1]));
  } else {
    return /* [] */0;
  }
}

function map(f, param) {
  if (param) {
    var r = Curry._1(f, param[0]);
    return /* :: */[
            r,
            map(f, param[1])
          ];
  } else {
    return /* [] */0;
  }
}

function mapi(i, f, param) {
  if (param) {
    var r = Curry._2(f, i, param[0]);
    return /* :: */[
            r,
            mapi(i + 1 | 0, f, param[1])
          ];
  } else {
    return /* [] */0;
  }
}

function mapi$1(f, l) {
  return mapi(0, f, l);
}

function rev_map(f, l) {
  var _accu = /* [] */0;
  var _param = l;
  while(true) {
    var param = _param;
    var accu = _accu;
    if (param) {
      _param = param[1];
      _accu = /* :: */[
        Curry._1(f, param[0]),
        accu
      ];
      continue ;
    } else {
      return accu;
    }
  };
}

function iter(f, _param) {
  while(true) {
    var param = _param;
    if (param) {
      Curry._1(f, param[0]);
      _param = param[1];
      continue ;
    } else {
      return /* () */0;
    }
  };
}

function iteri(f, l) {
  var _i = 0;
  var f$1 = f;
  var _param = l;
  while(true) {
    var param = _param;
    var i = _i;
    if (param) {
      Curry._2(f$1, i, param[0]);
      _param = param[1];
      _i = i + 1 | 0;
      continue ;
    } else {
      return /* () */0;
    }
  };
}

function fold_left(f, _accu, _l) {
  while(true) {
    var l = _l;
    var accu = _accu;
    if (l) {
      _l = l[1];
      _accu = Curry._2(f, accu, l[0]);
      continue ;
    } else {
      return accu;
    }
  };
}

function fold_right(f, l, accu) {
  if (l) {
    return Curry._2(f, l[0], fold_right(f, l[1], accu));
  } else {
    return accu;
  }
}

function map2(f, l1, l2) {
  if (l1) {
    if (l2) {
      var r = Curry._2(f, l1[0], l2[0]);
      return /* :: */[
              r,
              map2(f, l1[1], l2[1])
            ];
    } else {
      throw [
            Caml_builtin_exceptions.invalid_argument,
            "List.map2"
          ];
    }
  } else if (l2) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "List.map2"
        ];
  } else {
    return /* [] */0;
  }
}

function rev_map2(f, l1, l2) {
  var _accu = /* [] */0;
  var _l1 = l1;
  var _l2 = l2;
  while(true) {
    var l2$1 = _l2;
    var l1$1 = _l1;
    var accu = _accu;
    if (l1$1) {
      if (l2$1) {
        _l2 = l2$1[1];
        _l1 = l1$1[1];
        _accu = /* :: */[
          Curry._2(f, l1$1[0], l2$1[0]),
          accu
        ];
        continue ;
      } else {
        throw [
              Caml_builtin_exceptions.invalid_argument,
              "List.rev_map2"
            ];
      }
    } else if (l2$1) {
      throw [
            Caml_builtin_exceptions.invalid_argument,
            "List.rev_map2"
          ];
    } else {
      return accu;
    }
  };
}

function iter2(f, _l1, _l2) {
  while(true) {
    var l2 = _l2;
    var l1 = _l1;
    if (l1) {
      if (l2) {
        Curry._2(f, l1[0], l2[0]);
        _l2 = l2[1];
        _l1 = l1[1];
        continue ;
      } else {
        throw [
              Caml_builtin_exceptions.invalid_argument,
              "List.iter2"
            ];
      }
    } else if (l2) {
      throw [
            Caml_builtin_exceptions.invalid_argument,
            "List.iter2"
          ];
    } else {
      return /* () */0;
    }
  };
}

function fold_left2(f, _accu, _l1, _l2) {
  while(true) {
    var l2 = _l2;
    var l1 = _l1;
    var accu = _accu;
    if (l1) {
      if (l2) {
        _l2 = l2[1];
        _l1 = l1[1];
        _accu = Curry._3(f, accu, l1[0], l2[0]);
        continue ;
      } else {
        throw [
              Caml_builtin_exceptions.invalid_argument,
              "List.fold_left2"
            ];
      }
    } else if (l2) {
      throw [
            Caml_builtin_exceptions.invalid_argument,
            "List.fold_left2"
          ];
    } else {
      return accu;
    }
  };
}

function fold_right2(f, l1, l2, accu) {
  if (l1) {
    if (l2) {
      return Curry._3(f, l1[0], l2[0], fold_right2(f, l1[1], l2[1], accu));
    } else {
      throw [
            Caml_builtin_exceptions.invalid_argument,
            "List.fold_right2"
          ];
    }
  } else if (l2) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "List.fold_right2"
        ];
  } else {
    return accu;
  }
}

function for_all(p, _param) {
  while(true) {
    var param = _param;
    if (param) {
      if (Curry._1(p, param[0])) {
        _param = param[1];
        continue ;
      } else {
        return false;
      }
    } else {
      return true;
    }
  };
}

function exists(p, _param) {
  while(true) {
    var param = _param;
    if (param) {
      if (Curry._1(p, param[0])) {
        return true;
      } else {
        _param = param[1];
        continue ;
      }
    } else {
      return false;
    }
  };
}

function for_all2(p, _l1, _l2) {
  while(true) {
    var l2 = _l2;
    var l1 = _l1;
    if (l1) {
      if (l2) {
        if (Curry._2(p, l1[0], l2[0])) {
          _l2 = l2[1];
          _l1 = l1[1];
          continue ;
        } else {
          return false;
        }
      } else {
        throw [
              Caml_builtin_exceptions.invalid_argument,
              "List.for_all2"
            ];
      }
    } else if (l2) {
      throw [
            Caml_builtin_exceptions.invalid_argument,
            "List.for_all2"
          ];
    } else {
      return true;
    }
  };
}

function exists2(p, _l1, _l2) {
  while(true) {
    var l2 = _l2;
    var l1 = _l1;
    if (l1) {
      if (l2) {
        if (Curry._2(p, l1[0], l2[0])) {
          return true;
        } else {
          _l2 = l2[1];
          _l1 = l1[1];
          continue ;
        }
      } else {
        throw [
              Caml_builtin_exceptions.invalid_argument,
              "List.exists2"
            ];
      }
    } else if (l2) {
      throw [
            Caml_builtin_exceptions.invalid_argument,
            "List.exists2"
          ];
    } else {
      return false;
    }
  };
}

function mem(x, _param) {
  while(true) {
    var param = _param;
    if (param) {
      if (Caml_obj.caml_equal(param[0], x)) {
        return true;
      } else {
        _param = param[1];
        continue ;
      }
    } else {
      return false;
    }
  };
}

function memq(x, _param) {
  while(true) {
    var param = _param;
    if (param) {
      if (param[0] === x) {
        return true;
      } else {
        _param = param[1];
        continue ;
      }
    } else {
      return false;
    }
  };
}

function assoc(x, _param) {
  while(true) {
    var param = _param;
    if (param) {
      var match = param[0];
      if (Caml_obj.caml_equal(match[0], x)) {
        return match[1];
      } else {
        _param = param[1];
        continue ;
      }
    } else {
      throw Caml_builtin_exceptions.not_found;
    }
  };
}

function assq(x, _param) {
  while(true) {
    var param = _param;
    if (param) {
      var match = param[0];
      if (match[0] === x) {
        return match[1];
      } else {
        _param = param[1];
        continue ;
      }
    } else {
      throw Caml_builtin_exceptions.not_found;
    }
  };
}

function mem_assoc(x, _param) {
  while(true) {
    var param = _param;
    if (param) {
      if (Caml_obj.caml_equal(param[0][0], x)) {
        return true;
      } else {
        _param = param[1];
        continue ;
      }
    } else {
      return false;
    }
  };
}

function mem_assq(x, _param) {
  while(true) {
    var param = _param;
    if (param) {
      if (param[0][0] === x) {
        return true;
      } else {
        _param = param[1];
        continue ;
      }
    } else {
      return false;
    }
  };
}

function remove_assoc(x, param) {
  if (param) {
    var l = param[1];
    var pair = param[0];
    if (Caml_obj.caml_equal(pair[0], x)) {
      return l;
    } else {
      return /* :: */[
              pair,
              remove_assoc(x, l)
            ];
    }
  } else {
    return /* [] */0;
  }
}

function remove_assq(x, param) {
  if (param) {
    var l = param[1];
    var pair = param[0];
    if (pair[0] === x) {
      return l;
    } else {
      return /* :: */[
              pair,
              remove_assq(x, l)
            ];
    }
  } else {
    return /* [] */0;
  }
}

function find(p, _param) {
  while(true) {
    var param = _param;
    if (param) {
      var x = param[0];
      if (Curry._1(p, x)) {
        return x;
      } else {
        _param = param[1];
        continue ;
      }
    } else {
      throw Caml_builtin_exceptions.not_found;
    }
  };
}

function find_all(p) {
  return (function (param) {
      var _accu = /* [] */0;
      var _param = param;
      while(true) {
        var param$1 = _param;
        var accu = _accu;
        if (param$1) {
          var l = param$1[1];
          var x = param$1[0];
          if (Curry._1(p, x)) {
            _param = l;
            _accu = /* :: */[
              x,
              accu
            ];
            continue ;
          } else {
            _param = l;
            continue ;
          }
        } else {
          return rev_append(accu, /* [] */0);
        }
      };
    });
}

function partition(p, l) {
  var _yes = /* [] */0;
  var _no = /* [] */0;
  var _param = l;
  while(true) {
    var param = _param;
    var no = _no;
    var yes = _yes;
    if (param) {
      var l$1 = param[1];
      var x = param[0];
      if (Curry._1(p, x)) {
        _param = l$1;
        _yes = /* :: */[
          x,
          yes
        ];
        continue ;
      } else {
        _param = l$1;
        _no = /* :: */[
          x,
          no
        ];
        continue ;
      }
    } else {
      return /* tuple */[
              rev_append(yes, /* [] */0),
              rev_append(no, /* [] */0)
            ];
    }
  };
}

function split(param) {
  if (param) {
    var match = param[0];
    var match$1 = split(param[1]);
    return /* tuple */[
            /* :: */[
              match[0],
              match$1[0]
            ],
            /* :: */[
              match[1],
              match$1[1]
            ]
          ];
  } else {
    return /* tuple */[
            /* [] */0,
            /* [] */0
          ];
  }
}

function combine(l1, l2) {
  if (l1) {
    if (l2) {
      return /* :: */[
              /* tuple */[
                l1[0],
                l2[0]
              ],
              combine(l1[1], l2[1])
            ];
    } else {
      throw [
            Caml_builtin_exceptions.invalid_argument,
            "List.combine"
          ];
    }
  } else if (l2) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "List.combine"
        ];
  } else {
    return /* [] */0;
  }
}

function merge(cmp, l1, l2) {
  if (l1) {
    if (l2) {
      var h2 = l2[0];
      var h1 = l1[0];
      if (Curry._2(cmp, h1, h2) <= 0) {
        return /* :: */[
                h1,
                merge(cmp, l1[1], l2)
              ];
      } else {
        return /* :: */[
                h2,
                merge(cmp, l1, l2[1])
              ];
      }
    } else {
      return l1;
    }
  } else {
    return l2;
  }
}

function chop(_k, _l) {
  while(true) {
    var l = _l;
    var k = _k;
    if (k === 0) {
      return l;
    } else if (l) {
      _l = l[1];
      _k = k - 1 | 0;
      continue ;
    } else {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "list.ml",
              223,
              11
            ]
          ];
    }
  };
}

function stable_sort(cmp, l) {
  var sort = function (n, l) {
    var exit = 0;
    if (n !== 2) {
      if (n !== 3 || !l) {
        exit = 1;
      } else {
        var match = l[1];
        if (match) {
          var match$1 = match[1];
          if (match$1) {
            var x3 = match$1[0];
            var x2 = match[0];
            var x1 = l[0];
            if (Curry._2(cmp, x1, x2) <= 0) {
              if (Curry._2(cmp, x2, x3) <= 0) {
                return /* :: */[
                        x1,
                        /* :: */[
                          x2,
                          /* :: */[
                            x3,
                            /* [] */0
                          ]
                        ]
                      ];
              } else if (Curry._2(cmp, x1, x3) <= 0) {
                return /* :: */[
                        x1,
                        /* :: */[
                          x3,
                          /* :: */[
                            x2,
                            /* [] */0
                          ]
                        ]
                      ];
              } else {
                return /* :: */[
                        x3,
                        /* :: */[
                          x1,
                          /* :: */[
                            x2,
                            /* [] */0
                          ]
                        ]
                      ];
              }
            } else if (Curry._2(cmp, x1, x3) <= 0) {
              return /* :: */[
                      x2,
                      /* :: */[
                        x1,
                        /* :: */[
                          x3,
                          /* [] */0
                        ]
                      ]
                    ];
            } else if (Curry._2(cmp, x2, x3) <= 0) {
              return /* :: */[
                      x2,
                      /* :: */[
                        x3,
                        /* :: */[
                          x1,
                          /* [] */0
                        ]
                      ]
                    ];
            } else {
              return /* :: */[
                      x3,
                      /* :: */[
                        x2,
                        /* :: */[
                          x1,
                          /* [] */0
                        ]
                      ]
                    ];
            }
          } else {
            exit = 1;
          }
        } else {
          exit = 1;
        }
      }
    } else if (l) {
      var match$2 = l[1];
      if (match$2) {
        var x2$1 = match$2[0];
        var x1$1 = l[0];
        if (Curry._2(cmp, x1$1, x2$1) <= 0) {
          return /* :: */[
                  x1$1,
                  /* :: */[
                    x2$1,
                    /* [] */0
                  ]
                ];
        } else {
          return /* :: */[
                  x2$1,
                  /* :: */[
                    x1$1,
                    /* [] */0
                  ]
                ];
        }
      } else {
        exit = 1;
      }
    } else {
      exit = 1;
    }
    if (exit === 1) {
      var n1 = (n >> 1);
      var n2 = n - n1 | 0;
      var l2 = chop(n1, l);
      var s1 = rev_sort(n1, l);
      var s2 = rev_sort(n2, l2);
      var _l1 = s1;
      var _l2 = s2;
      var _accu = /* [] */0;
      while(true) {
        var accu = _accu;
        var l2$1 = _l2;
        var l1 = _l1;
        if (l1) {
          if (l2$1) {
            var h2 = l2$1[0];
            var h1 = l1[0];
            if (Curry._2(cmp, h1, h2) > 0) {
              _accu = /* :: */[
                h1,
                accu
              ];
              _l1 = l1[1];
              continue ;
            } else {
              _accu = /* :: */[
                h2,
                accu
              ];
              _l2 = l2$1[1];
              continue ;
            }
          } else {
            return rev_append(l1, accu);
          }
        } else {
          return rev_append(l2$1, accu);
        }
      };
    }
    
  };
  var rev_sort = function (n, l) {
    var exit = 0;
    if (n !== 2) {
      if (n !== 3 || !l) {
        exit = 1;
      } else {
        var match = l[1];
        if (match) {
          var match$1 = match[1];
          if (match$1) {
            var x3 = match$1[0];
            var x2 = match[0];
            var x1 = l[0];
            if (Curry._2(cmp, x1, x2) > 0) {
              if (Curry._2(cmp, x2, x3) > 0) {
                return /* :: */[
                        x1,
                        /* :: */[
                          x2,
                          /* :: */[
                            x3,
                            /* [] */0
                          ]
                        ]
                      ];
              } else if (Curry._2(cmp, x1, x3) > 0) {
                return /* :: */[
                        x1,
                        /* :: */[
                          x3,
                          /* :: */[
                            x2,
                            /* [] */0
                          ]
                        ]
                      ];
              } else {
                return /* :: */[
                        x3,
                        /* :: */[
                          x1,
                          /* :: */[
                            x2,
                            /* [] */0
                          ]
                        ]
                      ];
              }
            } else if (Curry._2(cmp, x1, x3) > 0) {
              return /* :: */[
                      x2,
                      /* :: */[
                        x1,
                        /* :: */[
                          x3,
                          /* [] */0
                        ]
                      ]
                    ];
            } else if (Curry._2(cmp, x2, x3) > 0) {
              return /* :: */[
                      x2,
                      /* :: */[
                        x3,
                        /* :: */[
                          x1,
                          /* [] */0
                        ]
                      ]
                    ];
            } else {
              return /* :: */[
                      x3,
                      /* :: */[
                        x2,
                        /* :: */[
                          x1,
                          /* [] */0
                        ]
                      ]
                    ];
            }
          } else {
            exit = 1;
          }
        } else {
          exit = 1;
        }
      }
    } else if (l) {
      var match$2 = l[1];
      if (match$2) {
        var x2$1 = match$2[0];
        var x1$1 = l[0];
        if (Curry._2(cmp, x1$1, x2$1) > 0) {
          return /* :: */[
                  x1$1,
                  /* :: */[
                    x2$1,
                    /* [] */0
                  ]
                ];
        } else {
          return /* :: */[
                  x2$1,
                  /* :: */[
                    x1$1,
                    /* [] */0
                  ]
                ];
        }
      } else {
        exit = 1;
      }
    } else {
      exit = 1;
    }
    if (exit === 1) {
      var n1 = (n >> 1);
      var n2 = n - n1 | 0;
      var l2 = chop(n1, l);
      var s1 = sort(n1, l);
      var s2 = sort(n2, l2);
      var _l1 = s1;
      var _l2 = s2;
      var _accu = /* [] */0;
      while(true) {
        var accu = _accu;
        var l2$1 = _l2;
        var l1 = _l1;
        if (l1) {
          if (l2$1) {
            var h2 = l2$1[0];
            var h1 = l1[0];
            if (Curry._2(cmp, h1, h2) <= 0) {
              _accu = /* :: */[
                h1,
                accu
              ];
              _l1 = l1[1];
              continue ;
            } else {
              _accu = /* :: */[
                h2,
                accu
              ];
              _l2 = l2$1[1];
              continue ;
            }
          } else {
            return rev_append(l1, accu);
          }
        } else {
          return rev_append(l2$1, accu);
        }
      };
    }
    
  };
  var len = length(l);
  if (len < 2) {
    return l;
  } else {
    return sort(len, l);
  }
}

function sort_uniq(cmp, l) {
  var sort = function (n, l) {
    var exit = 0;
    if (n !== 2) {
      if (n !== 3 || !l) {
        exit = 1;
      } else {
        var match = l[1];
        if (match) {
          var match$1 = match[1];
          if (match$1) {
            var x3 = match$1[0];
            var x2 = match[0];
            var x1 = l[0];
            var c = Curry._2(cmp, x1, x2);
            if (c === 0) {
              var c$1 = Curry._2(cmp, x2, x3);
              if (c$1 === 0) {
                return /* :: */[
                        x2,
                        /* [] */0
                      ];
              } else if (c$1 < 0) {
                return /* :: */[
                        x2,
                        /* :: */[
                          x3,
                          /* [] */0
                        ]
                      ];
              } else {
                return /* :: */[
                        x3,
                        /* :: */[
                          x2,
                          /* [] */0
                        ]
                      ];
              }
            } else if (c < 0) {
              var c$2 = Curry._2(cmp, x2, x3);
              if (c$2 === 0) {
                return /* :: */[
                        x1,
                        /* :: */[
                          x2,
                          /* [] */0
                        ]
                      ];
              } else if (c$2 < 0) {
                return /* :: */[
                        x1,
                        /* :: */[
                          x2,
                          /* :: */[
                            x3,
                            /* [] */0
                          ]
                        ]
                      ];
              } else {
                var c$3 = Curry._2(cmp, x1, x3);
                if (c$3 === 0) {
                  return /* :: */[
                          x1,
                          /* :: */[
                            x2,
                            /* [] */0
                          ]
                        ];
                } else if (c$3 < 0) {
                  return /* :: */[
                          x1,
                          /* :: */[
                            x3,
                            /* :: */[
                              x2,
                              /* [] */0
                            ]
                          ]
                        ];
                } else {
                  return /* :: */[
                          x3,
                          /* :: */[
                            x1,
                            /* :: */[
                              x2,
                              /* [] */0
                            ]
                          ]
                        ];
                }
              }
            } else {
              var c$4 = Curry._2(cmp, x1, x3);
              if (c$4 === 0) {
                return /* :: */[
                        x2,
                        /* :: */[
                          x1,
                          /* [] */0
                        ]
                      ];
              } else if (c$4 < 0) {
                return /* :: */[
                        x2,
                        /* :: */[
                          x1,
                          /* :: */[
                            x3,
                            /* [] */0
                          ]
                        ]
                      ];
              } else {
                var c$5 = Curry._2(cmp, x2, x3);
                if (c$5 === 0) {
                  return /* :: */[
                          x2,
                          /* :: */[
                            x1,
                            /* [] */0
                          ]
                        ];
                } else if (c$5 < 0) {
                  return /* :: */[
                          x2,
                          /* :: */[
                            x3,
                            /* :: */[
                              x1,
                              /* [] */0
                            ]
                          ]
                        ];
                } else {
                  return /* :: */[
                          x3,
                          /* :: */[
                            x2,
                            /* :: */[
                              x1,
                              /* [] */0
                            ]
                          ]
                        ];
                }
              }
            }
          } else {
            exit = 1;
          }
        } else {
          exit = 1;
        }
      }
    } else if (l) {
      var match$2 = l[1];
      if (match$2) {
        var x2$1 = match$2[0];
        var x1$1 = l[0];
        var c$6 = Curry._2(cmp, x1$1, x2$1);
        if (c$6 === 0) {
          return /* :: */[
                  x1$1,
                  /* [] */0
                ];
        } else if (c$6 < 0) {
          return /* :: */[
                  x1$1,
                  /* :: */[
                    x2$1,
                    /* [] */0
                  ]
                ];
        } else {
          return /* :: */[
                  x2$1,
                  /* :: */[
                    x1$1,
                    /* [] */0
                  ]
                ];
        }
      } else {
        exit = 1;
      }
    } else {
      exit = 1;
    }
    if (exit === 1) {
      var n1 = (n >> 1);
      var n2 = n - n1 | 0;
      var l2 = chop(n1, l);
      var s1 = rev_sort(n1, l);
      var s2 = rev_sort(n2, l2);
      var _l1 = s1;
      var _l2 = s2;
      var _accu = /* [] */0;
      while(true) {
        var accu = _accu;
        var l2$1 = _l2;
        var l1 = _l1;
        if (l1) {
          if (l2$1) {
            var t2 = l2$1[1];
            var h2 = l2$1[0];
            var t1 = l1[1];
            var h1 = l1[0];
            var c$7 = Curry._2(cmp, h1, h2);
            if (c$7 === 0) {
              _accu = /* :: */[
                h1,
                accu
              ];
              _l2 = t2;
              _l1 = t1;
              continue ;
            } else if (c$7 > 0) {
              _accu = /* :: */[
                h1,
                accu
              ];
              _l1 = t1;
              continue ;
            } else {
              _accu = /* :: */[
                h2,
                accu
              ];
              _l2 = t2;
              continue ;
            }
          } else {
            return rev_append(l1, accu);
          }
        } else {
          return rev_append(l2$1, accu);
        }
      };
    }
    
  };
  var rev_sort = function (n, l) {
    var exit = 0;
    if (n !== 2) {
      if (n !== 3 || !l) {
        exit = 1;
      } else {
        var match = l[1];
        if (match) {
          var match$1 = match[1];
          if (match$1) {
            var x3 = match$1[0];
            var x2 = match[0];
            var x1 = l[0];
            var c = Curry._2(cmp, x1, x2);
            if (c === 0) {
              var c$1 = Curry._2(cmp, x2, x3);
              if (c$1 === 0) {
                return /* :: */[
                        x2,
                        /* [] */0
                      ];
              } else if (c$1 > 0) {
                return /* :: */[
                        x2,
                        /* :: */[
                          x3,
                          /* [] */0
                        ]
                      ];
              } else {
                return /* :: */[
                        x3,
                        /* :: */[
                          x2,
                          /* [] */0
                        ]
                      ];
              }
            } else if (c > 0) {
              var c$2 = Curry._2(cmp, x2, x3);
              if (c$2 === 0) {
                return /* :: */[
                        x1,
                        /* :: */[
                          x2,
                          /* [] */0
                        ]
                      ];
              } else if (c$2 > 0) {
                return /* :: */[
                        x1,
                        /* :: */[
                          x2,
                          /* :: */[
                            x3,
                            /* [] */0
                          ]
                        ]
                      ];
              } else {
                var c$3 = Curry._2(cmp, x1, x3);
                if (c$3 === 0) {
                  return /* :: */[
                          x1,
                          /* :: */[
                            x2,
                            /* [] */0
                          ]
                        ];
                } else if (c$3 > 0) {
                  return /* :: */[
                          x1,
                          /* :: */[
                            x3,
                            /* :: */[
                              x2,
                              /* [] */0
                            ]
                          ]
                        ];
                } else {
                  return /* :: */[
                          x3,
                          /* :: */[
                            x1,
                            /* :: */[
                              x2,
                              /* [] */0
                            ]
                          ]
                        ];
                }
              }
            } else {
              var c$4 = Curry._2(cmp, x1, x3);
              if (c$4 === 0) {
                return /* :: */[
                        x2,
                        /* :: */[
                          x1,
                          /* [] */0
                        ]
                      ];
              } else if (c$4 > 0) {
                return /* :: */[
                        x2,
                        /* :: */[
                          x1,
                          /* :: */[
                            x3,
                            /* [] */0
                          ]
                        ]
                      ];
              } else {
                var c$5 = Curry._2(cmp, x2, x3);
                if (c$5 === 0) {
                  return /* :: */[
                          x2,
                          /* :: */[
                            x1,
                            /* [] */0
                          ]
                        ];
                } else if (c$5 > 0) {
                  return /* :: */[
                          x2,
                          /* :: */[
                            x3,
                            /* :: */[
                              x1,
                              /* [] */0
                            ]
                          ]
                        ];
                } else {
                  return /* :: */[
                          x3,
                          /* :: */[
                            x2,
                            /* :: */[
                              x1,
                              /* [] */0
                            ]
                          ]
                        ];
                }
              }
            }
          } else {
            exit = 1;
          }
        } else {
          exit = 1;
        }
      }
    } else if (l) {
      var match$2 = l[1];
      if (match$2) {
        var x2$1 = match$2[0];
        var x1$1 = l[0];
        var c$6 = Curry._2(cmp, x1$1, x2$1);
        if (c$6 === 0) {
          return /* :: */[
                  x1$1,
                  /* [] */0
                ];
        } else if (c$6 > 0) {
          return /* :: */[
                  x1$1,
                  /* :: */[
                    x2$1,
                    /* [] */0
                  ]
                ];
        } else {
          return /* :: */[
                  x2$1,
                  /* :: */[
                    x1$1,
                    /* [] */0
                  ]
                ];
        }
      } else {
        exit = 1;
      }
    } else {
      exit = 1;
    }
    if (exit === 1) {
      var n1 = (n >> 1);
      var n2 = n - n1 | 0;
      var l2 = chop(n1, l);
      var s1 = sort(n1, l);
      var s2 = sort(n2, l2);
      var _l1 = s1;
      var _l2 = s2;
      var _accu = /* [] */0;
      while(true) {
        var accu = _accu;
        var l2$1 = _l2;
        var l1 = _l1;
        if (l1) {
          if (l2$1) {
            var t2 = l2$1[1];
            var h2 = l2$1[0];
            var t1 = l1[1];
            var h1 = l1[0];
            var c$7 = Curry._2(cmp, h1, h2);
            if (c$7 === 0) {
              _accu = /* :: */[
                h1,
                accu
              ];
              _l2 = t2;
              _l1 = t1;
              continue ;
            } else if (c$7 < 0) {
              _accu = /* :: */[
                h1,
                accu
              ];
              _l1 = t1;
              continue ;
            } else {
              _accu = /* :: */[
                h2,
                accu
              ];
              _l2 = t2;
              continue ;
            }
          } else {
            return rev_append(l1, accu);
          }
        } else {
          return rev_append(l2$1, accu);
        }
      };
    }
    
  };
  var len = length(l);
  if (len < 2) {
    return l;
  } else {
    return sort(len, l);
  }
}

var append = Pervasives.$at;

var concat = flatten;

var filter = find_all;

var sort = stable_sort;

var fast_sort = stable_sort;

exports.length = length;
exports.hd = hd;
exports.tl = tl;
exports.nth = nth;
exports.rev = rev;
exports.append = append;
exports.rev_append = rev_append;
exports.concat = concat;
exports.flatten = flatten;
exports.iter = iter;
exports.iteri = iteri;
exports.map = map;
exports.mapi = mapi$1;
exports.rev_map = rev_map;
exports.fold_left = fold_left;
exports.fold_right = fold_right;
exports.iter2 = iter2;
exports.map2 = map2;
exports.rev_map2 = rev_map2;
exports.fold_left2 = fold_left2;
exports.fold_right2 = fold_right2;
exports.for_all = for_all;
exports.exists = exists;
exports.for_all2 = for_all2;
exports.exists2 = exists2;
exports.mem = mem;
exports.memq = memq;
exports.find = find;
exports.filter = filter;
exports.find_all = find_all;
exports.partition = partition;
exports.assoc = assoc;
exports.assq = assq;
exports.mem_assoc = mem_assoc;
exports.mem_assq = mem_assq;
exports.remove_assoc = remove_assoc;
exports.remove_assq = remove_assq;
exports.split = split;
exports.combine = combine;
exports.sort = sort;
exports.stable_sort = stable_sort;
exports.fast_sort = fast_sort;
exports.sort_uniq = sort_uniq;
exports.merge = merge;
/* No side effect */

},{"./caml_builtin_exceptions.js":6,"./caml_obj.js":15,"./curry.js":24,"./pervasives.js":26}],26:[function(require,module,exports){
'use strict';

var Curry = require("./curry.js");
var Caml_io = require("./caml_io.js");
var Caml_sys = require("./caml_sys.js");
var Caml_bytes = require("./caml_bytes.js");
var Caml_format = require("./caml_format.js");
var Caml_string = require("./caml_string.js");
var Caml_exceptions = require("./caml_exceptions.js");
var Caml_missing_polyfill = require("./caml_missing_polyfill.js");
var Caml_builtin_exceptions = require("./caml_builtin_exceptions.js");
var CamlinternalFormatBasics = require("./camlinternalFormatBasics.js");

function failwith(s) {
  throw [
        Caml_builtin_exceptions.failure,
        s
      ];
}

function invalid_arg(s) {
  throw [
        Caml_builtin_exceptions.invalid_argument,
        s
      ];
}

var Exit = Caml_exceptions.create("Pervasives.Exit");

function abs(x) {
  if (x >= 0) {
    return x;
  } else {
    return -x | 0;
  }
}

function lnot(x) {
  return x ^ -1;
}

var min_int = -2147483648;

function classify_float(x) {
  if (isFinite(x)) {
    if (Math.abs(x) >= 2.2250738585072014e-308) {
      return /* FP_normal */0;
    } else if (x !== 0) {
      return /* FP_subnormal */1;
    } else {
      return /* FP_zero */2;
    }
  } else if (isNaN(x)) {
    return /* FP_nan */4;
  } else {
    return /* FP_infinite */3;
  }
}

function char_of_int(n) {
  if (n < 0 || n > 255) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "char_of_int"
        ];
  } else {
    return n;
  }
}

function string_of_bool(b) {
  if (b) {
    return "true";
  } else {
    return "false";
  }
}

function bool_of_string(param) {
  switch (param) {
    case "false" : 
        return false;
    case "true" : 
        return true;
    default:
      throw [
            Caml_builtin_exceptions.invalid_argument,
            "bool_of_string"
          ];
  }
}

function valid_float_lexem(s) {
  var l = s.length;
  var _i = 0;
  while(true) {
    var i = _i;
    if (i >= l) {
      return s + ".";
    } else {
      var match = Caml_string.get(s, i);
      if (match >= 48) {
        if (match >= 58) {
          return s;
        } else {
          _i = i + 1 | 0;
          continue ;
        }
      } else if (match !== 45) {
        return s;
      } else {
        _i = i + 1 | 0;
        continue ;
      }
    }
  };
}

function string_of_float(f) {
  return valid_float_lexem(Caml_format.caml_format_float("%.12g", f));
}

function $at(l1, l2) {
  if (l1) {
    return /* :: */[
            l1[0],
            $at(l1[1], l2)
          ];
  } else {
    return l2;
  }
}

var stdin = Caml_io.stdin;

var stdout = Caml_io.stdout;

var stderr = Caml_io.stderr;

function open_out_gen(mode, perm, name) {
  return Caml_missing_polyfill.not_implemented("caml_ml_open_descriptor_out");
}

function open_out(name) {
  return open_out_gen(/* :: */[
              /* Open_wronly */1,
              /* :: */[
                /* Open_creat */3,
                /* :: */[
                  /* Open_trunc */4,
                  /* :: */[
                    /* Open_text */7,
                    /* [] */0
                  ]
                ]
              ]
            ], 438, name);
}

function open_out_bin(name) {
  return open_out_gen(/* :: */[
              /* Open_wronly */1,
              /* :: */[
                /* Open_creat */3,
                /* :: */[
                  /* Open_trunc */4,
                  /* :: */[
                    /* Open_binary */6,
                    /* [] */0
                  ]
                ]
              ]
            ], 438, name);
}

function flush_all(param) {
  var _param = Caml_io.caml_ml_out_channels_list(/* () */0);
  while(true) {
    var param$1 = _param;
    if (param$1) {
      try {
        Caml_io.caml_ml_flush(param$1[0]);
      }
      catch (exn){
        
      }
      _param = param$1[1];
      continue ;
    } else {
      return /* () */0;
    }
  };
}

function output_bytes(oc, s) {
  return Caml_io.caml_ml_output(oc, s, 0, s.length);
}

function output_string(oc, s) {
  return Caml_io.caml_ml_output(oc, s, 0, s.length);
}

function output(oc, s, ofs, len) {
  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "output"
        ];
  } else {
    return Caml_io.caml_ml_output(oc, s, ofs, len);
  }
}

function output_substring(oc, s, ofs, len) {
  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "output_substring"
        ];
  } else {
    return Caml_io.caml_ml_output(oc, s, ofs, len);
  }
}

function output_value(chan, v) {
  return Caml_missing_polyfill.not_implemented("caml_output_value");
}

function close_out(oc) {
  Caml_io.caml_ml_flush(oc);
  return Caml_missing_polyfill.not_implemented("caml_ml_close_channel");
}

function close_out_noerr(oc) {
  try {
    Caml_io.caml_ml_flush(oc);
  }
  catch (exn){
    
  }
  try {
    return Caml_missing_polyfill.not_implemented("caml_ml_close_channel");
  }
  catch (exn$1){
    return /* () */0;
  }
}

function open_in_gen(mode, perm, name) {
  return Caml_missing_polyfill.not_implemented("caml_ml_open_descriptor_in");
}

function open_in(name) {
  return open_in_gen(/* :: */[
              /* Open_rdonly */0,
              /* :: */[
                /* Open_text */7,
                /* [] */0
              ]
            ], 0, name);
}

function open_in_bin(name) {
  return open_in_gen(/* :: */[
              /* Open_rdonly */0,
              /* :: */[
                /* Open_binary */6,
                /* [] */0
              ]
            ], 0, name);
}

function input(ic, s, ofs, len) {
  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "input"
        ];
  } else {
    return Caml_missing_polyfill.not_implemented("caml_ml_input");
  }
}

function unsafe_really_input(ic, s, _ofs, _len) {
  while(true) {
    var len = _len;
    var ofs = _ofs;
    if (len <= 0) {
      return /* () */0;
    } else {
      var r = Caml_missing_polyfill.not_implemented("caml_ml_input");
      if (r === 0) {
        throw Caml_builtin_exceptions.end_of_file;
      } else {
        _len = len - r | 0;
        _ofs = ofs + r | 0;
        continue ;
      }
    }
  };
}

function really_input(ic, s, ofs, len) {
  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "really_input"
        ];
  } else {
    return unsafe_really_input(ic, s, ofs, len);
  }
}

function really_input_string(ic, len) {
  var s = Caml_bytes.caml_create_bytes(len);
  really_input(ic, s, 0, len);
  return Caml_bytes.bytes_to_string(s);
}

function input_line(chan) {
  var build_result = function (buf, _pos, _param) {
    while(true) {
      var param = _param;
      var pos = _pos;
      if (param) {
        var hd = param[0];
        var len = hd.length;
        Caml_bytes.caml_blit_bytes(hd, 0, buf, pos - len | 0, len);
        _param = param[1];
        _pos = pos - len | 0;
        continue ;
      } else {
        return buf;
      }
    };
  };
  var scan = function (_accu, _len) {
    while(true) {
      var len = _len;
      var accu = _accu;
      var n = Caml_missing_polyfill.not_implemented("caml_ml_input_scan_line");
      if (n === 0) {
        if (accu) {
          return build_result(Caml_bytes.caml_create_bytes(len), len, accu);
        } else {
          throw Caml_builtin_exceptions.end_of_file;
        }
      } else if (n > 0) {
        var res = Caml_bytes.caml_create_bytes(n - 1 | 0);
        Caml_missing_polyfill.not_implemented("caml_ml_input");
        Caml_missing_polyfill.not_implemented("caml_ml_input_char");
        if (accu) {
          var len$1 = (len + n | 0) - 1 | 0;
          return build_result(Caml_bytes.caml_create_bytes(len$1), len$1, /* :: */[
                      res,
                      accu
                    ]);
        } else {
          return res;
        }
      } else {
        var beg = Caml_bytes.caml_create_bytes(-n | 0);
        Caml_missing_polyfill.not_implemented("caml_ml_input");
        _len = len - n | 0;
        _accu = /* :: */[
          beg,
          accu
        ];
        continue ;
      }
    };
  };
  return Caml_bytes.bytes_to_string(scan(/* [] */0, 0));
}

function close_in_noerr(ic) {
  try {
    return Caml_missing_polyfill.not_implemented("caml_ml_close_channel");
  }
  catch (exn){
    return /* () */0;
  }
}

function print_char(c) {
  return Caml_io.caml_ml_output_char(stdout, c);
}

function print_string(s) {
  return output_string(stdout, s);
}

function print_bytes(s) {
  return output_bytes(stdout, s);
}

function print_int(i) {
  return output_string(stdout, String(i));
}

function print_float(f) {
  return output_string(stdout, valid_float_lexem(Caml_format.caml_format_float("%.12g", f)));
}

function print_newline(param) {
  Caml_io.caml_ml_output_char(stdout, /* "\n" */10);
  return Caml_io.caml_ml_flush(stdout);
}

function prerr_char(c) {
  return Caml_io.caml_ml_output_char(stderr, c);
}

function prerr_string(s) {
  return output_string(stderr, s);
}

function prerr_bytes(s) {
  return output_bytes(stderr, s);
}

function prerr_int(i) {
  return output_string(stderr, String(i));
}

function prerr_float(f) {
  return output_string(stderr, valid_float_lexem(Caml_format.caml_format_float("%.12g", f)));
}

function prerr_newline(param) {
  Caml_io.caml_ml_output_char(stderr, /* "\n" */10);
  return Caml_io.caml_ml_flush(stderr);
}

function read_line(param) {
  Caml_io.caml_ml_flush(stdout);
  return input_line(stdin);
}

function read_int(param) {
  return Caml_format.caml_int_of_string((Caml_io.caml_ml_flush(stdout), input_line(stdin)));
}

function read_float(param) {
  return Caml_format.caml_float_of_string((Caml_io.caml_ml_flush(stdout), input_line(stdin)));
}

function string_of_format(param) {
  return param[1];
}

function $caret$caret(param, param$1) {
  return /* Format */[
          CamlinternalFormatBasics.concat_fmt(param[0], param$1[0]),
          param[1] + ("%," + param$1[1])
        ];
}

var exit_function = /* record */[/* contents */flush_all];

function at_exit(f) {
  var g = exit_function[0];
  exit_function[0] = (function (param) {
      Curry._1(f, /* () */0);
      return Curry._1(g, /* () */0);
    });
  return /* () */0;
}

function do_at_exit(param) {
  return Curry._1(exit_function[0], /* () */0);
}

function exit(retcode) {
  do_at_exit(/* () */0);
  return Caml_sys.caml_sys_exit(retcode);
}

var max_int = 2147483647;

var epsilon_float = 2.220446049250313e-16;

var flush = Caml_io.caml_ml_flush;

var output_char = Caml_io.caml_ml_output_char;

var output_byte = Caml_io.caml_ml_output_char;

function output_binary_int(prim, prim$1) {
  return Caml_missing_polyfill.not_implemented("caml_ml_output_int");
}

function seek_out(prim, prim$1) {
  return Caml_missing_polyfill.not_implemented("caml_ml_seek_out");
}

function pos_out(prim) {
  return Caml_missing_polyfill.not_implemented("caml_ml_pos_out");
}

function out_channel_length(prim) {
  return Caml_missing_polyfill.not_implemented("caml_ml_channel_size");
}

function set_binary_mode_out(prim, prim$1) {
  return Caml_missing_polyfill.not_implemented("caml_ml_set_binary_mode");
}

function input_char(prim) {
  return Caml_missing_polyfill.not_implemented("caml_ml_input_char");
}

function input_byte(prim) {
  return Caml_missing_polyfill.not_implemented("caml_ml_input_char");
}

function input_binary_int(prim) {
  return Caml_missing_polyfill.not_implemented("caml_ml_input_int");
}

function input_value(prim) {
  return Caml_missing_polyfill.not_implemented("caml_input_value");
}

function seek_in(prim, prim$1) {
  return Caml_missing_polyfill.not_implemented("caml_ml_seek_in");
}

function pos_in(prim) {
  return Caml_missing_polyfill.not_implemented("caml_ml_pos_in");
}

function in_channel_length(prim) {
  return Caml_missing_polyfill.not_implemented("caml_ml_channel_size");
}

function close_in(prim) {
  return Caml_missing_polyfill.not_implemented("caml_ml_close_channel");
}

function set_binary_mode_in(prim, prim$1) {
  return Caml_missing_polyfill.not_implemented("caml_ml_set_binary_mode");
}

function LargeFile_000(prim, prim$1) {
  return Caml_missing_polyfill.not_implemented("caml_ml_seek_out_64");
}

function LargeFile_001(prim) {
  return Caml_missing_polyfill.not_implemented("caml_ml_pos_out_64");
}

function LargeFile_002(prim) {
  return Caml_missing_polyfill.not_implemented("caml_ml_channel_size_64");
}

function LargeFile_003(prim, prim$1) {
  return Caml_missing_polyfill.not_implemented("caml_ml_seek_in_64");
}

function LargeFile_004(prim) {
  return Caml_missing_polyfill.not_implemented("caml_ml_pos_in_64");
}

function LargeFile_005(prim) {
  return Caml_missing_polyfill.not_implemented("caml_ml_channel_size_64");
}

var LargeFile = [
  LargeFile_000,
  LargeFile_001,
  LargeFile_002,
  LargeFile_003,
  LargeFile_004,
  LargeFile_005
];

exports.invalid_arg = invalid_arg;
exports.failwith = failwith;
exports.Exit = Exit;
exports.abs = abs;
exports.max_int = max_int;
exports.min_int = min_int;
exports.lnot = lnot;
exports.epsilon_float = epsilon_float;
exports.classify_float = classify_float;
exports.char_of_int = char_of_int;
exports.string_of_bool = string_of_bool;
exports.bool_of_string = bool_of_string;
exports.string_of_float = string_of_float;
exports.$at = $at;
exports.stdin = stdin;
exports.stdout = stdout;
exports.stderr = stderr;
exports.print_char = print_char;
exports.print_string = print_string;
exports.print_bytes = print_bytes;
exports.print_int = print_int;
exports.print_float = print_float;
exports.print_newline = print_newline;
exports.prerr_char = prerr_char;
exports.prerr_string = prerr_string;
exports.prerr_bytes = prerr_bytes;
exports.prerr_int = prerr_int;
exports.prerr_float = prerr_float;
exports.prerr_newline = prerr_newline;
exports.read_line = read_line;
exports.read_int = read_int;
exports.read_float = read_float;
exports.open_out = open_out;
exports.open_out_bin = open_out_bin;
exports.open_out_gen = open_out_gen;
exports.flush = flush;
exports.flush_all = flush_all;
exports.output_char = output_char;
exports.output_string = output_string;
exports.output_bytes = output_bytes;
exports.output = output;
exports.output_substring = output_substring;
exports.output_byte = output_byte;
exports.output_binary_int = output_binary_int;
exports.output_value = output_value;
exports.seek_out = seek_out;
exports.pos_out = pos_out;
exports.out_channel_length = out_channel_length;
exports.close_out = close_out;
exports.close_out_noerr = close_out_noerr;
exports.set_binary_mode_out = set_binary_mode_out;
exports.open_in = open_in;
exports.open_in_bin = open_in_bin;
exports.open_in_gen = open_in_gen;
exports.input_char = input_char;
exports.input_line = input_line;
exports.input = input;
exports.really_input = really_input;
exports.really_input_string = really_input_string;
exports.input_byte = input_byte;
exports.input_binary_int = input_binary_int;
exports.input_value = input_value;
exports.seek_in = seek_in;
exports.pos_in = pos_in;
exports.in_channel_length = in_channel_length;
exports.close_in = close_in;
exports.close_in_noerr = close_in_noerr;
exports.set_binary_mode_in = set_binary_mode_in;
exports.LargeFile = LargeFile;
exports.string_of_format = string_of_format;
exports.$caret$caret = $caret$caret;
exports.exit = exit;
exports.at_exit = at_exit;
exports.valid_float_lexem = valid_float_lexem;
exports.unsafe_really_input = unsafe_really_input;
exports.do_at_exit = do_at_exit;
/* No side effect */

},{"./caml_builtin_exceptions.js":6,"./caml_bytes.js":7,"./caml_exceptions.js":8,"./caml_format.js":9,"./caml_io.js":12,"./caml_missing_polyfill.js":14,"./caml_string.js":18,"./caml_sys.js":19,"./camlinternalFormatBasics.js":22,"./curry.js":24}],27:[function(require,module,exports){
'use strict';

var Curry = require("./curry.js");
var $$Buffer = require("./buffer.js");
var Pervasives = require("./pervasives.js");
var CamlinternalFormat = require("./camlinternalFormat.js");

function kfprintf(k, o, param) {
  return CamlinternalFormat.make_printf((function (o, acc) {
                CamlinternalFormat.output_acc(o, acc);
                return Curry._1(k, o);
              }), o, /* End_of_acc */0, param[0]);
}

function kbprintf(k, b, param) {
  return CamlinternalFormat.make_printf((function (b, acc) {
                CamlinternalFormat.bufput_acc(b, acc);
                return Curry._1(k, b);
              }), b, /* End_of_acc */0, param[0]);
}

function ikfprintf(k, oc, param) {
  return CamlinternalFormat.make_printf((function (oc, param) {
                return Curry._1(k, oc);
              }), oc, /* End_of_acc */0, param[0]);
}

function fprintf(oc, fmt) {
  return kfprintf((function (prim) {
                return /* () */0;
              }), oc, fmt);
}

function bprintf(b, fmt) {
  return kbprintf((function (prim) {
                return /* () */0;
              }), b, fmt);
}

function ifprintf(oc, fmt) {
  return ikfprintf((function (prim) {
                return /* () */0;
              }), oc, fmt);
}

function printf(fmt) {
  return fprintf(Pervasives.stdout, fmt);
}

function eprintf(fmt) {
  return fprintf(Pervasives.stderr, fmt);
}

function ksprintf(k, param) {
  var k$prime = function (param, acc) {
    var buf = $$Buffer.create(64);
    CamlinternalFormat.strput_acc(buf, acc);
    return Curry._1(k, $$Buffer.contents(buf));
  };
  return CamlinternalFormat.make_printf(k$prime, /* () */0, /* End_of_acc */0, param[0]);
}

function sprintf(fmt) {
  return ksprintf((function (s) {
                return s;
              }), fmt);
}

var kprintf = ksprintf;

exports.fprintf = fprintf;
exports.printf = printf;
exports.eprintf = eprintf;
exports.sprintf = sprintf;
exports.bprintf = bprintf;
exports.ifprintf = ifprintf;
exports.kfprintf = kfprintf;
exports.ikfprintf = ikfprintf;
exports.ksprintf = ksprintf;
exports.kbprintf = kbprintf;
exports.kprintf = kprintf;
/* No side effect */

},{"./buffer.js":3,"./camlinternalFormat.js":21,"./curry.js":24,"./pervasives.js":26}],28:[function(require,module,exports){
'use strict';

var List = require("./list.js");
var Bytes = require("./bytes.js");
var Caml_bytes = require("./caml_bytes.js");
var Caml_int32 = require("./caml_int32.js");
var Caml_primitive = require("./caml_primitive.js");
var Caml_builtin_exceptions = require("./caml_builtin_exceptions.js");

function make(n, c) {
  return Caml_bytes.bytes_to_string(Bytes.make(n, c));
}

function init(n, f) {
  return Caml_bytes.bytes_to_string(Bytes.init(n, f));
}

function copy(s) {
  return Caml_bytes.bytes_to_string(Bytes.copy(Caml_bytes.bytes_of_string(s)));
}

function sub(s, ofs, len) {
  return Caml_bytes.bytes_to_string(Bytes.sub(Caml_bytes.bytes_of_string(s), ofs, len));
}

function concat(sep, l) {
  if (l) {
    var hd = l[0];
    var num = /* record */[/* contents */0];
    var len = /* record */[/* contents */0];
    List.iter((function (s) {
            num[0] = num[0] + 1 | 0;
            len[0] = len[0] + s.length | 0;
            return /* () */0;
          }), l);
    var r = Caml_bytes.caml_create_bytes(len[0] + Caml_int32.imul(sep.length, num[0] - 1 | 0) | 0);
    Caml_bytes.caml_blit_string(hd, 0, r, 0, hd.length);
    var pos = /* record */[/* contents */hd.length];
    List.iter((function (s) {
            Caml_bytes.caml_blit_string(sep, 0, r, pos[0], sep.length);
            pos[0] = pos[0] + sep.length | 0;
            Caml_bytes.caml_blit_string(s, 0, r, pos[0], s.length);
            pos[0] = pos[0] + s.length | 0;
            return /* () */0;
          }), l[1]);
    return Caml_bytes.bytes_to_string(r);
  } else {
    return "";
  }
}

function iter(f, s) {
  return Bytes.iter(f, Caml_bytes.bytes_of_string(s));
}

function iteri(f, s) {
  return Bytes.iteri(f, Caml_bytes.bytes_of_string(s));
}

function map(f, s) {
  return Caml_bytes.bytes_to_string(Bytes.map(f, Caml_bytes.bytes_of_string(s)));
}

function mapi(f, s) {
  return Caml_bytes.bytes_to_string(Bytes.mapi(f, Caml_bytes.bytes_of_string(s)));
}

function is_space(param) {
  var switcher = param - 9 | 0;
  if (switcher > 4 || switcher < 0) {
    return switcher === 23;
  } else {
    return switcher !== 2;
  }
}

function trim(s) {
  if (s === "" || !(is_space(s.charCodeAt(0)) || is_space(s.charCodeAt(s.length - 1 | 0)))) {
    return s;
  } else {
    return Caml_bytes.bytes_to_string(Bytes.trim(Caml_bytes.bytes_of_string(s)));
  }
}

function escaped(s) {
  var needs_escape = function (_i) {
    while(true) {
      var i = _i;
      if (i >= s.length) {
        return false;
      } else {
        var match = s.charCodeAt(i);
        if (match >= 32) {
          var switcher = match - 34 | 0;
          if (switcher > 58 || switcher < 0) {
            if (switcher >= 93) {
              return true;
            } else {
              _i = i + 1 | 0;
              continue ;
            }
          } else if (switcher > 57 || switcher < 1) {
            return true;
          } else {
            _i = i + 1 | 0;
            continue ;
          }
        } else {
          return true;
        }
      }
    };
  };
  if (needs_escape(0)) {
    return Caml_bytes.bytes_to_string(Bytes.escaped(Caml_bytes.bytes_of_string(s)));
  } else {
    return s;
  }
}

function index_rec(s, lim, _i, c) {
  while(true) {
    var i = _i;
    if (i >= lim) {
      throw Caml_builtin_exceptions.not_found;
    } else if (s.charCodeAt(i) === c) {
      return i;
    } else {
      _i = i + 1 | 0;
      continue ;
    }
  };
}

function index(s, c) {
  return index_rec(s, s.length, 0, c);
}

function index_from(s, i, c) {
  var l = s.length;
  if (i < 0 || i > l) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "String.index_from / Bytes.index_from"
        ];
  } else {
    return index_rec(s, l, i, c);
  }
}

function rindex_rec(s, _i, c) {
  while(true) {
    var i = _i;
    if (i < 0) {
      throw Caml_builtin_exceptions.not_found;
    } else if (s.charCodeAt(i) === c) {
      return i;
    } else {
      _i = i - 1 | 0;
      continue ;
    }
  };
}

function rindex(s, c) {
  return rindex_rec(s, s.length - 1 | 0, c);
}

function rindex_from(s, i, c) {
  if (i < -1 || i >= s.length) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "String.rindex_from / Bytes.rindex_from"
        ];
  } else {
    return rindex_rec(s, i, c);
  }
}

function contains_from(s, i, c) {
  var l = s.length;
  if (i < 0 || i > l) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "String.contains_from / Bytes.contains_from"
        ];
  } else {
    try {
      index_rec(s, l, i, c);
      return true;
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        return false;
      } else {
        throw exn;
      }
    }
  }
}

function contains(s, c) {
  return contains_from(s, 0, c);
}

function rcontains_from(s, i, c) {
  if (i < 0 || i >= s.length) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "String.rcontains_from / Bytes.rcontains_from"
        ];
  } else {
    try {
      rindex_rec(s, i, c);
      return true;
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        return false;
      } else {
        throw exn;
      }
    }
  }
}

function uppercase(s) {
  return Caml_bytes.bytes_to_string(Bytes.uppercase(Caml_bytes.bytes_of_string(s)));
}

function lowercase(s) {
  return Caml_bytes.bytes_to_string(Bytes.lowercase(Caml_bytes.bytes_of_string(s)));
}

function capitalize(s) {
  return Caml_bytes.bytes_to_string(Bytes.capitalize(Caml_bytes.bytes_of_string(s)));
}

function uncapitalize(s) {
  return Caml_bytes.bytes_to_string(Bytes.uncapitalize(Caml_bytes.bytes_of_string(s)));
}

var compare = Caml_primitive.caml_string_compare;

var fill = Bytes.fill;

var blit = Bytes.blit_string;

exports.make = make;
exports.init = init;
exports.copy = copy;
exports.sub = sub;
exports.fill = fill;
exports.blit = blit;
exports.concat = concat;
exports.iter = iter;
exports.iteri = iteri;
exports.map = map;
exports.mapi = mapi;
exports.trim = trim;
exports.escaped = escaped;
exports.index = index;
exports.rindex = rindex;
exports.index_from = index_from;
exports.rindex_from = rindex_from;
exports.contains = contains;
exports.contains_from = contains_from;
exports.rcontains_from = rcontains_from;
exports.uppercase = uppercase;
exports.lowercase = lowercase;
exports.capitalize = capitalize;
exports.uncapitalize = uncapitalize;
exports.compare = compare;
/* No side effect */

},{"./bytes.js":4,"./caml_builtin_exceptions.js":6,"./caml_bytes.js":7,"./caml_int32.js":10,"./caml_primitive.js":17,"./list.js":25}],29:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],30:[function(require,module,exports){
// Generated by BUCKLESCRIPT VERSION 5.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

function isEmpty(param) {
  if (param) {
    return false;
  } else {
    return true;
  }
}

function rank(param) {
  return param[0];
}

function root(param) {
  return param[1];
}

function link(t1, t2) {
  var x2 = t2[1];
  var x1 = t1[1];
  var r = t1[0];
  if (x1 <= x2) {
    return /* Node */[
            r + 1 | 0,
            x1,
            t1[2],
            /* :: */[
              t2,
              t1[3]
            ]
          ];
  } else {
    return /* Node */[
            r + 1 | 0,
            x2,
            t2[2],
            /* :: */[
              t1,
              t2[3]
            ]
          ];
  }
}

function skewLink(x, t1, t2) {
  var match = link(t1, t2);
  var c = match[3];
  var ys = match[2];
  var y = match[1];
  var r = match[0];
  if (x <= y) {
    return /* Node */[
            r,
            x,
            /* :: */[
              y,
              ys
            ],
            c
          ];
  } else {
    return /* Node */[
            r,
            y,
            /* :: */[
              x,
              ys
            ],
            c
          ];
  }
}

function insTree(_t1, _t2) {
  while(true) {
    var t2 = _t2;
    var t1 = _t1;
    if (t2) {
      var ts = t2[1];
      var t2$1 = t2[0];
      if (rank(t1) < rank(t2$1)) {
        return /* :: */[
                t1,
                /* :: */[
                  t2$1,
                  ts
                ]
              ];
      } else {
        _t2 = ts;
        _t1 = link(t1, t2$1);
        continue ;
      }
    } else {
      return /* :: */[
              t1,
              /* [] */0
            ];
    }
  };
}

function mergeTrees(param) {
  var ts1 = param[0];
  if (param[1]) {
    if (ts1) {
      var ts2 = param[1];
      var ts2_ = ts2[1];
      var t2 = ts2[0];
      var ts1_ = ts1[1];
      var t1 = ts1[0];
      if (rank(t1) < rank(t2)) {
        return /* :: */[
                t1,
                mergeTrees(/* tuple */[
                      ts1_,
                      ts2
                    ])
              ];
      } else if (rank(t2) < rank(t1)) {
        return /* :: */[
                t2,
                mergeTrees(/* tuple */[
                      ts1,
                      ts2_
                    ])
              ];
      } else {
        return insTree(link(t1, t2), mergeTrees(/* tuple */[
                        ts1_,
                        ts2_
                      ]));
      }
    } else {
      return param[1];
    }
  } else {
    return ts1;
  }
}

function normalize(param) {
  if (param) {
    return insTree(param[0], param[1]);
  } else {
    return /* [] */0;
  }
}

function insert(x, ts) {
  var exit = 0;
  if (ts) {
    var match = ts[1];
    if (match) {
      var t2 = match[0];
      var t1 = ts[0];
      if (rank(t1) === rank(t2)) {
        return /* :: */[
                skewLink(x, t1, t2),
                match[1]
              ];
      } else {
        exit = 1;
      }
    } else {
      exit = 1;
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    return /* :: */[
            /* Node */[
              0,
              x,
              /* [] */0,
              /* [] */0
            ],
            ts
          ];
  }
  
}

function merge(ts1, ts2) {
  return mergeTrees(/* tuple */[
              normalize(ts1),
              normalize(ts2)
            ]);
}

var Empty = Caml_exceptions.create("Heap.Empty");

function removeMinTree(param) {
  if (param) {
    var ts = param[1];
    var t = param[0];
    if (ts) {
      var match = removeMinTree(ts);
      var t_ = match[0];
      if (root(t) < root(t_)) {
        return /* tuple */[
                t,
                ts
              ];
      } else {
        return /* tuple */[
                t_,
                /* :: */[
                  t,
                  match[1]
                ]
              ];
      }
    } else {
      return /* tuple */[
              t,
              /* [] */0
            ];
    }
  } else {
    throw Empty;
  }
}

function deleteMin(ts) {
  var match = removeMinTree(ts);
  var match$1 = match[0];
  var _param = /* tuple */[
    match$1[2],
    merge(List.rev(match$1[3]), match[1])
  ];
  while(true) {
    var param = _param;
    var match$2 = param[0];
    if (match$2) {
      _param = /* tuple */[
        match$2[1],
        insert(match$2[0], param[1])
      ];
      continue ;
    } else {
      return param[1];
    }
  };
}

function js_of_tree(param) {
  return {
          text: {
            title: String(param[1]),
            name: Curry._2(Printf.sprintf(/* Format */[
                      /* String_literal */Block.__(11, [
                          "rank=",
                          /* Int */Block.__(4, [
                              /* Int_d */0,
                              /* No_padding */0,
                              /* No_precision */0,
                              /* String_literal */Block.__(11, [
                                  " aux=[",
                                  /* String */Block.__(2, [
                                      /* No_padding */0,
                                      /* Char_literal */Block.__(12, [
                                          /* "]" */93,
                                          /* End_of_format */0
                                        ])
                                    ])
                                ])
                            ])
                        ]),
                      "rank=%d aux=[%s]"
                    ]), param[0], $$String.concat(",", List.map((function (prim) {
                            return String(prim);
                          }), param[2])))
          },
          children: List.map(js_of_tree, param[3])
        };
}

function js_of_heap(param) {
  return List.map(js_of_tree, param);
}

function json_of_tree(param) {
  var r = param[0];
  return Curry._4(Printf.sprintf(/* Format */[
                  /* String_literal */Block.__(11, [
                      "{\"rank\": ",
                      /* Int */Block.__(4, [
                          /* Int_d */0,
                          /* No_padding */0,
                          /* No_precision */0,
                          /* String_literal */Block.__(11, [
                              ", \"text\": {\"title\": \"",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* String_literal */Block.__(11, [
                                      "\", \"name\": \"",
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* String_literal */Block.__(11, [
                                              "\"}, \"children\":[",
                                              /* String */Block.__(2, [
                                                  /* No_padding */0,
                                                  /* String_literal */Block.__(11, [
                                                      "]}",
                                                      /* End_of_format */0
                                                    ])
                                                ])
                                            ])
                                        ])
                                    ])
                                ])
                            ])
                        ])
                    ]),
                  "{\"rank\": %d, \"text\": {\"title\": \"%s\", \"name\": \"%s\"}, \"children\":[%s]}"
                ]), r, String(param[1]), Curry._2(Printf.sprintf(/* Format */[
                      /* String_literal */Block.__(11, [
                          "rank=",
                          /* Int */Block.__(4, [
                              /* Int_d */0,
                              /* No_padding */0,
                              /* No_precision */0,
                              /* String_literal */Block.__(11, [
                                  " aux=[",
                                  /* String */Block.__(2, [
                                      /* No_padding */0,
                                      /* Char_literal */Block.__(12, [
                                          /* "]" */93,
                                          /* End_of_format */0
                                        ])
                                    ])
                                ])
                            ])
                        ]),
                      "rank=%d aux=[%s]"
                    ]), r, $$String.concat(",", List.map((function (prim) {
                            return String(prim);
                          }), param[2]))), $$String.concat(",", List.map(json_of_tree, param[3])));
}

function json_of_heap(ts) {
  return "[" + ($$String.concat(",", List.map(json_of_tree, ts)) + "]");
}

var empty = /* [] */0;

exports.empty = empty;
exports.isEmpty = isEmpty;
exports.rank = rank;
exports.root = root;
exports.link = link;
exports.skewLink = skewLink;
exports.insTree = insTree;
exports.mergeTrees = mergeTrees;
exports.normalize = normalize;
exports.insert = insert;
exports.merge = merge;
exports.Empty = Empty;
exports.removeMinTree = removeMinTree;
exports.deleteMin = deleteMin;
exports.js_of_tree = js_of_tree;
exports.js_of_heap = js_of_heap;
exports.json_of_tree = json_of_tree;
exports.json_of_heap = json_of_heap;
/* No side effect */

},{"bs-platform/lib/js/block.js":2,"bs-platform/lib/js/caml_exceptions.js":8,"bs-platform/lib/js/curry.js":24,"bs-platform/lib/js/list.js":25,"bs-platform/lib/js/printf.js":27,"bs-platform/lib/js/string.js":28}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJtYWluLmpzIiwibm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9qcy9ibG9jay5qcyIsIm5vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvanMvYnVmZmVyLmpzIiwibm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9qcy9ieXRlcy5qcyIsIm5vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvanMvY2FtbF9hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvanMvY2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuanMiLCJub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2pzL2NhbWxfYnl0ZXMuanMiLCJub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2pzL2NhbWxfZXhjZXB0aW9ucy5qcyIsIm5vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvanMvY2FtbF9mb3JtYXQuanMiLCJub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2pzL2NhbWxfaW50MzIuanMiLCJub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2pzL2NhbWxfaW50NjQuanMiLCJub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2pzL2NhbWxfaW8uanMiLCJub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2pzL2NhbWxfanNfZXhjZXB0aW9ucy5qcyIsIm5vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvanMvY2FtbF9taXNzaW5nX3BvbHlmaWxsLmpzIiwibm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9qcy9jYW1sX29iai5qcyIsIm5vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvanMvY2FtbF9vcHRpb24uanMiLCJub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2pzL2NhbWxfcHJpbWl0aXZlLmpzIiwibm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9qcy9jYW1sX3N0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvanMvY2FtbF9zeXMuanMiLCJub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2pzL2NhbWxfdXRpbHMuanMiLCJub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2pzL2NhbWxpbnRlcm5hbEZvcm1hdC5qcyIsIm5vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvanMvY2FtbGludGVybmFsRm9ybWF0QmFzaWNzLmpzIiwibm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9qcy9jaGFyLmpzIiwibm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9qcy9jdXJyeS5qcyIsIm5vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvanMvbGlzdC5qcyIsIm5vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvanMvcGVydmFzaXZlcy5qcyIsIm5vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvanMvcHJpbnRmLmpzIiwibm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9qcy9zdHJpbmcuanMiLCJub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwib2NhbWwvaGVhcC5icy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDclZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVlQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5SEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2h6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDaG1CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUN0RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcmVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDdkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQy9GQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzF0TUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcE9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcGpCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN2tEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5b0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbFJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeExBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJ2YXIgSGVhcCA9IHJlcXVpcmUoJy4vb2NhbWwvaGVhcC5icy5qcycpO1xuXG5cbmZ1bmN0aW9uIHJlbmRlciAobywgcm9vdCkge1xuICAgIHZhciBlID0gJCgnPGRpdiBzdHlsZT1cImRpc3BsYXk6ZmxleDsgZmxleC1kaXJlY3Rpb246aG9yaXpvbnRhbFwiPicpO1xuICAgIHJvb3QuYXBwZW5kKGUpO1xuICAgIG8uZm9yRWFjaChmdW5jdGlvbiAodHJlZSwgaSkge1xuICAgICAgICB2YXIgYyA9ICQoJzxkaXY+JykuYXR0cignaWQnLCAnSEVBUFRSRUUnK2kpO1xuICAgICAgICBlLmFwcGVuZChjKTtcblxuICAgICAgICB2YXIgd2lkdGggPSAxNTAqKHRyZWUucmFuaysxKTtcbiAgICAgICAgYy5jc3MoJ3dpZHRoJywgJycrd2lkdGgrJ3B4Jyk7XG4gICAgICAgIGMuY3NzKCdoZWlnaHQnLCAnNjAwcHgnKTtcblxuICAgICAgICBuZXcgVHJlYW50KHtjaGFydDoge2NvbnRhaW5lcjogJyNIRUFQVFJFRScraSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZUFsaWduOiAnVE9QJ30sIC8vIG5vdCBlZmZlY3RpdmVcbiAgICAgICAgICAgICAgICAgICAgbm9kZVN0cnVjdHVyZTogdHJlZX0pOyBcblxuICAgIH0pO1xuXG59XG5cbmZ1bmN0aW9uIG1haW4gKCkge1xuICAgIHZhciBoID0gSGVhcC5lbXB0eTtcbiAgICB2YXIgcm9vdCA9ICQoJyNoZWFwJyk7XG4gICAgdmFyIGhpc3RvcnkgPSAkKCcjaGlzdG9yeScpO1xuICAgIHZhciBjdXJyZW50ID0gLTE7XG5cbiAgICBmdW5jdGlvbiByZXJlbmRlciAoKSB7XG4gICAgICAgIHJvb3QuZW1wdHkoKTtcbiAgICAgICAgdmFyIG8gPSBKU09OLnBhcnNlKEhlYXAuanNvbl9vZl9oZWFwKGgpKTtcbiAgICAgICAgY29uc29sZS5sb2coJ3JlcmVuZGVyJywgSlNPTi5zdHJpbmdpZnkobykpO1xuICAgICAgICByZW5kZXIobywgcm9vdCk7XG4gICAgfVxuXG4gICAgcmVyZW5kZXIoKTtcblxuICAgICQoJyNpbnNlcnQnKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpbnB1dCA9ICQoJyNpbnB1dC12YWx1ZScpO1xuICAgICAgICB2YXIgdiA9IE51bWJlcihpbnB1dC52YWwoKSk7XG4gICAgICAgIGggPSBIZWFwLmluc2VydCh2LCBoKTtcbiAgICAgICAgaW5wdXQudmFsKHYrMSk7XG4gICAgICAgIHJlcmVuZGVyKCk7XG4gICAgICAgIHB1c2hIaXN0b3J5KCdpbnNlcnQgJyt2LCBoKTtcbiAgICB9KTtcblxuICAgICQoJyNkZWxldGVNaW4nKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGggPSBIZWFwLmRlbGV0ZU1pbihoKTtcbiAgICAgICAgcmVyZW5kZXIoKTtcbiAgICAgICAgcHVzaEhpc3RvcnkoJ2RlbGV0ZU1pbicsIGgpO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gcHVzaEhpc3RvcnkgKHRleHQsIGhlYXApIHtcbiAgICAgICAgaGlzdG9yeS5jaGlsZHJlbigpLnNsaWNlKGN1cnJlbnQrMSkucmVtb3ZlKCk7XG4gICAgICAgIGN1cnJlbnQgKz0gMTtcbiAgICAgICAgaGlzdG9yeS5hcHBlbmQoJCgnPHNwYW4+JykudGV4dCh0ZXh0KS5kYXRhKCdoZWFwJywgaGVhcCkuZGF0YSgnaW5kZXgnLCBjdXJyZW50KSk7XG4gICAgfVxuXG4gICAgJCgnI2hpc3RvcnknKS5vbignY2xpY2snLCAnc3BhbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaCA9ICQodGhpcykuZGF0YSgnaGVhcCcpO1xuICAgICAgICBjdXJyZW50ID0gJCh0aGlzKS5kYXRhKCdpbmRleCcpO1xuICAgICAgICByZXJlbmRlcigpO1xuICAgIH0pO1xufVxuXG4kKG1haW4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5cbmZ1bmN0aW9uIF9fKHRhZywgYmxvY2spIHtcbiAgYmxvY2sudGFnID0gdGFnO1xuICByZXR1cm4gYmxvY2s7XG59XG5cbmZ1bmN0aW9uIHJlY29yZChtZXRhLCB4cykge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHhzLCBTeW1ib2wuZm9yKFwiQnNSZWNvcmRcIiksIHtcbiAgICAgICAgICAgICAgdmFsdWU6IG1ldGFcbiAgICAgICAgICAgIH0pO1xufVxuXG5mdW5jdGlvbiB2YXJpYW50KG1ldGEsIHRhZywgeHMpIHtcbiAgeHMudGFnID0gdGFnO1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHhzLCBTeW1ib2wuZm9yKFwiQnNWYXJpYW50XCIpLCB7XG4gICAgICAgICAgICAgIHZhbHVlOiBtZXRhXG4gICAgICAgICAgICB9KTtcbn1cblxuZnVuY3Rpb24gc2ltcGxlVmFyaWFudChtZXRhLCB4cykge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHhzLCBTeW1ib2wuZm9yKFwiQnNWYXJpYW50XCIpLCB7XG4gICAgICAgICAgICAgIHZhbHVlOiBtZXRhXG4gICAgICAgICAgICB9KTtcbn1cblxuZnVuY3Rpb24gbG9jYWxNb2R1bGUobWV0YSwgeHMpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh4cywgU3ltYm9sLmZvcihcIkJzTG9jYWxNb2R1bGVcIiksIHtcbiAgICAgICAgICAgICAgdmFsdWU6IG1ldGFcbiAgICAgICAgICAgIH0pO1xufVxuXG5mdW5jdGlvbiBwb2x5VmFyKG1ldGEsIHhzKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoeHMsIFN5bWJvbC5mb3IoXCJCc1BvbHlWYXJcIiksIHtcbiAgICAgICAgICAgICAgdmFsdWU6IG1ldGFcbiAgICAgICAgICAgIH0pO1xufVxuXG5mdW5jdGlvbiBzcGxpY2VBcHBseSAoZm4sYXJncyl7XG4gIHZhciBpLCBhcmdMZW47IFxuICBhcmdMZW4gPSBhcmdzLmxlbmd0aFxuICB2YXIgYXBwbGllZCA9IFtdXG4gIGZvcihpID0gMDsgaSA8IGFyZ0xlbiAtIDE7ICsraSl7XG4gICAgYXBwbGllZC5wdXNoKGFyZ3NbaV0pXG4gIH1cbiAgdmFyIGxhc3RPbmUgPSBhcmdzW2FyZ0xlbiAtIDFdXG4gIGZvcihpID0gMDsgaSA8IGxhc3RPbmUubGVuZ3RoOyArK2kgKXtcbiAgICBhcHBsaWVkLnB1c2gobGFzdE9uZVtpXSlcbiAgfVxuICByZXR1cm4gZm4uYXBwbHkobnVsbCxhcHBsaWVkKVxufTtcblxuZnVuY3Rpb24gc3BsaWNlT2JqQXBwbHkgKG9iaixuYW1lLGFyZ3Mpe1xuICB2YXIgaSwgYXJnTGVuOyBcbiAgYXJnTGVuID0gYXJncy5sZW5ndGhcbiAgdmFyIGFwcGxpZWQgPSBbXVxuICBmb3IoaSA9IDA7IGkgPCBhcmdMZW4gLSAxOyArK2kpe1xuICAgIGFwcGxpZWQucHVzaChhcmdzW2ldKVxuICB9XG4gIHZhciBsYXN0T25lID0gYXJnc1thcmdMZW4gLSAxXVxuICBmb3IoaSA9IDA7IGkgPCBsYXN0T25lLmxlbmd0aDsgKytpICl7XG4gICAgYXBwbGllZC5wdXNoKGxhc3RPbmVbaV0pXG4gIH1cbiAgcmV0dXJuIChvYmpbbmFtZV0pLmFwcGx5KG9iaixhcHBsaWVkKVxufTtcblxuZXhwb3J0cy5fXyA9IF9fO1xuZXhwb3J0cy5yZWNvcmQgPSByZWNvcmQ7XG5leHBvcnRzLnZhcmlhbnQgPSB2YXJpYW50O1xuZXhwb3J0cy5zaW1wbGVWYXJpYW50ID0gc2ltcGxlVmFyaWFudDtcbmV4cG9ydHMubG9jYWxNb2R1bGUgPSBsb2NhbE1vZHVsZTtcbmV4cG9ydHMucG9seVZhciA9IHBvbHlWYXI7XG5leHBvcnRzLnNwbGljZUFwcGx5ID0gc3BsaWNlQXBwbHk7XG5leHBvcnRzLnNwbGljZU9iakFwcGx5ID0gc3BsaWNlT2JqQXBwbHk7XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQnl0ZXMgPSByZXF1aXJlKFwiLi9ieXRlcy5qc1wiKTtcbnZhciBDdXJyeSA9IHJlcXVpcmUoXCIuL2N1cnJ5LmpzXCIpO1xudmFyICQkU3RyaW5nID0gcmVxdWlyZShcIi4vc3RyaW5nLmpzXCIpO1xudmFyIENhbWxfYnl0ZXMgPSByZXF1aXJlKFwiLi9jYW1sX2J5dGVzLmpzXCIpO1xudmFyIFBlcnZhc2l2ZXMgPSByZXF1aXJlKFwiLi9wZXJ2YXNpdmVzLmpzXCIpO1xudmFyIENhbWxfc3RyaW5nID0gcmVxdWlyZShcIi4vY2FtbF9zdHJpbmcuanNcIik7XG52YXIgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMgPSByZXF1aXJlKFwiLi9jYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5qc1wiKTtcblxuZnVuY3Rpb24gY3JlYXRlKG4pIHtcbiAgdmFyIG4kMSA9IG4gPCAxID8gMSA6IG47XG4gIHZhciBzID0gQ2FtbF9ieXRlcy5jYW1sX2NyZWF0ZV9ieXRlcyhuJDEpO1xuICByZXR1cm4gLyogcmVjb3JkICovW1xuICAgICAgICAgIC8qIGJ1ZmZlciAqL3MsXG4gICAgICAgICAgLyogcG9zaXRpb24gKi8wLFxuICAgICAgICAgIC8qIGxlbmd0aCAqL24kMSxcbiAgICAgICAgICAvKiBpbml0aWFsX2J1ZmZlciAqL3NcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gY29udGVudHMoYikge1xuICByZXR1cm4gQnl0ZXMuc3ViX3N0cmluZyhiWy8qIGJ1ZmZlciAqLzBdLCAwLCBiWy8qIHBvc2l0aW9uICovMV0pO1xufVxuXG5mdW5jdGlvbiB0b19ieXRlcyhiKSB7XG4gIHJldHVybiBCeXRlcy5zdWIoYlsvKiBidWZmZXIgKi8wXSwgMCwgYlsvKiBwb3NpdGlvbiAqLzFdKTtcbn1cblxuZnVuY3Rpb24gc3ViKGIsIG9mcywgbGVuKSB7XG4gIGlmIChvZnMgPCAwIHx8IGxlbiA8IDAgfHwgb2ZzID4gKGJbLyogcG9zaXRpb24gKi8xXSAtIGxlbiB8IDApKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJCdWZmZXIuc3ViXCJcbiAgICAgICAgXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQnl0ZXMuc3ViX3N0cmluZyhiWy8qIGJ1ZmZlciAqLzBdLCBvZnMsIGxlbik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYmxpdChzcmMsIHNyY29mZiwgZHN0LCBkc3RvZmYsIGxlbikge1xuICBpZiAobGVuIDwgMCB8fCBzcmNvZmYgPCAwIHx8IHNyY29mZiA+IChzcmNbLyogcG9zaXRpb24gKi8xXSAtIGxlbiB8IDApIHx8IGRzdG9mZiA8IDAgfHwgZHN0b2ZmID4gKGRzdC5sZW5ndGggLSBsZW4gfCAwKSkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiQnVmZmVyLmJsaXRcIlxuICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBCeXRlcy5ibGl0KHNyY1svKiBidWZmZXIgKi8wXSwgc3Jjb2ZmLCBkc3QsIGRzdG9mZiwgbGVuKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBudGgoYiwgb2ZzKSB7XG4gIGlmIChvZnMgPCAwIHx8IG9mcyA+PSBiWy8qIHBvc2l0aW9uICovMV0pIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIkJ1ZmZlci5udGhcIlxuICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBiWy8qIGJ1ZmZlciAqLzBdW29mc107XG4gIH1cbn1cblxuZnVuY3Rpb24gbGVuZ3RoKGIpIHtcbiAgcmV0dXJuIGJbLyogcG9zaXRpb24gKi8xXTtcbn1cblxuZnVuY3Rpb24gY2xlYXIoYikge1xuICBiWy8qIHBvc2l0aW9uICovMV0gPSAwO1xuICByZXR1cm4gLyogKCkgKi8wO1xufVxuXG5mdW5jdGlvbiByZXNldChiKSB7XG4gIGJbLyogcG9zaXRpb24gKi8xXSA9IDA7XG4gIGJbLyogYnVmZmVyICovMF0gPSBiWy8qIGluaXRpYWxfYnVmZmVyICovM107XG4gIGJbLyogbGVuZ3RoICovMl0gPSBiWy8qIGJ1ZmZlciAqLzBdLmxlbmd0aDtcbiAgcmV0dXJuIC8qICgpICovMDtcbn1cblxuZnVuY3Rpb24gcmVzaXplKGIsIG1vcmUpIHtcbiAgdmFyIGxlbiA9IGJbLyogbGVuZ3RoICovMl07XG4gIHZhciBuZXdfbGVuID0gbGVuO1xuICB3aGlsZSgoYlsvKiBwb3NpdGlvbiAqLzFdICsgbW9yZSB8IDApID4gbmV3X2xlbikge1xuICAgIG5ld19sZW4gPSAobmV3X2xlbiA8PCAxKTtcbiAgfTtcbiAgdmFyIG5ld19idWZmZXIgPSBDYW1sX2J5dGVzLmNhbWxfY3JlYXRlX2J5dGVzKG5ld19sZW4pO1xuICBCeXRlcy5ibGl0KGJbLyogYnVmZmVyICovMF0sIDAsIG5ld19idWZmZXIsIDAsIGJbLyogcG9zaXRpb24gKi8xXSk7XG4gIGJbLyogYnVmZmVyICovMF0gPSBuZXdfYnVmZmVyO1xuICBiWy8qIGxlbmd0aCAqLzJdID0gbmV3X2xlbjtcbiAgcmV0dXJuIC8qICgpICovMDtcbn1cblxuZnVuY3Rpb24gYWRkX2NoYXIoYiwgYykge1xuICB2YXIgcG9zID0gYlsvKiBwb3NpdGlvbiAqLzFdO1xuICBpZiAocG9zID49IGJbLyogbGVuZ3RoICovMl0pIHtcbiAgICByZXNpemUoYiwgMSk7XG4gIH1cbiAgYlsvKiBidWZmZXIgKi8wXVtwb3NdID0gYztcbiAgYlsvKiBwb3NpdGlvbiAqLzFdID0gcG9zICsgMSB8IDA7XG4gIHJldHVybiAvKiAoKSAqLzA7XG59XG5cbmZ1bmN0aW9uIGFkZF9zdWJzdHJpbmcoYiwgcywgb2Zmc2V0LCBsZW4pIHtcbiAgaWYgKG9mZnNldCA8IDAgfHwgbGVuIDwgMCB8fCAob2Zmc2V0ICsgbGVuIHwgMCkgPiBzLmxlbmd0aCkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiQnVmZmVyLmFkZF9zdWJzdHJpbmcvYWRkX3N1YmJ5dGVzXCJcbiAgICAgICAgXTtcbiAgfVxuICB2YXIgbmV3X3Bvc2l0aW9uID0gYlsvKiBwb3NpdGlvbiAqLzFdICsgbGVuIHwgMDtcbiAgaWYgKG5ld19wb3NpdGlvbiA+IGJbLyogbGVuZ3RoICovMl0pIHtcbiAgICByZXNpemUoYiwgbGVuKTtcbiAgfVxuICBCeXRlcy5ibGl0X3N0cmluZyhzLCBvZmZzZXQsIGJbLyogYnVmZmVyICovMF0sIGJbLyogcG9zaXRpb24gKi8xXSwgbGVuKTtcbiAgYlsvKiBwb3NpdGlvbiAqLzFdID0gbmV3X3Bvc2l0aW9uO1xuICByZXR1cm4gLyogKCkgKi8wO1xufVxuXG5mdW5jdGlvbiBhZGRfc3ViYnl0ZXMoYiwgcywgb2Zmc2V0LCBsZW4pIHtcbiAgcmV0dXJuIGFkZF9zdWJzdHJpbmcoYiwgQ2FtbF9ieXRlcy5ieXRlc190b19zdHJpbmcocyksIG9mZnNldCwgbGVuKTtcbn1cblxuZnVuY3Rpb24gYWRkX3N0cmluZyhiLCBzKSB7XG4gIHZhciBsZW4gPSBzLmxlbmd0aDtcbiAgdmFyIG5ld19wb3NpdGlvbiA9IGJbLyogcG9zaXRpb24gKi8xXSArIGxlbiB8IDA7XG4gIGlmIChuZXdfcG9zaXRpb24gPiBiWy8qIGxlbmd0aCAqLzJdKSB7XG4gICAgcmVzaXplKGIsIGxlbik7XG4gIH1cbiAgQnl0ZXMuYmxpdF9zdHJpbmcocywgMCwgYlsvKiBidWZmZXIgKi8wXSwgYlsvKiBwb3NpdGlvbiAqLzFdLCBsZW4pO1xuICBiWy8qIHBvc2l0aW9uICovMV0gPSBuZXdfcG9zaXRpb247XG4gIHJldHVybiAvKiAoKSAqLzA7XG59XG5cbmZ1bmN0aW9uIGFkZF9ieXRlcyhiLCBzKSB7XG4gIHJldHVybiBhZGRfc3RyaW5nKGIsIENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nKHMpKTtcbn1cblxuZnVuY3Rpb24gYWRkX2J1ZmZlcihiLCBicykge1xuICByZXR1cm4gYWRkX3N1YmJ5dGVzKGIsIGJzWy8qIGJ1ZmZlciAqLzBdLCAwLCBic1svKiBwb3NpdGlvbiAqLzFdKTtcbn1cblxuZnVuY3Rpb24gYWRkX2NoYW5uZWwoYiwgaWMsIGxlbikge1xuICBpZiAobGVuIDwgMCkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiQnVmZmVyLmFkZF9jaGFubmVsXCJcbiAgICAgICAgXTtcbiAgfVxuICBpZiAoKGJbLyogcG9zaXRpb24gKi8xXSArIGxlbiB8IDApID4gYlsvKiBsZW5ndGggKi8yXSkge1xuICAgIHJlc2l6ZShiLCBsZW4pO1xuICB9XG4gIFBlcnZhc2l2ZXMucmVhbGx5X2lucHV0KGljLCBiWy8qIGJ1ZmZlciAqLzBdLCBiWy8qIHBvc2l0aW9uICovMV0sIGxlbik7XG4gIGJbLyogcG9zaXRpb24gKi8xXSA9IGJbLyogcG9zaXRpb24gKi8xXSArIGxlbiB8IDA7XG4gIHJldHVybiAvKiAoKSAqLzA7XG59XG5cbmZ1bmN0aW9uIG91dHB1dF9idWZmZXIob2MsIGIpIHtcbiAgcmV0dXJuIFBlcnZhc2l2ZXMub3V0cHV0KG9jLCBiWy8qIGJ1ZmZlciAqLzBdLCAwLCBiWy8qIHBvc2l0aW9uICovMV0pO1xufVxuXG5mdW5jdGlvbiBjbG9zaW5nKHBhcmFtKSB7XG4gIGlmIChwYXJhbSAhPT0gNDApIHtcbiAgICBpZiAocGFyYW0gIT09IDEyMykge1xuICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuYXNzZXJ0X2ZhaWx1cmUsXG4gICAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgXCJidWZmZXIubWxcIixcbiAgICAgICAgICAgICAgMTI2LFxuICAgICAgICAgICAgICA5XG4gICAgICAgICAgICBdXG4gICAgICAgICAgXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIFwifVwiICovMTI1O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogXCIpXCIgKi80MTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhZHZhbmNlX3RvX2Nsb3Npbmcob3BlbmluZywgY2xvc2luZywgaywgcywgc3RhcnQpIHtcbiAgdmFyIF9rID0gaztcbiAgdmFyIF9pID0gc3RhcnQ7XG4gIHZhciBsaW0gPSBzLmxlbmd0aDtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBpID0gX2k7XG4gICAgdmFyIGskMSA9IF9rO1xuICAgIGlmIChpID49IGxpbSkge1xuICAgICAgdGhyb3cgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMubm90X2ZvdW5kO1xuICAgIH0gZWxzZSBpZiAoQ2FtbF9zdHJpbmcuZ2V0KHMsIGkpID09PSBvcGVuaW5nKSB7XG4gICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgIF9rID0gayQxICsgMSB8IDA7XG4gICAgICBjb250aW51ZSA7XG4gICAgfSBlbHNlIGlmIChDYW1sX3N0cmluZy5nZXQocywgaSkgPT09IGNsb3NpbmcpIHtcbiAgICAgIGlmIChrJDEgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgICAgX2sgPSBrJDEgLSAxIHwgMDtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFkdmFuY2VfdG9fbm9uX2FscGhhKHMsIHN0YXJ0KSB7XG4gIHZhciBfaSA9IHN0YXJ0O1xuICB2YXIgbGltID0gcy5sZW5ndGg7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgaSA9IF9pO1xuICAgIGlmIChpID49IGxpbSkge1xuICAgICAgcmV0dXJuIGxpbTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG1hdGNoID0gQ2FtbF9zdHJpbmcuZ2V0KHMsIGkpO1xuICAgICAgdmFyIGV4aXQgPSAwO1xuICAgICAgaWYgKG1hdGNoID49IDkxKSB7XG4gICAgICAgIGlmIChtYXRjaCA+PSA5Nykge1xuICAgICAgICAgIGlmIChtYXRjaCA+PSAxMjMpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobWF0Y2ggIT09IDk1KSB7XG4gICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobWF0Y2ggPj0gNTgpIHtcbiAgICAgICAgaWYgKG1hdGNoID49IDY1KSB7XG4gICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobWF0Y2ggPj0gNDgpIHtcbiAgICAgICAgZXhpdCA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaTtcbiAgICAgIH1cbiAgICAgIGlmIChleGl0ID09PSAxKSB7XG4gICAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgICBcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZpbmRfaWRlbnQocywgc3RhcnQsIGxpbSkge1xuICBpZiAoc3RhcnQgPj0gbGltKSB7XG4gICAgdGhyb3cgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMubm90X2ZvdW5kO1xuICB9IGVsc2Uge1xuICAgIHZhciBjID0gQ2FtbF9zdHJpbmcuZ2V0KHMsIHN0YXJ0KTtcbiAgICB2YXIgZXhpdCA9IDA7XG4gICAgaWYgKGMgIT09IDQwICYmIGMgIT09IDEyMykge1xuICAgICAgdmFyIHN0b3AgPSBhZHZhbmNlX3RvX25vbl9hbHBoYShzLCBzdGFydCArIDEgfCAwKTtcbiAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgJCRTdHJpbmcuc3ViKHMsIHN0YXJ0LCBzdG9wIC0gc3RhcnQgfCAwKSxcbiAgICAgICAgICAgICAgc3RvcFxuICAgICAgICAgICAgXTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhpdCA9IDE7XG4gICAgfVxuICAgIGlmIChleGl0ID09PSAxKSB7XG4gICAgICB2YXIgbmV3X3N0YXJ0ID0gc3RhcnQgKyAxIHwgMDtcbiAgICAgIHZhciBzdG9wJDEgPSBhZHZhbmNlX3RvX2Nsb3NpbmcoYywgY2xvc2luZyhjKSwgMCwgcywgbmV3X3N0YXJ0KTtcbiAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgJCRTdHJpbmcuc3ViKHMsIG5ld19zdGFydCwgKHN0b3AkMSAtIHN0YXJ0IHwgMCkgLSAxIHwgMCksXG4gICAgICAgICAgICAgIHN0b3AkMSArIDEgfCAwXG4gICAgICAgICAgICBdO1xuICAgIH1cbiAgICBcbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRfc3Vic3RpdHV0ZShiLCBmLCBzKSB7XG4gIHZhciBsaW0gPSBzLmxlbmd0aDtcbiAgdmFyIF9wcmV2aW91cyA9IC8qIFwiIFwiICovMzI7XG4gIHZhciBfaSA9IDA7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgaSA9IF9pO1xuICAgIHZhciBwcmV2aW91cyA9IF9wcmV2aW91cztcbiAgICBpZiAoaSA8IGxpbSkge1xuICAgICAgdmFyIGN1cnJlbnQgPSBDYW1sX3N0cmluZy5nZXQocywgaSk7XG4gICAgICBpZiAoY3VycmVudCAhPT0gMzYpIHtcbiAgICAgICAgaWYgKHByZXZpb3VzID09PSAvKiBcIlxcXFxcIiAqLzkyKSB7XG4gICAgICAgICAgYWRkX2NoYXIoYiwgLyogXCJcXFxcXCIgKi85Mik7XG4gICAgICAgICAgYWRkX2NoYXIoYiwgY3VycmVudCk7XG4gICAgICAgICAgX2kgPSBpICsgMSB8IDA7XG4gICAgICAgICAgX3ByZXZpb3VzID0gLyogXCIgXCIgKi8zMjtcbiAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIH0gZWxzZSBpZiAoY3VycmVudCAhPT0gOTIpIHtcbiAgICAgICAgICBhZGRfY2hhcihiLCBjdXJyZW50KTtcbiAgICAgICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgICAgICBfcHJldmlvdXMgPSBjdXJyZW50O1xuICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgICAgICBfcHJldmlvdXMgPSBjdXJyZW50O1xuICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwcmV2aW91cyA9PT0gLyogXCJcXFxcXCIgKi85Mikge1xuICAgICAgICBhZGRfY2hhcihiLCBjdXJyZW50KTtcbiAgICAgICAgX2kgPSBpICsgMSB8IDA7XG4gICAgICAgIF9wcmV2aW91cyA9IC8qIFwiIFwiICovMzI7XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBqID0gaSArIDEgfCAwO1xuICAgICAgICB2YXIgbWF0Y2ggPSBmaW5kX2lkZW50KHMsIGosIGxpbSk7XG4gICAgICAgIGFkZF9zdHJpbmcoYiwgQ3VycnkuXzEoZiwgbWF0Y2hbMF0pKTtcbiAgICAgICAgX2kgPSBtYXRjaFsxXTtcbiAgICAgICAgX3ByZXZpb3VzID0gLyogXCIgXCIgKi8zMjtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocHJldmlvdXMgPT09IC8qIFwiXFxcXFwiICovOTIpIHtcbiAgICAgIHJldHVybiBhZGRfY2hhcihiLCBwcmV2aW91cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0cy5jcmVhdGUgPSBjcmVhdGU7XG5leHBvcnRzLmNvbnRlbnRzID0gY29udGVudHM7XG5leHBvcnRzLnRvX2J5dGVzID0gdG9fYnl0ZXM7XG5leHBvcnRzLnN1YiA9IHN1YjtcbmV4cG9ydHMuYmxpdCA9IGJsaXQ7XG5leHBvcnRzLm50aCA9IG50aDtcbmV4cG9ydHMubGVuZ3RoID0gbGVuZ3RoO1xuZXhwb3J0cy5jbGVhciA9IGNsZWFyO1xuZXhwb3J0cy5yZXNldCA9IHJlc2V0O1xuZXhwb3J0cy5hZGRfY2hhciA9IGFkZF9jaGFyO1xuZXhwb3J0cy5hZGRfc3RyaW5nID0gYWRkX3N0cmluZztcbmV4cG9ydHMuYWRkX2J5dGVzID0gYWRkX2J5dGVzO1xuZXhwb3J0cy5hZGRfc3Vic3RyaW5nID0gYWRkX3N1YnN0cmluZztcbmV4cG9ydHMuYWRkX3N1YmJ5dGVzID0gYWRkX3N1YmJ5dGVzO1xuZXhwb3J0cy5hZGRfc3Vic3RpdHV0ZSA9IGFkZF9zdWJzdGl0dXRlO1xuZXhwb3J0cy5hZGRfYnVmZmVyID0gYWRkX2J1ZmZlcjtcbmV4cG9ydHMuYWRkX2NoYW5uZWwgPSBhZGRfY2hhbm5lbDtcbmV4cG9ydHMub3V0cHV0X2J1ZmZlciA9IG91dHB1dF9idWZmZXI7XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2hhciA9IHJlcXVpcmUoXCIuL2NoYXIuanNcIik7XG52YXIgTGlzdCA9IHJlcXVpcmUoXCIuL2xpc3QuanNcIik7XG52YXIgQ3VycnkgPSByZXF1aXJlKFwiLi9jdXJyeS5qc1wiKTtcbnZhciBDYW1sX29iaiA9IHJlcXVpcmUoXCIuL2NhbWxfb2JqLmpzXCIpO1xudmFyIENhbWxfYnl0ZXMgPSByZXF1aXJlKFwiLi9jYW1sX2J5dGVzLmpzXCIpO1xudmFyIENhbWxfaW50MzIgPSByZXF1aXJlKFwiLi9jYW1sX2ludDMyLmpzXCIpO1xudmFyIENhbWxfcHJpbWl0aXZlID0gcmVxdWlyZShcIi4vY2FtbF9wcmltaXRpdmUuanNcIik7XG52YXIgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMgPSByZXF1aXJlKFwiLi9jYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5qc1wiKTtcblxuZnVuY3Rpb24gbWFrZShuLCBjKSB7XG4gIHZhciBzID0gQ2FtbF9ieXRlcy5jYW1sX2NyZWF0ZV9ieXRlcyhuKTtcbiAgQ2FtbF9ieXRlcy5jYW1sX2ZpbGxfYnl0ZXMocywgMCwgbiwgYyk7XG4gIHJldHVybiBzO1xufVxuXG5mdW5jdGlvbiBpbml0KG4sIGYpIHtcbiAgdmFyIHMgPSBDYW1sX2J5dGVzLmNhbWxfY3JlYXRlX2J5dGVzKG4pO1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IG4gLSAxIHwgMDsgaSA8PSBpX2ZpbmlzaDsgKytpKXtcbiAgICBzW2ldID0gQ3VycnkuXzEoZiwgaSk7XG4gIH1cbiAgcmV0dXJuIHM7XG59XG5cbnZhciBlbXB0eSA9IFtdO1xuXG5mdW5jdGlvbiBjb3B5KHMpIHtcbiAgdmFyIGxlbiA9IHMubGVuZ3RoO1xuICB2YXIgciA9IENhbWxfYnl0ZXMuY2FtbF9jcmVhdGVfYnl0ZXMobGVuKTtcbiAgQ2FtbF9ieXRlcy5jYW1sX2JsaXRfYnl0ZXMocywgMCwgciwgMCwgbGVuKTtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHRvX3N0cmluZyhiKSB7XG4gIHJldHVybiBDYW1sX2J5dGVzLmJ5dGVzX3RvX3N0cmluZyhjb3B5KGIpKTtcbn1cblxuZnVuY3Rpb24gb2Zfc3RyaW5nKHMpIHtcbiAgcmV0dXJuIGNvcHkoQ2FtbF9ieXRlcy5ieXRlc19vZl9zdHJpbmcocykpO1xufVxuXG5mdW5jdGlvbiBzdWIocywgb2ZzLCBsZW4pIHtcbiAgaWYgKG9mcyA8IDAgfHwgbGVuIDwgMCB8fCBvZnMgPiAocy5sZW5ndGggLSBsZW4gfCAwKSkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiU3RyaW5nLnN1YiAvIEJ5dGVzLnN1YlwiXG4gICAgICAgIF07XG4gIH0gZWxzZSB7XG4gICAgdmFyIHIgPSBDYW1sX2J5dGVzLmNhbWxfY3JlYXRlX2J5dGVzKGxlbik7XG4gICAgQ2FtbF9ieXRlcy5jYW1sX2JsaXRfYnl0ZXMocywgb2ZzLCByLCAwLCBsZW4pO1xuICAgIHJldHVybiByO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN1Yl9zdHJpbmcoYiwgb2ZzLCBsZW4pIHtcbiAgcmV0dXJuIENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nKHN1YihiLCBvZnMsIGxlbikpO1xufVxuXG5mdW5jdGlvbiBleHRlbmQocywgbGVmdCwgcmlnaHQpIHtcbiAgdmFyIGxlbiA9IChzLmxlbmd0aCArIGxlZnQgfCAwKSArIHJpZ2h0IHwgMDtcbiAgdmFyIHIgPSBDYW1sX2J5dGVzLmNhbWxfY3JlYXRlX2J5dGVzKGxlbik7XG4gIHZhciBtYXRjaCA9IGxlZnQgPCAwID8gLyogdHVwbGUgKi9bXG4gICAgICAtbGVmdCB8IDAsXG4gICAgICAwXG4gICAgXSA6IC8qIHR1cGxlICovW1xuICAgICAgMCxcbiAgICAgIGxlZnRcbiAgICBdO1xuICB2YXIgZHN0b2ZmID0gbWF0Y2hbMV07XG4gIHZhciBzcmNvZmYgPSBtYXRjaFswXTtcbiAgdmFyIGNweWxlbiA9IENhbWxfcHJpbWl0aXZlLmNhbWxfaW50X21pbihzLmxlbmd0aCAtIHNyY29mZiB8IDAsIGxlbiAtIGRzdG9mZiB8IDApO1xuICBpZiAoY3B5bGVuID4gMCkge1xuICAgIENhbWxfYnl0ZXMuY2FtbF9ibGl0X2J5dGVzKHMsIHNyY29mZiwgciwgZHN0b2ZmLCBjcHlsZW4pO1xuICB9XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBmaWxsKHMsIG9mcywgbGVuLCBjKSB7XG4gIGlmIChvZnMgPCAwIHx8IGxlbiA8IDAgfHwgb2ZzID4gKHMubGVuZ3RoIC0gbGVuIHwgMCkpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIlN0cmluZy5maWxsIC8gQnl0ZXMuZmlsbFwiXG4gICAgICAgIF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIENhbWxfYnl0ZXMuY2FtbF9maWxsX2J5dGVzKHMsIG9mcywgbGVuLCBjKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBibGl0KHMxLCBvZnMxLCBzMiwgb2ZzMiwgbGVuKSB7XG4gIGlmIChsZW4gPCAwIHx8IG9mczEgPCAwIHx8IG9mczEgPiAoczEubGVuZ3RoIC0gbGVuIHwgMCkgfHwgb2ZzMiA8IDAgfHwgb2ZzMiA+IChzMi5sZW5ndGggLSBsZW4gfCAwKSkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiQnl0ZXMuYmxpdFwiXG4gICAgICAgIF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIENhbWxfYnl0ZXMuY2FtbF9ibGl0X2J5dGVzKHMxLCBvZnMxLCBzMiwgb2ZzMiwgbGVuKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBibGl0X3N0cmluZyhzMSwgb2ZzMSwgczIsIG9mczIsIGxlbikge1xuICBpZiAobGVuIDwgMCB8fCBvZnMxIDwgMCB8fCBvZnMxID4gKHMxLmxlbmd0aCAtIGxlbiB8IDApIHx8IG9mczIgPCAwIHx8IG9mczIgPiAoczIubGVuZ3RoIC0gbGVuIHwgMCkpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIlN0cmluZy5ibGl0IC8gQnl0ZXMuYmxpdF9zdHJpbmdcIlxuICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBDYW1sX2J5dGVzLmNhbWxfYmxpdF9zdHJpbmcoczEsIG9mczEsIHMyLCBvZnMyLCBsZW4pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGl0ZXIoZiwgYSkge1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGEubGVuZ3RoIC0gMSB8IDA7IGkgPD0gaV9maW5pc2g7ICsraSl7XG4gICAgQ3VycnkuXzEoZiwgYVtpXSk7XG4gIH1cbiAgcmV0dXJuIC8qICgpICovMDtcbn1cblxuZnVuY3Rpb24gaXRlcmkoZiwgYSkge1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGEubGVuZ3RoIC0gMSB8IDA7IGkgPD0gaV9maW5pc2g7ICsraSl7XG4gICAgQ3VycnkuXzIoZiwgaSwgYVtpXSk7XG4gIH1cbiAgcmV0dXJuIC8qICgpICovMDtcbn1cblxuZnVuY3Rpb24gY29uY2F0KHNlcCwgbCkge1xuICBpZiAobCkge1xuICAgIHZhciBoZCA9IGxbMF07XG4gICAgdmFyIG51bSA9IC8qIHJlY29yZCAqL1svKiBjb250ZW50cyAqLzBdO1xuICAgIHZhciBsZW4gPSAvKiByZWNvcmQgKi9bLyogY29udGVudHMgKi8wXTtcbiAgICBMaXN0Lml0ZXIoKGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgICBudW1bMF0gPSBudW1bMF0gKyAxIHwgMDtcbiAgICAgICAgICAgIGxlblswXSA9IGxlblswXSArIHMubGVuZ3RoIHwgMDtcbiAgICAgICAgICAgIHJldHVybiAvKiAoKSAqLzA7XG4gICAgICAgICAgfSksIGwpO1xuICAgIHZhciByID0gQ2FtbF9ieXRlcy5jYW1sX2NyZWF0ZV9ieXRlcyhsZW5bMF0gKyBDYW1sX2ludDMyLmltdWwoc2VwLmxlbmd0aCwgbnVtWzBdIC0gMSB8IDApIHwgMCk7XG4gICAgQ2FtbF9ieXRlcy5jYW1sX2JsaXRfYnl0ZXMoaGQsIDAsIHIsIDAsIGhkLmxlbmd0aCk7XG4gICAgdmFyIHBvcyA9IC8qIHJlY29yZCAqL1svKiBjb250ZW50cyAqL2hkLmxlbmd0aF07XG4gICAgTGlzdC5pdGVyKChmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgQ2FtbF9ieXRlcy5jYW1sX2JsaXRfYnl0ZXMoc2VwLCAwLCByLCBwb3NbMF0sIHNlcC5sZW5ndGgpO1xuICAgICAgICAgICAgcG9zWzBdID0gcG9zWzBdICsgc2VwLmxlbmd0aCB8IDA7XG4gICAgICAgICAgICBDYW1sX2J5dGVzLmNhbWxfYmxpdF9ieXRlcyhzLCAwLCByLCBwb3NbMF0sIHMubGVuZ3RoKTtcbiAgICAgICAgICAgIHBvc1swXSA9IHBvc1swXSArIHMubGVuZ3RoIHwgMDtcbiAgICAgICAgICAgIHJldHVybiAvKiAoKSAqLzA7XG4gICAgICAgICAgfSksIGxbMV0pO1xuICAgIHJldHVybiByO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBlbXB0eTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYXQoczEsIHMyKSB7XG4gIHZhciBsMSA9IHMxLmxlbmd0aDtcbiAgdmFyIGwyID0gczIubGVuZ3RoO1xuICB2YXIgciA9IENhbWxfYnl0ZXMuY2FtbF9jcmVhdGVfYnl0ZXMobDEgKyBsMiB8IDApO1xuICBDYW1sX2J5dGVzLmNhbWxfYmxpdF9ieXRlcyhzMSwgMCwgciwgMCwgbDEpO1xuICBDYW1sX2J5dGVzLmNhbWxfYmxpdF9ieXRlcyhzMiwgMCwgciwgbDEsIGwyKTtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGlzX3NwYWNlKHBhcmFtKSB7XG4gIHZhciBzd2l0Y2hlciA9IHBhcmFtIC0gOSB8IDA7XG4gIGlmIChzd2l0Y2hlciA+IDQgfHwgc3dpdGNoZXIgPCAwKSB7XG4gICAgcmV0dXJuIHN3aXRjaGVyID09PSAyMztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3dpdGNoZXIgIT09IDI7XG4gIH1cbn1cblxuZnVuY3Rpb24gdHJpbShzKSB7XG4gIHZhciBsZW4gPSBzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB3aGlsZShpIDwgbGVuICYmIGlzX3NwYWNlKHNbaV0pKSB7XG4gICAgaSA9IGkgKyAxIHwgMDtcbiAgfTtcbiAgdmFyIGogPSBsZW4gLSAxIHwgMDtcbiAgd2hpbGUoaiA+PSBpICYmIGlzX3NwYWNlKHNbal0pKSB7XG4gICAgaiA9IGogLSAxIHwgMDtcbiAgfTtcbiAgaWYgKGogPj0gaSkge1xuICAgIHJldHVybiBzdWIocywgaSwgKGogLSBpIHwgMCkgKyAxIHwgMCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGVtcHR5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGVzY2FwZWQocykge1xuICB2YXIgbiA9IDA7XG4gIGZvcih2YXIgaSA9IDAgLGlfZmluaXNoID0gcy5sZW5ndGggLSAxIHwgMDsgaSA8PSBpX2ZpbmlzaDsgKytpKXtcbiAgICB2YXIgbWF0Y2ggPSBzW2ldO1xuICAgIHZhciB0bXA7XG4gICAgaWYgKG1hdGNoID49IDMyKSB7XG4gICAgICB2YXIgc3dpdGNoZXIgPSBtYXRjaCAtIDM0IHwgMDtcbiAgICAgIHRtcCA9IHN3aXRjaGVyID4gNTggfHwgc3dpdGNoZXIgPCAwID8gKFxuICAgICAgICAgIHN3aXRjaGVyID49IDkzID8gNCA6IDFcbiAgICAgICAgKSA6IChcbiAgICAgICAgICBzd2l0Y2hlciA+IDU3IHx8IHN3aXRjaGVyIDwgMSA/IDIgOiAxXG4gICAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRtcCA9IG1hdGNoID49IDExID8gKFxuICAgICAgICAgIG1hdGNoICE9PSAxMyA/IDQgOiAyXG4gICAgICAgICkgOiAoXG4gICAgICAgICAgbWF0Y2ggPj0gOCA/IDIgOiA0XG4gICAgICAgICk7XG4gICAgfVxuICAgIG4gPSBuICsgdG1wIHwgMDtcbiAgfVxuICBpZiAobiA9PT0gcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gY29weShzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcyRwcmltZSA9IENhbWxfYnl0ZXMuY2FtbF9jcmVhdGVfYnl0ZXMobik7XG4gICAgbiA9IDA7XG4gICAgZm9yKHZhciBpJDEgPSAwICxpX2ZpbmlzaCQxID0gcy5sZW5ndGggLSAxIHwgMDsgaSQxIDw9IGlfZmluaXNoJDE7ICsraSQxKXtcbiAgICAgIHZhciBjID0gc1tpJDFdO1xuICAgICAgdmFyIGV4aXQgPSAwO1xuICAgICAgaWYgKGMgPj0gMzUpIHtcbiAgICAgICAgaWYgKGMgIT09IDkyKSB7XG4gICAgICAgICAgaWYgKGMgPj0gMTI3KSB7XG4gICAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcyRwcmltZVtuXSA9IGM7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGV4aXQgPSAyO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGMgPj0gMzIpIHtcbiAgICAgICAgaWYgKGMgPj0gMzQpIHtcbiAgICAgICAgICBleGl0ID0gMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzJHByaW1lW25dID0gYztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjID49IDE0KSB7XG4gICAgICAgIGV4aXQgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgICAgY2FzZSA4IDogXG4gICAgICAgICAgICAgIHMkcHJpbWVbbl0gPSAvKiBcIlxcXFxcIiAqLzkyO1xuICAgICAgICAgICAgICBuID0gbiArIDEgfCAwO1xuICAgICAgICAgICAgICBzJHByaW1lW25dID0gLyogXCJiXCIgKi85ODtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSA5IDogXG4gICAgICAgICAgICAgIHMkcHJpbWVbbl0gPSAvKiBcIlxcXFxcIiAqLzkyO1xuICAgICAgICAgICAgICBuID0gbiArIDEgfCAwO1xuICAgICAgICAgICAgICBzJHByaW1lW25dID0gLyogXCJ0XCIgKi8xMTY7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMTAgOiBcbiAgICAgICAgICAgICAgcyRwcmltZVtuXSA9IC8qIFwiXFxcXFwiICovOTI7XG4gICAgICAgICAgICAgIG4gPSBuICsgMSB8IDA7XG4gICAgICAgICAgICAgIHMkcHJpbWVbbl0gPSAvKiBcIm5cIiAqLzExMDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAwIDogXG4gICAgICAgICAgY2FzZSAxIDogXG4gICAgICAgICAgY2FzZSAyIDogXG4gICAgICAgICAgY2FzZSAzIDogXG4gICAgICAgICAgY2FzZSA0IDogXG4gICAgICAgICAgY2FzZSA1IDogXG4gICAgICAgICAgY2FzZSA2IDogXG4gICAgICAgICAgY2FzZSA3IDogXG4gICAgICAgICAgY2FzZSAxMSA6IFxuICAgICAgICAgIGNhc2UgMTIgOiBcbiAgICAgICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMTMgOiBcbiAgICAgICAgICAgICAgcyRwcmltZVtuXSA9IC8qIFwiXFxcXFwiICovOTI7XG4gICAgICAgICAgICAgIG4gPSBuICsgMSB8IDA7XG4gICAgICAgICAgICAgIHMkcHJpbWVbbl0gPSAvKiBcInJcIiAqLzExNDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN3aXRjaCAoZXhpdCkge1xuICAgICAgICBjYXNlIDEgOiBcbiAgICAgICAgICAgIHMkcHJpbWVbbl0gPSAvKiBcIlxcXFxcIiAqLzkyO1xuICAgICAgICAgICAgbiA9IG4gKyAxIHwgMDtcbiAgICAgICAgICAgIHMkcHJpbWVbbl0gPSA0OCArIChjIC8gMTAwIHwgMCkgfCAwO1xuICAgICAgICAgICAgbiA9IG4gKyAxIHwgMDtcbiAgICAgICAgICAgIHMkcHJpbWVbbl0gPSA0OCArIChjIC8gMTAgfCAwKSAlIDEwIHwgMDtcbiAgICAgICAgICAgIG4gPSBuICsgMSB8IDA7XG4gICAgICAgICAgICBzJHByaW1lW25dID0gNDggKyBjICUgMTAgfCAwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMiA6IFxuICAgICAgICAgICAgcyRwcmltZVtuXSA9IC8qIFwiXFxcXFwiICovOTI7XG4gICAgICAgICAgICBuID0gbiArIDEgfCAwO1xuICAgICAgICAgICAgcyRwcmltZVtuXSA9IGM7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgXG4gICAgICB9XG4gICAgICBuID0gbiArIDEgfCAwO1xuICAgIH1cbiAgICByZXR1cm4gcyRwcmltZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXAoZiwgcykge1xuICB2YXIgbCA9IHMubGVuZ3RoO1xuICBpZiAobCA9PT0gMCkge1xuICAgIHJldHVybiBzO1xuICB9IGVsc2Uge1xuICAgIHZhciByID0gQ2FtbF9ieXRlcy5jYW1sX2NyZWF0ZV9ieXRlcyhsKTtcbiAgICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGwgLSAxIHwgMDsgaSA8PSBpX2ZpbmlzaDsgKytpKXtcbiAgICAgIHJbaV0gPSBDdXJyeS5fMShmLCBzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFwaShmLCBzKSB7XG4gIHZhciBsID0gcy5sZW5ndGg7XG4gIGlmIChsID09PSAwKSB7XG4gICAgcmV0dXJuIHM7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHIgPSBDYW1sX2J5dGVzLmNhbWxfY3JlYXRlX2J5dGVzKGwpO1xuICAgIGZvcih2YXIgaSA9IDAgLGlfZmluaXNoID0gbCAtIDEgfCAwOyBpIDw9IGlfZmluaXNoOyArK2kpe1xuICAgICAgcltpXSA9IEN1cnJ5Ll8yKGYsIGksIHNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxufVxuXG5mdW5jdGlvbiB1cHBlcmNhc2Uocykge1xuICByZXR1cm4gbWFwKENoYXIudXBwZXJjYXNlLCBzKTtcbn1cblxuZnVuY3Rpb24gbG93ZXJjYXNlKHMpIHtcbiAgcmV0dXJuIG1hcChDaGFyLmxvd2VyY2FzZSwgcyk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5MShmLCBzKSB7XG4gIGlmIChzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBzO1xuICB9IGVsc2Uge1xuICAgIHZhciByID0gY29weShzKTtcbiAgICByWzBdID0gQ3VycnkuXzEoZiwgc1swXSk7XG4gICAgcmV0dXJuIHI7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FwaXRhbGl6ZShzKSB7XG4gIHJldHVybiBhcHBseTEoQ2hhci51cHBlcmNhc2UsIHMpO1xufVxuXG5mdW5jdGlvbiB1bmNhcGl0YWxpemUocykge1xuICByZXR1cm4gYXBwbHkxKENoYXIubG93ZXJjYXNlLCBzKTtcbn1cblxuZnVuY3Rpb24gaW5kZXhfcmVjKHMsIGxpbSwgX2ksIGMpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBpID0gX2k7XG4gICAgaWYgKGkgPj0gbGltKSB7XG4gICAgICB0aHJvdyBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5ub3RfZm91bmQ7XG4gICAgfSBlbHNlIGlmIChzW2ldID09PSBjKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9IGVsc2Uge1xuICAgICAgX2kgPSBpICsgMSB8IDA7XG4gICAgICBjb250aW51ZSA7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbmRleChzLCBjKSB7XG4gIHJldHVybiBpbmRleF9yZWMocywgcy5sZW5ndGgsIDAsIGMpO1xufVxuXG5mdW5jdGlvbiBpbmRleF9mcm9tKHMsIGksIGMpIHtcbiAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgaWYgKGkgPCAwIHx8IGkgPiBsKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJTdHJpbmcuaW5kZXhfZnJvbSAvIEJ5dGVzLmluZGV4X2Zyb21cIlxuICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBpbmRleF9yZWMocywgbCwgaSwgYyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmluZGV4X3JlYyhzLCBfaSwgYykge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGkgPSBfaTtcbiAgICBpZiAoaSA8IDApIHtcbiAgICAgIHRocm93IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLm5vdF9mb3VuZDtcbiAgICB9IGVsc2UgaWYgKHNbaV0gPT09IGMpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfaSA9IGkgLSAxIHwgMDtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJpbmRleChzLCBjKSB7XG4gIHJldHVybiByaW5kZXhfcmVjKHMsIHMubGVuZ3RoIC0gMSB8IDAsIGMpO1xufVxuXG5mdW5jdGlvbiByaW5kZXhfZnJvbShzLCBpLCBjKSB7XG4gIGlmIChpIDwgLTEgfHwgaSA+PSBzLmxlbmd0aCkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiU3RyaW5nLnJpbmRleF9mcm9tIC8gQnl0ZXMucmluZGV4X2Zyb21cIlxuICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiByaW5kZXhfcmVjKHMsIGksIGMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbnRhaW5zX2Zyb20ocywgaSwgYykge1xuICB2YXIgbCA9IHMubGVuZ3RoO1xuICBpZiAoaSA8IDAgfHwgaSA+IGwpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIlN0cmluZy5jb250YWluc19mcm9tIC8gQnl0ZXMuY29udGFpbnNfZnJvbVwiXG4gICAgICAgIF07XG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIGluZGV4X3JlYyhzLCBsLCBpLCBjKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjYXRjaCAoZXhuKXtcbiAgICAgIGlmIChleG4gPT09IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLm5vdF9mb3VuZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBleG47XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNvbnRhaW5zKHMsIGMpIHtcbiAgcmV0dXJuIGNvbnRhaW5zX2Zyb20ocywgMCwgYyk7XG59XG5cbmZ1bmN0aW9uIHJjb250YWluc19mcm9tKHMsIGksIGMpIHtcbiAgaWYgKGkgPCAwIHx8IGkgPj0gcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIlN0cmluZy5yY29udGFpbnNfZnJvbSAvIEJ5dGVzLnJjb250YWluc19mcm9tXCJcbiAgICAgICAgXTtcbiAgfSBlbHNlIHtcbiAgICB0cnkge1xuICAgICAgcmluZGV4X3JlYyhzLCBpLCBjKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjYXRjaCAoZXhuKXtcbiAgICAgIGlmIChleG4gPT09IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLm5vdF9mb3VuZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBleG47XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnZhciBjb21wYXJlID0gQ2FtbF9vYmouY2FtbF9jb21wYXJlO1xuXG52YXIgdW5zYWZlX3RvX3N0cmluZyA9IENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nO1xuXG52YXIgdW5zYWZlX29mX3N0cmluZyA9IENhbWxfYnl0ZXMuYnl0ZXNfb2Zfc3RyaW5nO1xuXG5leHBvcnRzLm1ha2UgPSBtYWtlO1xuZXhwb3J0cy5pbml0ID0gaW5pdDtcbmV4cG9ydHMuZW1wdHkgPSBlbXB0eTtcbmV4cG9ydHMuY29weSA9IGNvcHk7XG5leHBvcnRzLm9mX3N0cmluZyA9IG9mX3N0cmluZztcbmV4cG9ydHMudG9fc3RyaW5nID0gdG9fc3RyaW5nO1xuZXhwb3J0cy5zdWIgPSBzdWI7XG5leHBvcnRzLnN1Yl9zdHJpbmcgPSBzdWJfc3RyaW5nO1xuZXhwb3J0cy5leHRlbmQgPSBleHRlbmQ7XG5leHBvcnRzLmZpbGwgPSBmaWxsO1xuZXhwb3J0cy5ibGl0ID0gYmxpdDtcbmV4cG9ydHMuYmxpdF9zdHJpbmcgPSBibGl0X3N0cmluZztcbmV4cG9ydHMuY29uY2F0ID0gY29uY2F0O1xuZXhwb3J0cy5jYXQgPSBjYXQ7XG5leHBvcnRzLml0ZXIgPSBpdGVyO1xuZXhwb3J0cy5pdGVyaSA9IGl0ZXJpO1xuZXhwb3J0cy5tYXAgPSBtYXA7XG5leHBvcnRzLm1hcGkgPSBtYXBpO1xuZXhwb3J0cy50cmltID0gdHJpbTtcbmV4cG9ydHMuZXNjYXBlZCA9IGVzY2FwZWQ7XG5leHBvcnRzLmluZGV4ID0gaW5kZXg7XG5leHBvcnRzLnJpbmRleCA9IHJpbmRleDtcbmV4cG9ydHMuaW5kZXhfZnJvbSA9IGluZGV4X2Zyb207XG5leHBvcnRzLnJpbmRleF9mcm9tID0gcmluZGV4X2Zyb207XG5leHBvcnRzLmNvbnRhaW5zID0gY29udGFpbnM7XG5leHBvcnRzLmNvbnRhaW5zX2Zyb20gPSBjb250YWluc19mcm9tO1xuZXhwb3J0cy5yY29udGFpbnNfZnJvbSA9IHJjb250YWluc19mcm9tO1xuZXhwb3J0cy51cHBlcmNhc2UgPSB1cHBlcmNhc2U7XG5leHBvcnRzLmxvd2VyY2FzZSA9IGxvd2VyY2FzZTtcbmV4cG9ydHMuY2FwaXRhbGl6ZSA9IGNhcGl0YWxpemU7XG5leHBvcnRzLnVuY2FwaXRhbGl6ZSA9IHVuY2FwaXRhbGl6ZTtcbmV4cG9ydHMuY29tcGFyZSA9IGNvbXBhcmU7XG5leHBvcnRzLnVuc2FmZV90b19zdHJpbmcgPSB1bnNhZmVfdG9fc3RyaW5nO1xuZXhwb3J0cy51bnNhZmVfb2Zfc3RyaW5nID0gdW5zYWZlX29mX3N0cmluZztcbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucyA9IHJlcXVpcmUoXCIuL2NhbWxfYnVpbHRpbl9leGNlcHRpb25zLmpzXCIpO1xuXG5mdW5jdGlvbiBjYW1sX2FycmF5X3N1Yih4LCBvZmZzZXQsIGxlbikge1xuICB2YXIgcmVzdWx0ID0gbmV3IEFycmF5KGxlbik7XG4gIHZhciBqID0gMDtcbiAgdmFyIGkgPSBvZmZzZXQ7XG4gIHdoaWxlKGogPCBsZW4pIHtcbiAgICByZXN1bHRbal0gPSB4W2ldO1xuICAgIGogPSBqICsgMSB8IDA7XG4gICAgaSA9IGkgKyAxIHwgMDtcbiAgfTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbGVuKF9hY2MsIF9sKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbCA9IF9sO1xuICAgIHZhciBhY2MgPSBfYWNjO1xuICAgIGlmIChsKSB7XG4gICAgICBfbCA9IGxbMV07XG4gICAgICBfYWNjID0gbFswXS5sZW5ndGggKyBhY2MgfCAwO1xuICAgICAgY29udGludWUgO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZmlsbChhcnIsIF9pLCBfbCkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGwgPSBfbDtcbiAgICB2YXIgaSA9IF9pO1xuICAgIGlmIChsKSB7XG4gICAgICB2YXIgeCA9IGxbMF07XG4gICAgICB2YXIgbCQxID0geC5sZW5ndGg7XG4gICAgICB2YXIgayA9IGk7XG4gICAgICB2YXIgaiA9IDA7XG4gICAgICB3aGlsZShqIDwgbCQxKSB7XG4gICAgICAgIGFycltrXSA9IHhbal07XG4gICAgICAgIGsgPSBrICsgMSB8IDA7XG4gICAgICAgIGogPSBqICsgMSB8IDA7XG4gICAgICB9O1xuICAgICAgX2wgPSBsWzFdO1xuICAgICAgX2kgPSBrO1xuICAgICAgY29udGludWUgO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY2FtbF9hcnJheV9jb25jYXQobCkge1xuICB2YXIgdiA9IGxlbigwLCBsKTtcbiAgdmFyIHJlc3VsdCA9IG5ldyBBcnJheSh2KTtcbiAgZmlsbChyZXN1bHQsIDAsIGwpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBjYW1sX2FycmF5X3NldCh4cywgaW5kZXgsIG5ld3ZhbCkge1xuICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHhzLmxlbmd0aCkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiaW5kZXggb3V0IG9mIGJvdW5kc1wiXG4gICAgICAgIF07XG4gIH0gZWxzZSB7XG4gICAgeHNbaW5kZXhdID0gbmV3dmFsO1xuICAgIHJldHVybiAvKiAoKSAqLzA7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9hcnJheV9nZXQoeHMsIGluZGV4KSB7XG4gIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0geHMubGVuZ3RoKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJpbmRleCBvdXQgb2YgYm91bmRzXCJcbiAgICAgICAgXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geHNbaW5kZXhdO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfbWFrZV92ZWN0KGxlbiwgaW5pdCkge1xuICB2YXIgYiA9IG5ldyBBcnJheShsZW4pO1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGxlbiAtIDEgfCAwOyBpIDw9IGlfZmluaXNoOyArK2kpe1xuICAgIGJbaV0gPSBpbml0O1xuICB9XG4gIHJldHVybiBiO1xufVxuXG5mdW5jdGlvbiBjYW1sX21ha2VfZmxvYXRfdmVjdChsZW4pIHtcbiAgdmFyIGIgPSBuZXcgQXJyYXkobGVuKTtcbiAgZm9yKHZhciBpID0gMCAsaV9maW5pc2ggPSBsZW4gLSAxIHwgMDsgaSA8PSBpX2ZpbmlzaDsgKytpKXtcbiAgICBiW2ldID0gMDtcbiAgfVxuICByZXR1cm4gYjtcbn1cblxuZnVuY3Rpb24gY2FtbF9hcnJheV9ibGl0KGExLCBpMSwgYTIsIGkyLCBsZW4pIHtcbiAgaWYgKGkyIDw9IGkxKSB7XG4gICAgZm9yKHZhciBqID0gMCAsal9maW5pc2ggPSBsZW4gLSAxIHwgMDsgaiA8PSBqX2ZpbmlzaDsgKytqKXtcbiAgICAgIGEyW2ogKyBpMiB8IDBdID0gYTFbaiArIGkxIHwgMF07XG4gICAgfVxuICAgIHJldHVybiAvKiAoKSAqLzA7XG4gIH0gZWxzZSB7XG4gICAgZm9yKHZhciBqJDEgPSBsZW4gLSAxIHwgMDsgaiQxID49IDA7IC0taiQxKXtcbiAgICAgIGEyW2okMSArIGkyIHwgMF0gPSBhMVtqJDEgKyBpMSB8IDBdO1xuICAgIH1cbiAgICByZXR1cm4gLyogKCkgKi8wO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfYXJyYXlfZHVwKHByaW0pIHtcbiAgcmV0dXJuIHByaW0uc2xpY2UoMCk7XG59XG5cbmV4cG9ydHMuY2FtbF9hcnJheV9kdXAgPSBjYW1sX2FycmF5X2R1cDtcbmV4cG9ydHMuY2FtbF9hcnJheV9zdWIgPSBjYW1sX2FycmF5X3N1YjtcbmV4cG9ydHMuY2FtbF9hcnJheV9jb25jYXQgPSBjYW1sX2FycmF5X2NvbmNhdDtcbmV4cG9ydHMuY2FtbF9tYWtlX3ZlY3QgPSBjYW1sX21ha2VfdmVjdDtcbmV4cG9ydHMuY2FtbF9tYWtlX2Zsb2F0X3ZlY3QgPSBjYW1sX21ha2VfZmxvYXRfdmVjdDtcbmV4cG9ydHMuY2FtbF9hcnJheV9ibGl0ID0gY2FtbF9hcnJheV9ibGl0O1xuZXhwb3J0cy5jYW1sX2FycmF5X2dldCA9IGNhbWxfYXJyYXlfZ2V0O1xuZXhwb3J0cy5jYW1sX2FycmF5X3NldCA9IGNhbWxfYXJyYXlfc2V0O1xuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIid1c2Ugc3RyaWN0JztcblxuXG52YXIgb3V0X29mX21lbW9yeSA9IC8qIHR1cGxlICovW1xuICBcIk91dF9vZl9tZW1vcnlcIixcbiAgMFxuXTtcblxudmFyIHN5c19lcnJvciA9IC8qIHR1cGxlICovW1xuICBcIlN5c19lcnJvclwiLFxuICAtMVxuXTtcblxudmFyIGZhaWx1cmUgPSAvKiB0dXBsZSAqL1tcbiAgXCJGYWlsdXJlXCIsXG4gIC0yXG5dO1xuXG52YXIgaW52YWxpZF9hcmd1bWVudCA9IC8qIHR1cGxlICovW1xuICBcIkludmFsaWRfYXJndW1lbnRcIixcbiAgLTNcbl07XG5cbnZhciBlbmRfb2ZfZmlsZSA9IC8qIHR1cGxlICovW1xuICBcIkVuZF9vZl9maWxlXCIsXG4gIC00XG5dO1xuXG52YXIgZGl2aXNpb25fYnlfemVybyA9IC8qIHR1cGxlICovW1xuICBcIkRpdmlzaW9uX2J5X3plcm9cIixcbiAgLTVcbl07XG5cbnZhciBub3RfZm91bmQgPSAvKiB0dXBsZSAqL1tcbiAgXCJOb3RfZm91bmRcIixcbiAgLTZcbl07XG5cbnZhciBtYXRjaF9mYWlsdXJlID0gLyogdHVwbGUgKi9bXG4gIFwiTWF0Y2hfZmFpbHVyZVwiLFxuICAtN1xuXTtcblxudmFyIHN0YWNrX292ZXJmbG93ID0gLyogdHVwbGUgKi9bXG4gIFwiU3RhY2tfb3ZlcmZsb3dcIixcbiAgLThcbl07XG5cbnZhciBzeXNfYmxvY2tlZF9pbyA9IC8qIHR1cGxlICovW1xuICBcIlN5c19ibG9ja2VkX2lvXCIsXG4gIC05XG5dO1xuXG52YXIgYXNzZXJ0X2ZhaWx1cmUgPSAvKiB0dXBsZSAqL1tcbiAgXCJBc3NlcnRfZmFpbHVyZVwiLFxuICAtMTBcbl07XG5cbnZhciB1bmRlZmluZWRfcmVjdXJzaXZlX21vZHVsZSA9IC8qIHR1cGxlICovW1xuICBcIlVuZGVmaW5lZF9yZWN1cnNpdmVfbW9kdWxlXCIsXG4gIC0xMVxuXTtcblxub3V0X29mX21lbW9yeS50YWcgPSAyNDg7XG5cbnN5c19lcnJvci50YWcgPSAyNDg7XG5cbmZhaWx1cmUudGFnID0gMjQ4O1xuXG5pbnZhbGlkX2FyZ3VtZW50LnRhZyA9IDI0ODtcblxuZW5kX29mX2ZpbGUudGFnID0gMjQ4O1xuXG5kaXZpc2lvbl9ieV96ZXJvLnRhZyA9IDI0ODtcblxubm90X2ZvdW5kLnRhZyA9IDI0ODtcblxubWF0Y2hfZmFpbHVyZS50YWcgPSAyNDg7XG5cbnN0YWNrX292ZXJmbG93LnRhZyA9IDI0ODtcblxuc3lzX2Jsb2NrZWRfaW8udGFnID0gMjQ4O1xuXG5hc3NlcnRfZmFpbHVyZS50YWcgPSAyNDg7XG5cbnVuZGVmaW5lZF9yZWN1cnNpdmVfbW9kdWxlLnRhZyA9IDI0ODtcblxuZXhwb3J0cy5vdXRfb2ZfbWVtb3J5ID0gb3V0X29mX21lbW9yeTtcbmV4cG9ydHMuc3lzX2Vycm9yID0gc3lzX2Vycm9yO1xuZXhwb3J0cy5mYWlsdXJlID0gZmFpbHVyZTtcbmV4cG9ydHMuaW52YWxpZF9hcmd1bWVudCA9IGludmFsaWRfYXJndW1lbnQ7XG5leHBvcnRzLmVuZF9vZl9maWxlID0gZW5kX29mX2ZpbGU7XG5leHBvcnRzLmRpdmlzaW9uX2J5X3plcm8gPSBkaXZpc2lvbl9ieV96ZXJvO1xuZXhwb3J0cy5ub3RfZm91bmQgPSBub3RfZm91bmQ7XG5leHBvcnRzLm1hdGNoX2ZhaWx1cmUgPSBtYXRjaF9mYWlsdXJlO1xuZXhwb3J0cy5zdGFja19vdmVyZmxvdyA9IHN0YWNrX292ZXJmbG93O1xuZXhwb3J0cy5zeXNfYmxvY2tlZF9pbyA9IHN5c19ibG9ja2VkX2lvO1xuZXhwb3J0cy5hc3NlcnRfZmFpbHVyZSA9IGFzc2VydF9mYWlsdXJlO1xuZXhwb3J0cy51bmRlZmluZWRfcmVjdXJzaXZlX21vZHVsZSA9IHVuZGVmaW5lZF9yZWN1cnNpdmVfbW9kdWxlO1xuLyogIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucyA9IHJlcXVpcmUoXCIuL2NhbWxfYnVpbHRpbl9leGNlcHRpb25zLmpzXCIpO1xuXG5mdW5jdGlvbiBnZXQocywgaSkge1xuICBpZiAoaSA8IDAgfHwgaSA+PSBzLmxlbmd0aCkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiaW5kZXggb3V0IG9mIGJvdW5kc1wiXG4gICAgICAgIF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHNbaV07XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9maWxsX2J5dGVzKHMsIGksIGwsIGMpIHtcbiAgaWYgKGwgPiAwKSB7XG4gICAgZm9yKHZhciBrID0gaSAsa19maW5pc2ggPSAobCArIGkgfCAwKSAtIDEgfCAwOyBrIDw9IGtfZmluaXNoOyArK2spe1xuICAgICAgc1trXSA9IGM7XG4gICAgfVxuICAgIHJldHVybiAvKiAoKSAqLzA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9jcmVhdGVfYnl0ZXMobGVuKSB7XG4gIGlmIChsZW4gPCAwKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJTdHJpbmcuY3JlYXRlXCJcbiAgICAgICAgXTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IEFycmF5KGxlbik7XG4gICAgZm9yKHZhciBpID0gMCAsaV9maW5pc2ggPSBsZW4gLSAxIHwgMDsgaSA8PSBpX2ZpbmlzaDsgKytpKXtcbiAgICAgIHJlc3VsdFtpXSA9IC8qIFwiXFwwMDBcIiAqLzA7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9ibGl0X2J5dGVzKHMxLCBpMSwgczIsIGkyLCBsZW4pIHtcbiAgaWYgKGxlbiA+IDApIHtcbiAgICBpZiAoczEgPT09IHMyKSB7XG4gICAgICB2YXIgczEkMSA9IHMxO1xuICAgICAgdmFyIGkxJDEgPSBpMTtcbiAgICAgIHZhciBpMiQxID0gaTI7XG4gICAgICB2YXIgbGVuJDEgPSBsZW47XG4gICAgICBpZiAoaTEkMSA8IGkyJDEpIHtcbiAgICAgICAgdmFyIHJhbmdlX2EgPSAoczEkMS5sZW5ndGggLSBpMiQxIHwgMCkgLSAxIHwgMDtcbiAgICAgICAgdmFyIHJhbmdlX2IgPSBsZW4kMSAtIDEgfCAwO1xuICAgICAgICB2YXIgcmFuZ2UgPSByYW5nZV9hID4gcmFuZ2VfYiA/IHJhbmdlX2IgOiByYW5nZV9hO1xuICAgICAgICBmb3IodmFyIGogPSByYW5nZTsgaiA+PSAwOyAtLWope1xuICAgICAgICAgIHMxJDFbaTIkMSArIGogfCAwXSA9IHMxJDFbaTEkMSArIGogfCAwXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgICAgfSBlbHNlIGlmIChpMSQxID4gaTIkMSkge1xuICAgICAgICB2YXIgcmFuZ2VfYSQxID0gKHMxJDEubGVuZ3RoIC0gaTEkMSB8IDApIC0gMSB8IDA7XG4gICAgICAgIHZhciByYW5nZV9iJDEgPSBsZW4kMSAtIDEgfCAwO1xuICAgICAgICB2YXIgcmFuZ2UkMSA9IHJhbmdlX2EkMSA+IHJhbmdlX2IkMSA/IHJhbmdlX2IkMSA6IHJhbmdlX2EkMTtcbiAgICAgICAgZm9yKHZhciBrID0gMDsgayA8PSByYW5nZSQxOyArK2spe1xuICAgICAgICAgIHMxJDFbaTIkMSArIGsgfCAwXSA9IHMxJDFbaTEkMSArIGsgfCAwXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBvZmYxID0gczEubGVuZ3RoIC0gaTEgfCAwO1xuICAgICAgaWYgKGxlbiA8PSBvZmYxKSB7XG4gICAgICAgIGZvcih2YXIgaSA9IDAgLGlfZmluaXNoID0gbGVuIC0gMSB8IDA7IGkgPD0gaV9maW5pc2g7ICsraSl7XG4gICAgICAgICAgczJbaTIgKyBpIHwgMF0gPSBzMVtpMSArIGkgfCAwXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yKHZhciBpJDEgPSAwICxpX2ZpbmlzaCQxID0gb2ZmMSAtIDEgfCAwOyBpJDEgPD0gaV9maW5pc2gkMTsgKytpJDEpe1xuICAgICAgICAgIHMyW2kyICsgaSQxIHwgMF0gPSBzMVtpMSArIGkkMSB8IDBdO1xuICAgICAgICB9XG4gICAgICAgIGZvcih2YXIgaSQyID0gb2ZmMSAsaV9maW5pc2gkMiA9IGxlbiAtIDEgfCAwOyBpJDIgPD0gaV9maW5pc2gkMjsgKytpJDIpe1xuICAgICAgICAgIHMyW2kyICsgaSQyIHwgMF0gPSAvKiBcIlxcMDAwXCIgKi8wO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAvKiAoKSAqLzA7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJ5dGVzX3RvX3N0cmluZyhhKSB7XG4gIHZhciBieXRlcyA9IGE7XG4gIHZhciBpID0gMDtcbiAgdmFyIGxlbiA9IGEubGVuZ3RoO1xuICB2YXIgcyA9IFwiXCI7XG4gIHZhciBzX2xlbiA9IGxlbjtcbiAgaWYgKGkgPT09IDAgJiYgbGVuIDw9IDQwOTYgJiYgbGVuID09PSBieXRlcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBieXRlcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG9mZnNldCA9IDA7XG4gICAgd2hpbGUoc19sZW4gPiAwKSB7XG4gICAgICB2YXIgbmV4dCA9IHNfbGVuIDwgMTAyNCA/IHNfbGVuIDogMTAyNDtcbiAgICAgIHZhciB0bXBfYnl0ZXMgPSBuZXcgQXJyYXkobmV4dCk7XG4gICAgICBjYW1sX2JsaXRfYnl0ZXMoYnl0ZXMsIG9mZnNldCwgdG1wX2J5dGVzLCAwLCBuZXh0KTtcbiAgICAgIHMgPSBzICsgU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCB0bXBfYnl0ZXMpO1xuICAgICAgc19sZW4gPSBzX2xlbiAtIG5leHQgfCAwO1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0ICsgbmV4dCB8IDA7XG4gICAgfTtcbiAgICByZXR1cm4gcztcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX2JsaXRfc3RyaW5nKHMxLCBpMSwgczIsIGkyLCBsZW4pIHtcbiAgaWYgKGxlbiA+IDApIHtcbiAgICB2YXIgb2ZmMSA9IHMxLmxlbmd0aCAtIGkxIHwgMDtcbiAgICBpZiAobGVuIDw9IG9mZjEpIHtcbiAgICAgIGZvcih2YXIgaSA9IDAgLGlfZmluaXNoID0gbGVuIC0gMSB8IDA7IGkgPD0gaV9maW5pc2g7ICsraSl7XG4gICAgICAgIHMyW2kyICsgaSB8IDBdID0gczEuY2hhckNvZGVBdChpMSArIGkgfCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAvKiAoKSAqLzA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvcih2YXIgaSQxID0gMCAsaV9maW5pc2gkMSA9IG9mZjEgLSAxIHwgMDsgaSQxIDw9IGlfZmluaXNoJDE7ICsraSQxKXtcbiAgICAgICAgczJbaTIgKyBpJDEgfCAwXSA9IHMxLmNoYXJDb2RlQXQoaTEgKyBpJDEgfCAwKTtcbiAgICAgIH1cbiAgICAgIGZvcih2YXIgaSQyID0gb2ZmMSAsaV9maW5pc2gkMiA9IGxlbiAtIDEgfCAwOyBpJDIgPD0gaV9maW5pc2gkMjsgKytpJDIpe1xuICAgICAgICBzMltpMiArIGkkMiB8IDBdID0gLyogXCJcXDAwMFwiICovMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAvKiAoKSAqLzA7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJ5dGVzX29mX3N0cmluZyhzKSB7XG4gIHZhciBsZW4gPSBzLmxlbmd0aDtcbiAgdmFyIHJlcyA9IG5ldyBBcnJheShsZW4pO1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGxlbiAtIDEgfCAwOyBpIDw9IGlfZmluaXNoOyArK2kpe1xuICAgIHJlc1tpXSA9IHMuY2hhckNvZGVBdChpKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuXG5leHBvcnRzLmNhbWxfY3JlYXRlX2J5dGVzID0gY2FtbF9jcmVhdGVfYnl0ZXM7XG5leHBvcnRzLmNhbWxfZmlsbF9ieXRlcyA9IGNhbWxfZmlsbF9ieXRlcztcbmV4cG9ydHMuZ2V0ID0gZ2V0O1xuZXhwb3J0cy5ieXRlc190b19zdHJpbmcgPSBieXRlc190b19zdHJpbmc7XG5leHBvcnRzLmNhbWxfYmxpdF9ieXRlcyA9IGNhbWxfYmxpdF9ieXRlcztcbmV4cG9ydHMuY2FtbF9ibGl0X3N0cmluZyA9IGNhbWxfYmxpdF9zdHJpbmc7XG5leHBvcnRzLmJ5dGVzX29mX3N0cmluZyA9IGJ5dGVzX29mX3N0cmluZztcbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCIndXNlIHN0cmljdCc7XG5cblxudmFyIGlkID0gLyogcmVjb3JkICovWy8qIGNvbnRlbnRzICovMF07XG5cbmZ1bmN0aW9uIGNhbWxfc2V0X29vX2lkKGIpIHtcbiAgYlsxXSA9IGlkWzBdO1xuICBpZFswXSArPSAxO1xuICByZXR1cm4gYjtcbn1cblxuZnVuY3Rpb24gY2FtbF9mcmVzaF9vb19pZChwYXJhbSkge1xuICBpZFswXSArPSAxO1xuICByZXR1cm4gaWRbMF07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZShzdHIpIHtcbiAgdmFyIHZfMDAxID0gY2FtbF9mcmVzaF9vb19pZCgvKiAoKSAqLzApO1xuICB2YXIgdiA9IC8qIHR1cGxlICovW1xuICAgIHN0cixcbiAgICB2XzAwMVxuICBdO1xuICB2LnRhZyA9IDI0ODtcbiAgcmV0dXJuIHY7XG59XG5cbmZ1bmN0aW9uIGNhbWxfaXNfZXh0ZW5zaW9uKGUpIHtcbiAgaWYgKGUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChlLnRhZyA9PT0gMjQ4KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHNsb3QgPSBlWzBdO1xuICAgIGlmIChzbG90ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBzbG90LnRhZyA9PT0gMjQ4O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydHMuY2FtbF9zZXRfb29faWQgPSBjYW1sX3NldF9vb19pZDtcbmV4cG9ydHMuY2FtbF9mcmVzaF9vb19pZCA9IGNhbWxfZnJlc2hfb29faWQ7XG5leHBvcnRzLmNyZWF0ZSA9IGNyZWF0ZTtcbmV4cG9ydHMuY2FtbF9pc19leHRlbnNpb24gPSBjYW1sX2lzX2V4dGVuc2lvbjtcbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW1sX2ludDMyID0gcmVxdWlyZShcIi4vY2FtbF9pbnQzMi5qc1wiKTtcbnZhciBDYW1sX2ludDY0ID0gcmVxdWlyZShcIi4vY2FtbF9pbnQ2NC5qc1wiKTtcbnZhciBDYW1sX3V0aWxzID0gcmVxdWlyZShcIi4vY2FtbF91dGlscy5qc1wiKTtcbnZhciBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucyA9IHJlcXVpcmUoXCIuL2NhbWxfYnVpbHRpbl9leGNlcHRpb25zLmpzXCIpO1xuXG5mdW5jdGlvbiBwYXJzZV9kaWdpdChjKSB7XG4gIGlmIChjID49IDY1KSB7XG4gICAgaWYgKGMgPj0gOTcpIHtcbiAgICAgIGlmIChjID49IDEyMykge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYyAtIDg3IHwgMDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGMgPj0gOTEpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGMgLSA1NSB8IDA7XG4gICAgfVxuICB9IGVsc2UgaWYgKGMgPiA1NyB8fCBjIDwgNDgpIHtcbiAgICByZXR1cm4gLTE7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGMgLSAvKiBcIjBcIiAqLzQ4IHwgMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnRfb2Zfc3RyaW5nX2Jhc2UocGFyYW0pIHtcbiAgc3dpdGNoIChwYXJhbSkge1xuICAgIGNhc2UgMCA6IFxuICAgICAgICByZXR1cm4gODtcbiAgICBjYXNlIDEgOiBcbiAgICAgICAgcmV0dXJuIDE2O1xuICAgIGNhc2UgMiA6IFxuICAgICAgICByZXR1cm4gMTA7XG4gICAgY2FzZSAzIDogXG4gICAgICAgIHJldHVybiAyO1xuICAgIFxuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlX3NpZ25fYW5kX2Jhc2Uocykge1xuICB2YXIgc2lnbiA9IDE7XG4gIHZhciBiYXNlID0gLyogRGVjICovMjtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbWF0Y2ggPSBzLmNoYXJDb2RlQXQoaSk7XG4gIHN3aXRjaCAobWF0Y2gpIHtcbiAgICBjYXNlIDQzIDogXG4gICAgICAgIGkgPSBpICsgMSB8IDA7XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgNDQgOiBcbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSA0NSA6IFxuICAgICAgICBzaWduID0gLTE7XG4gICAgICAgIGkgPSBpICsgMSB8IDA7XG4gICAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBcbiAgfVxuICBpZiAoc1tpXSA9PT0gXCIwXCIpIHtcbiAgICB2YXIgbWF0Y2gkMSA9IHMuY2hhckNvZGVBdChpICsgMSB8IDApO1xuICAgIGlmIChtYXRjaCQxID49IDg5KSB7XG4gICAgICBpZiAobWF0Y2gkMSA+PSAxMTEpIHtcbiAgICAgICAgaWYgKG1hdGNoJDEgPCAxMjEpIHtcbiAgICAgICAgICBzd2l0Y2ggKG1hdGNoJDEgLSAxMTEgfCAwKSB7XG4gICAgICAgICAgICBjYXNlIDAgOiBcbiAgICAgICAgICAgICAgICBiYXNlID0gLyogT2N0ICovMDtcbiAgICAgICAgICAgICAgICBpID0gaSArIDIgfCAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA2IDogXG4gICAgICAgICAgICAgICAgaSA9IGkgKyAyIHwgMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMSA6IFxuICAgICAgICAgICAgY2FzZSAyIDogXG4gICAgICAgICAgICBjYXNlIDMgOiBcbiAgICAgICAgICAgIGNhc2UgNCA6IFxuICAgICAgICAgICAgY2FzZSA1IDogXG4gICAgICAgICAgICBjYXNlIDcgOiBcbiAgICAgICAgICAgIGNhc2UgOCA6IFxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA5IDogXG4gICAgICAgICAgICAgICAgYmFzZSA9IC8qIEhleCAqLzE7XG4gICAgICAgICAgICAgICAgaSA9IGkgKyAyIHwgMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgIH0gZWxzZSBpZiAobWF0Y2gkMSA9PT0gOTgpIHtcbiAgICAgICAgYmFzZSA9IC8qIEJpbiAqLzM7XG4gICAgICAgIGkgPSBpICsgMiB8IDA7XG4gICAgICB9XG4gICAgICBcbiAgICB9IGVsc2UgaWYgKG1hdGNoJDEgIT09IDY2KSB7XG4gICAgICBpZiAobWF0Y2gkMSA+PSA3OSkge1xuICAgICAgICBzd2l0Y2ggKG1hdGNoJDEgLSA3OSB8IDApIHtcbiAgICAgICAgICBjYXNlIDAgOiBcbiAgICAgICAgICAgICAgYmFzZSA9IC8qIE9jdCAqLzA7XG4gICAgICAgICAgICAgIGkgPSBpICsgMiB8IDA7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgNiA6IFxuICAgICAgICAgICAgICBpID0gaSArIDIgfCAwO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDEgOiBcbiAgICAgICAgICBjYXNlIDIgOiBcbiAgICAgICAgICBjYXNlIDMgOiBcbiAgICAgICAgICBjYXNlIDQgOiBcbiAgICAgICAgICBjYXNlIDUgOiBcbiAgICAgICAgICBjYXNlIDcgOiBcbiAgICAgICAgICBjYXNlIDggOiBcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSA5IDogXG4gICAgICAgICAgICAgIGJhc2UgPSAvKiBIZXggKi8xO1xuICAgICAgICAgICAgICBpID0gaSArIDIgfCAwO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgfSBlbHNlIHtcbiAgICAgIGJhc2UgPSAvKiBCaW4gKi8zO1xuICAgICAgaSA9IGkgKyAyIHwgMDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgIGksXG4gICAgICAgICAgc2lnbixcbiAgICAgICAgICBiYXNlXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGNhbWxfaW50X29mX3N0cmluZyhzKSB7XG4gIHZhciBtYXRjaCA9IHBhcnNlX3NpZ25fYW5kX2Jhc2Uocyk7XG4gIHZhciBpID0gbWF0Y2hbMF07XG4gIHZhciBiYXNlID0gaW50X29mX3N0cmluZ19iYXNlKG1hdGNoWzJdKTtcbiAgdmFyIHRocmVzaG9sZCA9IDQyOTQ5NjcyOTU7XG4gIHZhciBsZW4gPSBzLmxlbmd0aDtcbiAgdmFyIGMgPSBpIDwgbGVuID8gcy5jaGFyQ29kZUF0KGkpIDogLyogXCJcXDAwMFwiICovMDtcbiAgdmFyIGQgPSBwYXJzZV9kaWdpdChjKTtcbiAgaWYgKGQgPCAwIHx8IGQgPj0gYmFzZSkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5mYWlsdXJlLFxuICAgICAgICAgIFwiaW50X29mX3N0cmluZ1wiXG4gICAgICAgIF07XG4gIH1cbiAgdmFyIGF1eCA9IGZ1bmN0aW9uIChfYWNjLCBfaykge1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgIHZhciBrID0gX2s7XG4gICAgICB2YXIgYWNjID0gX2FjYztcbiAgICAgIGlmIChrID09PSBsZW4pIHtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBhID0gcy5jaGFyQ29kZUF0KGspO1xuICAgICAgICBpZiAoYSA9PT0gLyogXCJfXCIgKi85NSkge1xuICAgICAgICAgIF9rID0gayArIDEgfCAwO1xuICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgdiA9IHBhcnNlX2RpZ2l0KGEpO1xuICAgICAgICAgIGlmICh2IDwgMCB8fCB2ID49IGJhc2UpIHtcbiAgICAgICAgICAgIHRocm93IFtcbiAgICAgICAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmZhaWx1cmUsXG4gICAgICAgICAgICAgICAgICBcImludF9vZl9zdHJpbmdcIlxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBhY2MkMSA9IGJhc2UgKiBhY2MgKyB2O1xuICAgICAgICAgICAgaWYgKGFjYyQxID4gdGhyZXNob2xkKSB7XG4gICAgICAgICAgICAgIHRocm93IFtcbiAgICAgICAgICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuZmFpbHVyZSxcbiAgICAgICAgICAgICAgICAgICAgXCJpbnRfb2Zfc3RyaW5nXCJcbiAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBfayA9IGsgKyAxIHwgMDtcbiAgICAgICAgICAgICAgX2FjYyA9IGFjYyQxO1xuICAgICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbiAgdmFyIHJlcyA9IG1hdGNoWzFdICogYXV4KGQsIGkgKyAxIHwgMCk7XG4gIHZhciBvcl9yZXMgPSByZXMgfCAwO1xuICBpZiAoYmFzZSA9PT0gMTAgJiYgcmVzICE9PSBvcl9yZXMpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuZmFpbHVyZSxcbiAgICAgICAgICBcImludF9vZl9zdHJpbmdcIlxuICAgICAgICBdO1xuICB9XG4gIHJldHVybiBvcl9yZXM7XG59XG5cbmZ1bmN0aW9uIGNhbWxfaW50NjRfb2Zfc3RyaW5nKHMpIHtcbiAgdmFyIG1hdGNoID0gcGFyc2Vfc2lnbl9hbmRfYmFzZShzKTtcbiAgdmFyIGhiYXNlID0gbWF0Y2hbMl07XG4gIHZhciBpID0gbWF0Y2hbMF07XG4gIHZhciBiYXNlID0gQ2FtbF9pbnQ2NC5vZl9pbnQzMihpbnRfb2Zfc3RyaW5nX2Jhc2UoaGJhc2UpKTtcbiAgdmFyIHNpZ24gPSBDYW1sX2ludDY0Lm9mX2ludDMyKG1hdGNoWzFdKTtcbiAgdmFyIHRocmVzaG9sZDtcbiAgc3dpdGNoIChoYmFzZSkge1xuICAgIGNhc2UgMCA6IFxuICAgICAgICB0aHJlc2hvbGQgPSAvKiBpbnQ2NCAqL1tcbiAgICAgICAgICAvKiBoaSAqLzUzNjg3MDkxMSxcbiAgICAgICAgICAvKiBsbyAqLzQyOTQ5NjcyOTVcbiAgICAgICAgXTtcbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSAxIDogXG4gICAgICAgIHRocmVzaG9sZCA9IC8qIGludDY0ICovW1xuICAgICAgICAgIC8qIGhpICovMjY4NDM1NDU1LFxuICAgICAgICAgIC8qIGxvICovNDI5NDk2NzI5NVxuICAgICAgICBdO1xuICAgICAgICBicmVhaztcbiAgICBjYXNlIDIgOiBcbiAgICAgICAgdGhyZXNob2xkID0gLyogaW50NjQgKi9bXG4gICAgICAgICAgLyogaGkgKi80Mjk0OTY3MjksXG4gICAgICAgICAgLyogbG8gKi8yNTc2OTgwMzc3XG4gICAgICAgIF07XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgMyA6IFxuICAgICAgICB0aHJlc2hvbGQgPSAvKiBpbnQ2NCAqL1tcbiAgICAgICAgICAvKiBoaSAqLzIxNDc0ODM2NDcsXG4gICAgICAgICAgLyogbG8gKi80Mjk0OTY3Mjk1XG4gICAgICAgIF07XG4gICAgICAgIGJyZWFrO1xuICAgIFxuICB9XG4gIHZhciBsZW4gPSBzLmxlbmd0aDtcbiAgdmFyIGMgPSBpIDwgbGVuID8gcy5jaGFyQ29kZUF0KGkpIDogLyogXCJcXDAwMFwiICovMDtcbiAgdmFyIGQgPSBDYW1sX2ludDY0Lm9mX2ludDMyKHBhcnNlX2RpZ2l0KGMpKTtcbiAgaWYgKENhbWxfaW50NjQubHQoZCwgLyogaW50NjQgKi9bXG4gICAgICAgICAgLyogaGkgKi8wLFxuICAgICAgICAgIC8qIGxvICovMFxuICAgICAgICBdKSB8fCBDYW1sX2ludDY0LmdlKGQsIGJhc2UpKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmZhaWx1cmUsXG4gICAgICAgICAgXCJpbnQ2NF9vZl9zdHJpbmdcIlxuICAgICAgICBdO1xuICB9XG4gIHZhciBhdXggPSBmdW5jdGlvbiAoX2FjYywgX2spIHtcbiAgICB3aGlsZSh0cnVlKSB7XG4gICAgICB2YXIgayA9IF9rO1xuICAgICAgdmFyIGFjYyA9IF9hY2M7XG4gICAgICBpZiAoayA9PT0gbGVuKSB7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgYSA9IHMuY2hhckNvZGVBdChrKTtcbiAgICAgICAgaWYgKGEgPT09IC8qIFwiX1wiICovOTUpIHtcbiAgICAgICAgICBfayA9IGsgKyAxIHwgMDtcbiAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHYgPSBDYW1sX2ludDY0Lm9mX2ludDMyKHBhcnNlX2RpZ2l0KGEpKTtcbiAgICAgICAgICBpZiAoQ2FtbF9pbnQ2NC5sdCh2LCAvKiBpbnQ2NCAqL1tcbiAgICAgICAgICAgICAgICAgIC8qIGhpICovMCxcbiAgICAgICAgICAgICAgICAgIC8qIGxvICovMFxuICAgICAgICAgICAgICAgIF0pIHx8IENhbWxfaW50NjQuZ2UodiwgYmFzZSkgfHwgQ2FtbF9pbnQ2NC5ndChhY2MsIHRocmVzaG9sZCkpIHtcbiAgICAgICAgICAgIHRocm93IFtcbiAgICAgICAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmZhaWx1cmUsXG4gICAgICAgICAgICAgICAgICBcImludDY0X29mX3N0cmluZ1wiXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGFjYyQxID0gQ2FtbF9pbnQ2NC5hZGQoQ2FtbF9pbnQ2NC5tdWwoYmFzZSwgYWNjKSwgdik7XG4gICAgICAgICAgICBfayA9IGsgKyAxIHwgMDtcbiAgICAgICAgICAgIF9hY2MgPSBhY2MkMTtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9O1xuICB2YXIgcmVzID0gQ2FtbF9pbnQ2NC5tdWwoc2lnbiwgYXV4KGQsIGkgKyAxIHwgMCkpO1xuICB2YXIgb3JfcmVzID0gQ2FtbF9pbnQ2NC5vcl8ocmVzLCAvKiBpbnQ2NCAqL1tcbiAgICAgICAgLyogaGkgKi8wLFxuICAgICAgICAvKiBsbyAqLzBcbiAgICAgIF0pO1xuICBpZiAoQ2FtbF9pbnQ2NC5lcShiYXNlLCAvKiBpbnQ2NCAqL1tcbiAgICAgICAgICAvKiBoaSAqLzAsXG4gICAgICAgICAgLyogbG8gKi8xMFxuICAgICAgICBdKSAmJiBDYW1sX2ludDY0Lm5lcShyZXMsIG9yX3JlcykpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuZmFpbHVyZSxcbiAgICAgICAgICBcImludDY0X29mX3N0cmluZ1wiXG4gICAgICAgIF07XG4gIH1cbiAgcmV0dXJuIG9yX3Jlcztcbn1cblxuZnVuY3Rpb24gaW50X29mX2Jhc2UocGFyYW0pIHtcbiAgc3dpdGNoIChwYXJhbSkge1xuICAgIGNhc2UgMCA6IFxuICAgICAgICByZXR1cm4gODtcbiAgICBjYXNlIDEgOiBcbiAgICAgICAgcmV0dXJuIDE2O1xuICAgIGNhc2UgMiA6IFxuICAgICAgICByZXR1cm4gMTA7XG4gICAgXG4gIH1cbn1cblxuZnVuY3Rpb24gbG93ZXJjYXNlKGMpIHtcbiAgaWYgKGMgPj0gLyogXCJBXCIgKi82NSAmJiBjIDw9IC8qIFwiWlwiICovOTAgfHwgYyA+PSAvKiBcIlxcMTkyXCIgKi8xOTIgJiYgYyA8PSAvKiBcIlxcMjE0XCIgKi8yMTQgfHwgYyA+PSAvKiBcIlxcMjE2XCIgKi8yMTYgJiYgYyA8PSAvKiBcIlxcMjIyXCIgKi8yMjIpIHtcbiAgICByZXR1cm4gYyArIDMyIHwgMDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYztcbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZV9mb3JtYXQoZm10KSB7XG4gIHZhciBsZW4gPSBmbXQubGVuZ3RoO1xuICBpZiAobGVuID4gMzEpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcImZvcm1hdF9pbnQ6IGZvcm1hdCB0b28gbG9uZ1wiXG4gICAgICAgIF07XG4gIH1cbiAgdmFyIGYgPSAvKiByZWNvcmQgKi9bXG4gICAgLyoganVzdGlmeSAqL1wiK1wiLFxuICAgIC8qIHNpZ25zdHlsZSAqL1wiLVwiLFxuICAgIC8qIGZpbHRlciAqL1wiIFwiLFxuICAgIC8qIGFsdGVybmF0ZSAqL2ZhbHNlLFxuICAgIC8qIGJhc2UgOiBEZWMgKi8yLFxuICAgIC8qIHNpZ25lZGNvbnYgKi9mYWxzZSxcbiAgICAvKiB3aWR0aCAqLzAsXG4gICAgLyogdXBwZXJjYXNlICovZmFsc2UsXG4gICAgLyogc2lnbiAqLzEsXG4gICAgLyogcHJlYyAqLy0xLFxuICAgIC8qIGNvbnYgKi9cImZcIlxuICBdO1xuICB2YXIgX2kgPSAwO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGkgPSBfaTtcbiAgICBpZiAoaSA+PSBsZW4pIHtcbiAgICAgIHJldHVybiBmO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYyA9IGZtdC5jaGFyQ29kZUF0KGkpO1xuICAgICAgdmFyIGV4aXQgPSAwO1xuICAgICAgaWYgKGMgPj0gNjkpIHtcbiAgICAgICAgaWYgKGMgPj0gODgpIHtcbiAgICAgICAgICBpZiAoYyA+PSAxMjEpIHtcbiAgICAgICAgICAgIGV4aXQgPSAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGMgLSA4OCB8IDApIHtcbiAgICAgICAgICAgICAgY2FzZSAwIDogXG4gICAgICAgICAgICAgICAgICBmWy8qIGJhc2UgKi80XSA9IC8qIEhleCAqLzE7XG4gICAgICAgICAgICAgICAgICBmWy8qIHVwcGVyY2FzZSAqLzddID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgICAgICBjYXNlIDEzIDogXG4gICAgICAgICAgICAgIGNhc2UgMTQgOiBcbiAgICAgICAgICAgICAgY2FzZSAxNSA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDU7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxMiA6IFxuICAgICAgICAgICAgICBjYXNlIDE3IDogXG4gICAgICAgICAgICAgICAgICBleGl0ID0gNDtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDIzIDogXG4gICAgICAgICAgICAgICAgICBmWy8qIGJhc2UgKi80XSA9IC8qIE9jdCAqLzA7XG4gICAgICAgICAgICAgICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICAgICAgY2FzZSAyOSA6IFxuICAgICAgICAgICAgICAgICAgZlsvKiBiYXNlICovNF0gPSAvKiBEZWMgKi8yO1xuICAgICAgICAgICAgICAgICAgX2kgPSBpICsgMSB8IDA7XG4gICAgICAgICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgICAgIGNhc2UgMSA6IFxuICAgICAgICAgICAgICBjYXNlIDIgOiBcbiAgICAgICAgICAgICAgY2FzZSAzIDogXG4gICAgICAgICAgICAgIGNhc2UgNCA6IFxuICAgICAgICAgICAgICBjYXNlIDUgOiBcbiAgICAgICAgICAgICAgY2FzZSA2IDogXG4gICAgICAgICAgICAgIGNhc2UgNyA6IFxuICAgICAgICAgICAgICBjYXNlIDggOiBcbiAgICAgICAgICAgICAgY2FzZSA5IDogXG4gICAgICAgICAgICAgIGNhc2UgMTAgOiBcbiAgICAgICAgICAgICAgY2FzZSAxMSA6IFxuICAgICAgICAgICAgICBjYXNlIDE2IDogXG4gICAgICAgICAgICAgIGNhc2UgMTggOiBcbiAgICAgICAgICAgICAgY2FzZSAxOSA6IFxuICAgICAgICAgICAgICBjYXNlIDIwIDogXG4gICAgICAgICAgICAgIGNhc2UgMjEgOiBcbiAgICAgICAgICAgICAgY2FzZSAyMiA6IFxuICAgICAgICAgICAgICBjYXNlIDI0IDogXG4gICAgICAgICAgICAgIGNhc2UgMjUgOiBcbiAgICAgICAgICAgICAgY2FzZSAyNiA6IFxuICAgICAgICAgICAgICBjYXNlIDI3IDogXG4gICAgICAgICAgICAgIGNhc2UgMjggOiBcbiAgICAgICAgICAgICAgY2FzZSAzMCA6IFxuICAgICAgICAgICAgICBjYXNlIDMxIDogXG4gICAgICAgICAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDMyIDogXG4gICAgICAgICAgICAgICAgICBmWy8qIGJhc2UgKi80XSA9IC8qIEhleCAqLzE7XG4gICAgICAgICAgICAgICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGMgPj0gNzIpIHtcbiAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmWy8qIHNpZ25lZGNvbnYgKi81XSA9IHRydWU7XG4gICAgICAgICAgZlsvKiB1cHBlcmNhc2UgKi83XSA9IHRydWU7XG4gICAgICAgICAgZlsvKiBjb252ICovMTBdID0gU3RyaW5nLmZyb21DaGFyQ29kZShsb3dlcmNhc2UoYykpO1xuICAgICAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgICAgY2FzZSAzNSA6IFxuICAgICAgICAgICAgICBmWy8qIGFsdGVybmF0ZSAqLzNdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgX2kgPSBpICsgMSB8IDA7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICBjYXNlIDMyIDogXG4gICAgICAgICAgY2FzZSA0MyA6IFxuICAgICAgICAgICAgICBleGl0ID0gMjtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSA0NSA6IFxuICAgICAgICAgICAgICBmWy8qIGp1c3RpZnkgKi8wXSA9IFwiLVwiO1xuICAgICAgICAgICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgIGNhc2UgNDYgOiBcbiAgICAgICAgICAgICAgZlsvKiBwcmVjICovOV0gPSAwO1xuICAgICAgICAgICAgICB2YXIgaiA9IGkgKyAxIHwgMDtcbiAgICAgICAgICAgICAgd2hpbGUoKGZ1bmN0aW9uKGope1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHcgPSBmbXQuY2hhckNvZGVBdChqKSAtIC8qIFwiMFwiICovNDggfCAwO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdyA+PSAwICYmIHcgPD0gOTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0oaikpKCkpIHtcbiAgICAgICAgICAgICAgICBmWy8qIHByZWMgKi85XSA9IChDYW1sX2ludDMyLmltdWwoZlsvKiBwcmVjICovOV0sIDEwKSArIGZtdC5jaGFyQ29kZUF0KGopIHwgMCkgLSAvKiBcIjBcIiAqLzQ4IHwgMDtcbiAgICAgICAgICAgICAgICBqID0gaiArIDEgfCAwO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBfaSA9IGo7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICBjYXNlIDMzIDogXG4gICAgICAgICAgY2FzZSAzNCA6IFxuICAgICAgICAgIGNhc2UgMzYgOiBcbiAgICAgICAgICBjYXNlIDM3IDogXG4gICAgICAgICAgY2FzZSAzOCA6IFxuICAgICAgICAgIGNhc2UgMzkgOiBcbiAgICAgICAgICBjYXNlIDQwIDogXG4gICAgICAgICAgY2FzZSA0MSA6IFxuICAgICAgICAgIGNhc2UgNDIgOiBcbiAgICAgICAgICBjYXNlIDQ0IDogXG4gICAgICAgICAgY2FzZSA0NyA6IFxuICAgICAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSA0OCA6IFxuICAgICAgICAgICAgICBmWy8qIGZpbHRlciAqLzJdID0gXCIwXCI7XG4gICAgICAgICAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgY2FzZSA0OSA6IFxuICAgICAgICAgIGNhc2UgNTAgOiBcbiAgICAgICAgICBjYXNlIDUxIDogXG4gICAgICAgICAgY2FzZSA1MiA6IFxuICAgICAgICAgIGNhc2UgNTMgOiBcbiAgICAgICAgICBjYXNlIDU0IDogXG4gICAgICAgICAgY2FzZSA1NSA6IFxuICAgICAgICAgIGNhc2UgNTYgOiBcbiAgICAgICAgICBjYXNlIDU3IDogXG4gICAgICAgICAgICAgIGV4aXQgPSAzO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN3aXRjaCAoZXhpdCkge1xuICAgICAgICBjYXNlIDEgOiBcbiAgICAgICAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICBjYXNlIDIgOiBcbiAgICAgICAgICAgIGZbLyogc2lnbnN0eWxlICovMV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGMpO1xuICAgICAgICAgICAgX2kgPSBpICsgMSB8IDA7XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIGNhc2UgMyA6IFxuICAgICAgICAgICAgZlsvKiB3aWR0aCAqLzZdID0gMDtcbiAgICAgICAgICAgIHZhciBqJDEgPSBpO1xuICAgICAgICAgICAgd2hpbGUoKGZ1bmN0aW9uKGokMSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB3ID0gZm10LmNoYXJDb2RlQXQoaiQxKSAtIC8qIFwiMFwiICovNDggfCAwO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHcgPj0gMCAmJiB3IDw9IDk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0oaiQxKSkoKSkge1xuICAgICAgICAgICAgICBmWy8qIHdpZHRoICovNl0gPSAoQ2FtbF9pbnQzMi5pbXVsKGZbLyogd2lkdGggKi82XSwgMTApICsgZm10LmNoYXJDb2RlQXQoaiQxKSB8IDApIC0gLyogXCIwXCIgKi80OCB8IDA7XG4gICAgICAgICAgICAgIGokMSA9IGokMSArIDEgfCAwO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIF9pID0gaiQxO1xuICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICBjYXNlIDQgOiBcbiAgICAgICAgICAgIGZbLyogc2lnbmVkY29udiAqLzVdID0gdHJ1ZTtcbiAgICAgICAgICAgIGZbLyogYmFzZSAqLzRdID0gLyogRGVjICovMjtcbiAgICAgICAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICBjYXNlIDUgOiBcbiAgICAgICAgICAgIGZbLyogc2lnbmVkY29udiAqLzVdID0gdHJ1ZTtcbiAgICAgICAgICAgIGZbLyogY29udiAqLzEwXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoYyk7XG4gICAgICAgICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgXG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBmaW5pc2hfZm9ybWF0dGluZyhjb25maWcsIHJhd2J1ZmZlcikge1xuICB2YXIganVzdGlmeSA9IGNvbmZpZ1svKiBqdXN0aWZ5ICovMF07XG4gIHZhciBzaWduc3R5bGUgPSBjb25maWdbLyogc2lnbnN0eWxlICovMV07XG4gIHZhciBmaWx0ZXIgPSBjb25maWdbLyogZmlsdGVyICovMl07XG4gIHZhciBhbHRlcm5hdGUgPSBjb25maWdbLyogYWx0ZXJuYXRlICovM107XG4gIHZhciBiYXNlID0gY29uZmlnWy8qIGJhc2UgKi80XTtcbiAgdmFyIHNpZ25lZGNvbnYgPSBjb25maWdbLyogc2lnbmVkY29udiAqLzVdO1xuICB2YXIgd2lkdGggPSBjb25maWdbLyogd2lkdGggKi82XTtcbiAgdmFyIHVwcGVyY2FzZSA9IGNvbmZpZ1svKiB1cHBlcmNhc2UgKi83XTtcbiAgdmFyIHNpZ24gPSBjb25maWdbLyogc2lnbiAqLzhdO1xuICB2YXIgbGVuID0gcmF3YnVmZmVyLmxlbmd0aDtcbiAgaWYgKHNpZ25lZGNvbnYgJiYgKHNpZ24gPCAwIHx8IHNpZ25zdHlsZSAhPT0gXCItXCIpKSB7XG4gICAgbGVuID0gbGVuICsgMSB8IDA7XG4gIH1cbiAgaWYgKGFsdGVybmF0ZSkge1xuICAgIGlmIChiYXNlID09PSAvKiBPY3QgKi8wKSB7XG4gICAgICBsZW4gPSBsZW4gKyAxIHwgMDtcbiAgICB9IGVsc2UgaWYgKGJhc2UgPT09IC8qIEhleCAqLzEpIHtcbiAgICAgIGxlbiA9IGxlbiArIDIgfCAwO1xuICAgIH1cbiAgICBcbiAgfVxuICB2YXIgYnVmZmVyID0gXCJcIjtcbiAgaWYgKGp1c3RpZnkgPT09IFwiK1wiICYmIGZpbHRlciA9PT0gXCIgXCIpIHtcbiAgICBmb3IodmFyIGkgPSBsZW4gLGlfZmluaXNoID0gd2lkdGggLSAxIHwgMDsgaSA8PSBpX2ZpbmlzaDsgKytpKXtcbiAgICAgIGJ1ZmZlciA9IGJ1ZmZlciArIGZpbHRlcjtcbiAgICB9XG4gIH1cbiAgaWYgKHNpZ25lZGNvbnYpIHtcbiAgICBpZiAoc2lnbiA8IDApIHtcbiAgICAgIGJ1ZmZlciA9IGJ1ZmZlciArIFwiLVwiO1xuICAgIH0gZWxzZSBpZiAoc2lnbnN0eWxlICE9PSBcIi1cIikge1xuICAgICAgYnVmZmVyID0gYnVmZmVyICsgc2lnbnN0eWxlO1xuICAgIH1cbiAgICBcbiAgfVxuICBpZiAoYWx0ZXJuYXRlICYmIGJhc2UgPT09IC8qIE9jdCAqLzApIHtcbiAgICBidWZmZXIgPSBidWZmZXIgKyBcIjBcIjtcbiAgfVxuICBpZiAoYWx0ZXJuYXRlICYmIGJhc2UgPT09IC8qIEhleCAqLzEpIHtcbiAgICBidWZmZXIgPSBidWZmZXIgKyBcIjB4XCI7XG4gIH1cbiAgaWYgKGp1c3RpZnkgPT09IFwiK1wiICYmIGZpbHRlciA9PT0gXCIwXCIpIHtcbiAgICBmb3IodmFyIGkkMSA9IGxlbiAsaV9maW5pc2gkMSA9IHdpZHRoIC0gMSB8IDA7IGkkMSA8PSBpX2ZpbmlzaCQxOyArK2kkMSl7XG4gICAgICBidWZmZXIgPSBidWZmZXIgKyBmaWx0ZXI7XG4gICAgfVxuICB9XG4gIGJ1ZmZlciA9IHVwcGVyY2FzZSA/IGJ1ZmZlciArIHJhd2J1ZmZlci50b1VwcGVyQ2FzZSgpIDogYnVmZmVyICsgcmF3YnVmZmVyO1xuICBpZiAoanVzdGlmeSA9PT0gXCItXCIpIHtcbiAgICBmb3IodmFyIGkkMiA9IGxlbiAsaV9maW5pc2gkMiA9IHdpZHRoIC0gMSB8IDA7IGkkMiA8PSBpX2ZpbmlzaCQyOyArK2kkMil7XG4gICAgICBidWZmZXIgPSBidWZmZXIgKyBcIiBcIjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cblxuZnVuY3Rpb24gY2FtbF9mb3JtYXRfaW50KGZtdCwgaSkge1xuICBpZiAoZm10ID09PSBcIiVkXCIpIHtcbiAgICByZXR1cm4gU3RyaW5nKGkpO1xuICB9IGVsc2Uge1xuICAgIHZhciBmID0gcGFyc2VfZm9ybWF0KGZtdCk7XG4gICAgdmFyIGYkMSA9IGY7XG4gICAgdmFyIGkkMSA9IGk7XG4gICAgdmFyIGkkMiA9IGkkMSA8IDAgPyAoXG4gICAgICAgIGYkMVsvKiBzaWduZWRjb252ICovNV0gPyAoZiQxWy8qIHNpZ24gKi84XSA9IC0xLCAtaSQxKSA6IChpJDEgPj4+IDApXG4gICAgICApIDogaSQxO1xuICAgIHZhciBzID0gaSQyLnRvU3RyaW5nKGludF9vZl9iYXNlKGYkMVsvKiBiYXNlICovNF0pKTtcbiAgICBpZiAoZiQxWy8qIHByZWMgKi85XSA+PSAwKSB7XG4gICAgICBmJDFbLyogZmlsdGVyICovMl0gPSBcIiBcIjtcbiAgICAgIHZhciBuID0gZiQxWy8qIHByZWMgKi85XSAtIHMubGVuZ3RoIHwgMDtcbiAgICAgIGlmIChuID4gMCkge1xuICAgICAgICBzID0gQ2FtbF91dGlscy5yZXBlYXQobiwgXCIwXCIpICsgcztcbiAgICAgIH1cbiAgICAgIFxuICAgIH1cbiAgICByZXR1cm4gZmluaXNoX2Zvcm1hdHRpbmcoZiQxLCBzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX2ludDY0X2Zvcm1hdChmbXQsIHgpIHtcbiAgdmFyIGYgPSBwYXJzZV9mb3JtYXQoZm10KTtcbiAgdmFyIHgkMSA9IGZbLyogc2lnbmVkY29udiAqLzVdICYmIENhbWxfaW50NjQubHQoeCwgLyogaW50NjQgKi9bXG4gICAgICAgIC8qIGhpICovMCxcbiAgICAgICAgLyogbG8gKi8wXG4gICAgICBdKSA/IChmWy8qIHNpZ24gKi84XSA9IC0xLCBDYW1sX2ludDY0Lm5lZyh4KSkgOiB4O1xuICB2YXIgcyA9IFwiXCI7XG4gIHZhciBtYXRjaCA9IGZbLyogYmFzZSAqLzRdO1xuICBzd2l0Y2ggKG1hdGNoKSB7XG4gICAgY2FzZSAwIDogXG4gICAgICAgIHZhciB3YmFzZSA9IC8qIGludDY0ICovW1xuICAgICAgICAgIC8qIGhpICovMCxcbiAgICAgICAgICAvKiBsbyAqLzhcbiAgICAgICAgXTtcbiAgICAgICAgdmFyIGN2dGJsID0gXCIwMTIzNDU2N1wiO1xuICAgICAgICBpZiAoQ2FtbF9pbnQ2NC5sdCh4JDEsIC8qIGludDY0ICovW1xuICAgICAgICAgICAgICAgIC8qIGhpICovMCxcbiAgICAgICAgICAgICAgICAvKiBsbyAqLzBcbiAgICAgICAgICAgICAgXSkpIHtcbiAgICAgICAgICB2YXIgeSA9IENhbWxfaW50NjQuZGlzY2FyZF9zaWduKHgkMSk7XG4gICAgICAgICAgdmFyIG1hdGNoJDEgPSBDYW1sX2ludDY0LmRpdl9tb2QoeSwgd2Jhc2UpO1xuICAgICAgICAgIHZhciBxdW90aWVudCA9IENhbWxfaW50NjQuYWRkKC8qIGludDY0ICovW1xuICAgICAgICAgICAgICAgIC8qIGhpICovMjY4NDM1NDU2LFxuICAgICAgICAgICAgICAgIC8qIGxvICovMFxuICAgICAgICAgICAgICBdLCBtYXRjaCQxWzBdKTtcbiAgICAgICAgICB2YXIgbW9kdWx1cyA9IG1hdGNoJDFbMV07XG4gICAgICAgICAgcyA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY3Z0YmwuY2hhckNvZGVBdChtb2R1bHVzWzFdIHwgMCkpICsgcztcbiAgICAgICAgICB3aGlsZShDYW1sX2ludDY0Lm5lcShxdW90aWVudCwgLyogaW50NjQgKi9bXG4gICAgICAgICAgICAgICAgICAvKiBoaSAqLzAsXG4gICAgICAgICAgICAgICAgICAvKiBsbyAqLzBcbiAgICAgICAgICAgICAgICBdKSkge1xuICAgICAgICAgICAgdmFyIG1hdGNoJDIgPSBDYW1sX2ludDY0LmRpdl9tb2QocXVvdGllbnQsIHdiYXNlKTtcbiAgICAgICAgICAgIHF1b3RpZW50ID0gbWF0Y2gkMlswXTtcbiAgICAgICAgICAgIG1vZHVsdXMgPSBtYXRjaCQyWzFdO1xuICAgICAgICAgICAgcyA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY3Z0YmwuY2hhckNvZGVBdChtb2R1bHVzWzFdIHwgMCkpICsgcztcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBtYXRjaCQzID0gQ2FtbF9pbnQ2NC5kaXZfbW9kKHgkMSwgd2Jhc2UpO1xuICAgICAgICAgIHZhciBxdW90aWVudCQxID0gbWF0Y2gkM1swXTtcbiAgICAgICAgICB2YXIgbW9kdWx1cyQxID0gbWF0Y2gkM1sxXTtcbiAgICAgICAgICBzID0gU3RyaW5nLmZyb21DaGFyQ29kZShjdnRibC5jaGFyQ29kZUF0KG1vZHVsdXMkMVsxXSB8IDApKSArIHM7XG4gICAgICAgICAgd2hpbGUoQ2FtbF9pbnQ2NC5uZXEocXVvdGllbnQkMSwgLyogaW50NjQgKi9bXG4gICAgICAgICAgICAgICAgICAvKiBoaSAqLzAsXG4gICAgICAgICAgICAgICAgICAvKiBsbyAqLzBcbiAgICAgICAgICAgICAgICBdKSkge1xuICAgICAgICAgICAgdmFyIG1hdGNoJDQgPSBDYW1sX2ludDY0LmRpdl9tb2QocXVvdGllbnQkMSwgd2Jhc2UpO1xuICAgICAgICAgICAgcXVvdGllbnQkMSA9IG1hdGNoJDRbMF07XG4gICAgICAgICAgICBtb2R1bHVzJDEgPSBtYXRjaCQ0WzFdO1xuICAgICAgICAgICAgcyA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY3Z0YmwuY2hhckNvZGVBdChtb2R1bHVzJDFbMV0gfCAwKSkgKyBzO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSAxIDogXG4gICAgICAgIHMgPSBDYW1sX2ludDY0LnRvX2hleCh4JDEpICsgcztcbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSAyIDogXG4gICAgICAgIHZhciB3YmFzZSQxID0gLyogaW50NjQgKi9bXG4gICAgICAgICAgLyogaGkgKi8wLFxuICAgICAgICAgIC8qIGxvICovMTBcbiAgICAgICAgXTtcbiAgICAgICAgdmFyIGN2dGJsJDEgPSBcIjAxMjM0NTY3ODlcIjtcbiAgICAgICAgaWYgKENhbWxfaW50NjQubHQoeCQxLCAvKiBpbnQ2NCAqL1tcbiAgICAgICAgICAgICAgICAvKiBoaSAqLzAsXG4gICAgICAgICAgICAgICAgLyogbG8gKi8wXG4gICAgICAgICAgICAgIF0pKSB7XG4gICAgICAgICAgdmFyIHkkMSA9IENhbWxfaW50NjQuZGlzY2FyZF9zaWduKHgkMSk7XG4gICAgICAgICAgdmFyIG1hdGNoJDUgPSBDYW1sX2ludDY0LmRpdl9tb2QoeSQxLCB3YmFzZSQxKTtcbiAgICAgICAgICB2YXIgbWF0Y2gkNiA9IENhbWxfaW50NjQuZGl2X21vZChDYW1sX2ludDY0LmFkZCgvKiBpbnQ2NCAqL1tcbiAgICAgICAgICAgICAgICAgICAgLyogaGkgKi8wLFxuICAgICAgICAgICAgICAgICAgICAvKiBsbyAqLzhcbiAgICAgICAgICAgICAgICAgIF0sIG1hdGNoJDVbMV0pLCB3YmFzZSQxKTtcbiAgICAgICAgICB2YXIgcXVvdGllbnQkMiA9IENhbWxfaW50NjQuYWRkKENhbWxfaW50NjQuYWRkKC8qIGludDY0ICovW1xuICAgICAgICAgICAgICAgICAgICAvKiBoaSAqLzIxNDc0ODM2NCxcbiAgICAgICAgICAgICAgICAgICAgLyogbG8gKi8zNDM1OTczODM2XG4gICAgICAgICAgICAgICAgICBdLCBtYXRjaCQ1WzBdKSwgbWF0Y2gkNlswXSk7XG4gICAgICAgICAgdmFyIG1vZHVsdXMkMiA9IG1hdGNoJDZbMV07XG4gICAgICAgICAgcyA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY3Z0YmwkMS5jaGFyQ29kZUF0KG1vZHVsdXMkMlsxXSB8IDApKSArIHM7XG4gICAgICAgICAgd2hpbGUoQ2FtbF9pbnQ2NC5uZXEocXVvdGllbnQkMiwgLyogaW50NjQgKi9bXG4gICAgICAgICAgICAgICAgICAvKiBoaSAqLzAsXG4gICAgICAgICAgICAgICAgICAvKiBsbyAqLzBcbiAgICAgICAgICAgICAgICBdKSkge1xuICAgICAgICAgICAgdmFyIG1hdGNoJDcgPSBDYW1sX2ludDY0LmRpdl9tb2QocXVvdGllbnQkMiwgd2Jhc2UkMSk7XG4gICAgICAgICAgICBxdW90aWVudCQyID0gbWF0Y2gkN1swXTtcbiAgICAgICAgICAgIG1vZHVsdXMkMiA9IG1hdGNoJDdbMV07XG4gICAgICAgICAgICBzID0gU3RyaW5nLmZyb21DaGFyQ29kZShjdnRibCQxLmNoYXJDb2RlQXQobW9kdWx1cyQyWzFdIHwgMCkpICsgcztcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBtYXRjaCQ4ID0gQ2FtbF9pbnQ2NC5kaXZfbW9kKHgkMSwgd2Jhc2UkMSk7XG4gICAgICAgICAgdmFyIHF1b3RpZW50JDMgPSBtYXRjaCQ4WzBdO1xuICAgICAgICAgIHZhciBtb2R1bHVzJDMgPSBtYXRjaCQ4WzFdO1xuICAgICAgICAgIHMgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGN2dGJsJDEuY2hhckNvZGVBdChtb2R1bHVzJDNbMV0gfCAwKSkgKyBzO1xuICAgICAgICAgIHdoaWxlKENhbWxfaW50NjQubmVxKHF1b3RpZW50JDMsIC8qIGludDY0ICovW1xuICAgICAgICAgICAgICAgICAgLyogaGkgKi8wLFxuICAgICAgICAgICAgICAgICAgLyogbG8gKi8wXG4gICAgICAgICAgICAgICAgXSkpIHtcbiAgICAgICAgICAgIHZhciBtYXRjaCQ5ID0gQ2FtbF9pbnQ2NC5kaXZfbW9kKHF1b3RpZW50JDMsIHdiYXNlJDEpO1xuICAgICAgICAgICAgcXVvdGllbnQkMyA9IG1hdGNoJDlbMF07XG4gICAgICAgICAgICBtb2R1bHVzJDMgPSBtYXRjaCQ5WzFdO1xuICAgICAgICAgICAgcyA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY3Z0YmwkMS5jaGFyQ29kZUF0KG1vZHVsdXMkM1sxXSB8IDApKSArIHM7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICBcbiAgfVxuICBpZiAoZlsvKiBwcmVjICovOV0gPj0gMCkge1xuICAgIGZbLyogZmlsdGVyICovMl0gPSBcIiBcIjtcbiAgICB2YXIgbiA9IGZbLyogcHJlYyAqLzldIC0gcy5sZW5ndGggfCAwO1xuICAgIGlmIChuID4gMCkge1xuICAgICAgcyA9IENhbWxfdXRpbHMucmVwZWF0KG4sIFwiMFwiKSArIHM7XG4gICAgfVxuICAgIFxuICB9XG4gIHJldHVybiBmaW5pc2hfZm9ybWF0dGluZyhmLCBzKTtcbn1cblxuZnVuY3Rpb24gY2FtbF9mb3JtYXRfZmxvYXQoZm10LCB4KSB7XG4gIHZhciBmID0gcGFyc2VfZm9ybWF0KGZtdCk7XG4gIHZhciBwcmVjID0gZlsvKiBwcmVjICovOV0gPCAwID8gNiA6IGZbLyogcHJlYyAqLzldO1xuICB2YXIgeCQxID0geCA8IDAgPyAoZlsvKiBzaWduICovOF0gPSAtMSwgLXgpIDogeDtcbiAgdmFyIHMgPSBcIlwiO1xuICBpZiAoaXNOYU4oeCQxKSkge1xuICAgIHMgPSBcIm5hblwiO1xuICAgIGZbLyogZmlsdGVyICovMl0gPSBcIiBcIjtcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZSh4JDEpKSB7XG4gICAgdmFyIG1hdGNoID0gZlsvKiBjb252ICovMTBdO1xuICAgIHN3aXRjaCAobWF0Y2gpIHtcbiAgICAgIGNhc2UgXCJlXCIgOiBcbiAgICAgICAgICBzID0geCQxLnRvRXhwb25lbnRpYWwocHJlYyk7XG4gICAgICAgICAgdmFyIGkgPSBzLmxlbmd0aDtcbiAgICAgICAgICBpZiAoc1tpIC0gMyB8IDBdID09PSBcImVcIikge1xuICAgICAgICAgICAgcyA9IHMuc2xpY2UoMCwgaSAtIDEgfCAwKSArIChcIjBcIiArIHMuc2xpY2UoaSAtIDEgfCAwKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImZcIiA6IFxuICAgICAgICAgIHMgPSB4JDEudG9GaXhlZChwcmVjKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJnXCIgOiBcbiAgICAgICAgICB2YXIgcHJlYyQxID0gcHJlYyAhPT0gMCA/IHByZWMgOiAxO1xuICAgICAgICAgIHMgPSB4JDEudG9FeHBvbmVudGlhbChwcmVjJDEgLSAxIHwgMCk7XG4gICAgICAgICAgdmFyIGogPSBzLmluZGV4T2YoXCJlXCIpO1xuICAgICAgICAgIHZhciBleHAgPSBOdW1iZXIocy5zbGljZShqICsgMSB8IDApKSB8IDA7XG4gICAgICAgICAgaWYgKGV4cCA8IC00IHx8IHgkMSA+PSAxZTIxIHx8IHgkMS50b0ZpeGVkKCkubGVuZ3RoID4gcHJlYyQxKSB7XG4gICAgICAgICAgICB2YXIgaSQxID0gaiAtIDEgfCAwO1xuICAgICAgICAgICAgd2hpbGUoc1tpJDFdID09PSBcIjBcIikge1xuICAgICAgICAgICAgICBpJDEgPSBpJDEgLSAxIHwgMDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoc1tpJDFdID09PSBcIi5cIikge1xuICAgICAgICAgICAgICBpJDEgPSBpJDEgLSAxIHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHMgPSBzLnNsaWNlKDAsIGkkMSArIDEgfCAwKSArIHMuc2xpY2Uoaik7XG4gICAgICAgICAgICB2YXIgaSQyID0gcy5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoc1tpJDIgLSAzIHwgMF0gPT09IFwiZVwiKSB7XG4gICAgICAgICAgICAgIHMgPSBzLnNsaWNlKDAsIGkkMiAtIDEgfCAwKSArIChcIjBcIiArIHMuc2xpY2UoaSQyIC0gMSB8IDApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgcCA9IHByZWMkMTtcbiAgICAgICAgICAgIGlmIChleHAgPCAwKSB7XG4gICAgICAgICAgICAgIHAgPSBwIC0gKGV4cCArIDEgfCAwKSB8IDA7XG4gICAgICAgICAgICAgIHMgPSB4JDEudG9GaXhlZChwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHdoaWxlKChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcyA9IHgkMS50b0ZpeGVkKHApO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzLmxlbmd0aCA+IChwcmVjJDEgKyAxIHwgMCk7XG4gICAgICAgICAgICAgICAgICAgIH0pKCkpIHtcbiAgICAgICAgICAgICAgICBwID0gcCAtIDEgfCAwO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHAgIT09IDApIHtcbiAgICAgICAgICAgICAgdmFyIGsgPSBzLmxlbmd0aCAtIDEgfCAwO1xuICAgICAgICAgICAgICB3aGlsZShzW2tdID09PSBcIjBcIikge1xuICAgICAgICAgICAgICAgIGsgPSBrIC0gMSB8IDA7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIGlmIChzW2tdID09PSBcIi5cIikge1xuICAgICAgICAgICAgICAgIGsgPSBrIC0gMSB8IDA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcyA9IHMuc2xpY2UoMCwgayArIDEgfCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzID0gXCJpbmZcIjtcbiAgICBmWy8qIGZpbHRlciAqLzJdID0gXCIgXCI7XG4gIH1cbiAgcmV0dXJuIGZpbmlzaF9mb3JtYXR0aW5nKGYsIHMpO1xufVxuXG5mdW5jdGlvbiBmbG9hdF9vZl9zdHJpbmcgKHMsZXhuKXsgXG5cbiAgICB2YXIgcmVzID0gK3M7XG4gICAgaWYgKChzLmxlbmd0aCA+IDApICYmIChyZXMgPT09IHJlcykpXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgcyA9IHMucmVwbGFjZSgvXy9nLCBcIlwiKTtcbiAgICByZXMgPSArcztcbiAgICBpZiAoKChzLmxlbmd0aCA+IDApICYmIChyZXMgPT09IHJlcykpIHx8IC9eWystXT9uYW4kL2kudGVzdChzKSkge1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH07XG4gICAgaWYgKC9eXFwrP2luZihpbml0eSk/JC9pLnRlc3QocykpXG4gICAgICAgIHJldHVybiBJbmZpbml0eTtcbiAgICBpZiAoL14taW5mKGluaXR5KT8kL2kudGVzdChzKSlcbiAgICAgICAgcmV0dXJuIC1JbmZpbml0eTtcbiAgICB0aHJvdyBleG47XG5cbn07XG5cbmZ1bmN0aW9uIGNhbWxfZmxvYXRfb2Zfc3RyaW5nKHMpIHtcbiAgcmV0dXJuIGZsb2F0X29mX3N0cmluZyhzLCBbXG4gICAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmZhaWx1cmUsXG4gICAgICAgICAgICAgIFwiZmxvYXRfb2Zfc3RyaW5nXCJcbiAgICAgICAgICAgIF0pO1xufVxuXG52YXIgY2FtbF9uYXRpdmVpbnRfZm9ybWF0ID0gY2FtbF9mb3JtYXRfaW50O1xuXG52YXIgY2FtbF9pbnQzMl9mb3JtYXQgPSBjYW1sX2Zvcm1hdF9pbnQ7XG5cbnZhciBjYW1sX2ludDMyX29mX3N0cmluZyA9IGNhbWxfaW50X29mX3N0cmluZztcblxudmFyIGNhbWxfbmF0aXZlaW50X29mX3N0cmluZyA9IGNhbWxfaW50X29mX3N0cmluZztcblxuZXhwb3J0cy5jYW1sX2Zvcm1hdF9mbG9hdCA9IGNhbWxfZm9ybWF0X2Zsb2F0O1xuZXhwb3J0cy5jYW1sX2Zvcm1hdF9pbnQgPSBjYW1sX2Zvcm1hdF9pbnQ7XG5leHBvcnRzLmNhbWxfbmF0aXZlaW50X2Zvcm1hdCA9IGNhbWxfbmF0aXZlaW50X2Zvcm1hdDtcbmV4cG9ydHMuY2FtbF9pbnQzMl9mb3JtYXQgPSBjYW1sX2ludDMyX2Zvcm1hdDtcbmV4cG9ydHMuY2FtbF9mbG9hdF9vZl9zdHJpbmcgPSBjYW1sX2Zsb2F0X29mX3N0cmluZztcbmV4cG9ydHMuY2FtbF9pbnQ2NF9mb3JtYXQgPSBjYW1sX2ludDY0X2Zvcm1hdDtcbmV4cG9ydHMuY2FtbF9pbnRfb2Zfc3RyaW5nID0gY2FtbF9pbnRfb2Zfc3RyaW5nO1xuZXhwb3J0cy5jYW1sX2ludDMyX29mX3N0cmluZyA9IGNhbWxfaW50MzJfb2Zfc3RyaW5nO1xuZXhwb3J0cy5jYW1sX2ludDY0X29mX3N0cmluZyA9IGNhbWxfaW50NjRfb2Zfc3RyaW5nO1xuZXhwb3J0cy5jYW1sX25hdGl2ZWludF9vZl9zdHJpbmcgPSBjYW1sX25hdGl2ZWludF9vZl9zdHJpbmc7XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMgPSByZXF1aXJlKFwiLi9jYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5qc1wiKTtcblxuZnVuY3Rpb24gZGl2KHgsIHkpIHtcbiAgaWYgKHkgPT09IDApIHtcbiAgICB0aHJvdyBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5kaXZpc2lvbl9ieV96ZXJvO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4IC8geSB8IDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gbW9kXyh4LCB5KSB7XG4gIGlmICh5ID09PSAwKSB7XG4gICAgdGhyb3cgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuZGl2aXNpb25fYnlfemVybztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAlIHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9ic3dhcDE2KHgpIHtcbiAgcmV0dXJuICgoeCAmIDI1NSkgPDwgOCkgfCAoKHggJiA2NTI4MCkgPj4+IDgpO1xufVxuXG5mdW5jdGlvbiBjYW1sX2ludDMyX2Jzd2FwKHgpIHtcbiAgcmV0dXJuICgoeCAmIDI1NSkgPDwgMjQpIHwgKCh4ICYgNjUyODApIDw8IDgpIHwgKCh4ICYgMTY3MTE2ODApID4+PiA4KSB8ICgoeCAmIDQyNzgxOTAwODApID4+PiAyNCk7XG59XG5cbnZhciBpbXVsID0gKCBNYXRoLmltdWwgfHwgZnVuY3Rpb24gKHgseSkge1xuICB5IHw9IDA7IHJldHVybiAoKCgoeCA+PiAxNikgKiB5KSA8PCAxNikgKyAoeCAmIDB4ZmZmZikgKiB5KXwwOyBcbn1cbik7XG5cbnZhciBjYW1sX25hdGl2ZWludF9ic3dhcCA9IGNhbWxfaW50MzJfYnN3YXA7XG5cbmV4cG9ydHMuZGl2ID0gZGl2O1xuZXhwb3J0cy5tb2RfID0gbW9kXztcbmV4cG9ydHMuY2FtbF9ic3dhcDE2ID0gY2FtbF9ic3dhcDE2O1xuZXhwb3J0cy5jYW1sX2ludDMyX2Jzd2FwID0gY2FtbF9pbnQzMl9ic3dhcDtcbmV4cG9ydHMuY2FtbF9uYXRpdmVpbnRfYnN3YXAgPSBjYW1sX25hdGl2ZWludF9ic3dhcDtcbmV4cG9ydHMuaW11bCA9IGltdWw7XG4vKiBpbXVsIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW1sX2ludDMyID0gcmVxdWlyZShcIi4vY2FtbF9pbnQzMi5qc1wiKTtcbnZhciBDYW1sX3V0aWxzID0gcmVxdWlyZShcIi4vY2FtbF91dGlscy5qc1wiKTtcbnZhciBDYW1sX3ByaW1pdGl2ZSA9IHJlcXVpcmUoXCIuL2NhbWxfcHJpbWl0aXZlLmpzXCIpO1xudmFyIENhbWxfYnVpbHRpbl9leGNlcHRpb25zID0gcmVxdWlyZShcIi4vY2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuanNcIik7XG5cbnZhciBtaW5faW50ID0gLyogcmVjb3JkICovW1xuICAvKiBoaSAqLy0yMTQ3NDgzNjQ4LFxuICAvKiBsbyAqLzBcbl07XG5cbnZhciBtYXhfaW50ID0gLyogcmVjb3JkICovW1xuICAvKiBoaSAqLzIxNDc0ODM2NDcsXG4gIC8qIGxvICovMVxuXTtcblxudmFyIG9uZSA9IC8qIHJlY29yZCAqL1tcbiAgLyogaGkgKi8wLFxuICAvKiBsbyAqLzFcbl07XG5cbnZhciB6ZXJvID0gLyogcmVjb3JkICovW1xuICAvKiBoaSAqLzAsXG4gIC8qIGxvICovMFxuXTtcblxudmFyIG5lZ19vbmUgPSAvKiByZWNvcmQgKi9bXG4gIC8qIGhpICovLTEsXG4gIC8qIGxvICovNDI5NDk2NzI5NVxuXTtcblxuZnVuY3Rpb24gbmVnX3NpZ25lZCh4KSB7XG4gIHJldHVybiAoeCAmIDIxNDc0ODM2NDgpICE9PSAwO1xufVxuXG5mdW5jdGlvbiBhZGQocGFyYW0sIHBhcmFtJDEpIHtcbiAgdmFyIG90aGVyX2xvd18gPSBwYXJhbSQxWy8qIGxvICovMV07XG4gIHZhciB0aGlzX2xvd18gPSBwYXJhbVsvKiBsbyAqLzFdO1xuICB2YXIgbG8gPSB0aGlzX2xvd18gKyBvdGhlcl9sb3dfICYgNDI5NDk2NzI5NTtcbiAgdmFyIG92ZXJmbG93ID0gbmVnX3NpZ25lZCh0aGlzX2xvd18pICYmIChuZWdfc2lnbmVkKG90aGVyX2xvd18pIHx8ICFuZWdfc2lnbmVkKGxvKSkgfHwgbmVnX3NpZ25lZChvdGhlcl9sb3dfKSAmJiAhbmVnX3NpZ25lZChsbykgPyAxIDogMDtcbiAgdmFyIGhpID0gcGFyYW1bLyogaGkgKi8wXSArIHBhcmFtJDFbLyogaGkgKi8wXSArIG92ZXJmbG93ICYgNDI5NDk2NzI5NTtcbiAgcmV0dXJuIC8qIHJlY29yZCAqL1tcbiAgICAgICAgICAvKiBoaSAqL2hpLFxuICAgICAgICAgIC8qIGxvICovKGxvID4+PiAwKVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBub3QocGFyYW0pIHtcbiAgdmFyIGhpID0gcGFyYW1bLyogaGkgKi8wXSBeIC0xO1xuICB2YXIgbG8gPSBwYXJhbVsvKiBsbyAqLzFdIF4gLTE7XG4gIHJldHVybiAvKiByZWNvcmQgKi9bXG4gICAgICAgICAgLyogaGkgKi9oaSxcbiAgICAgICAgICAvKiBsbyAqLyhsbyA+Pj4gMClcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gZXEoeCwgeSkge1xuICBpZiAoeFsvKiBoaSAqLzBdID09PSB5Wy8qIGhpICovMF0pIHtcbiAgICByZXR1cm4geFsvKiBsbyAqLzFdID09PSB5Wy8qIGxvICovMV07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVxdWFsX251bGwoeCwgeSkge1xuICBpZiAoeSAhPT0gbnVsbCkge1xuICAgIHJldHVybiBlcSh4LCB5KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXF1YWxfdW5kZWZpbmVkKHgsIHkpIHtcbiAgaWYgKHkgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBlcSh4LCB5KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXF1YWxfbnVsbGFibGUoeCwgeSkge1xuICBpZiAoeSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBlcSh4LCB5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBuZWcoeCkge1xuICBpZiAoZXEoeCwgbWluX2ludCkpIHtcbiAgICByZXR1cm4gbWluX2ludDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYWRkKG5vdCh4KSwgb25lKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdWIoeCwgeSkge1xuICByZXR1cm4gYWRkKHgsIG5lZyh5KSk7XG59XG5cbmZ1bmN0aW9uIGxzbF8oeCwgbnVtQml0cykge1xuICBpZiAobnVtQml0cyA9PT0gMCkge1xuICAgIHJldHVybiB4O1xuICB9IGVsc2Uge1xuICAgIHZhciBsbyA9IHhbLyogbG8gKi8xXTtcbiAgICBpZiAobnVtQml0cyA+PSAzMikge1xuICAgICAgcmV0dXJuIC8qIHJlY29yZCAqL1tcbiAgICAgICAgICAgICAgLyogaGkgKi8obG8gPDwgKG51bUJpdHMgLSAzMiB8IDApKSxcbiAgICAgICAgICAgICAgLyogbG8gKi8wXG4gICAgICAgICAgICBdO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaGkgPSAobG8gPj4+ICgzMiAtIG51bUJpdHMgfCAwKSkgfCAoeFsvKiBoaSAqLzBdIDw8IG51bUJpdHMpO1xuICAgICAgcmV0dXJuIC8qIHJlY29yZCAqL1tcbiAgICAgICAgICAgICAgLyogaGkgKi9oaSxcbiAgICAgICAgICAgICAgLyogbG8gKi8oKGxvIDw8IG51bUJpdHMpID4+PiAwKVxuICAgICAgICAgICAgXTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbHNyXyh4LCBudW1CaXRzKSB7XG4gIGlmIChudW1CaXRzID09PSAwKSB7XG4gICAgcmV0dXJuIHg7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGhpID0geFsvKiBoaSAqLzBdO1xuICAgIHZhciBvZmZzZXQgPSBudW1CaXRzIC0gMzIgfCAwO1xuICAgIGlmIChvZmZzZXQgPT09IDApIHtcbiAgICAgIHJldHVybiAvKiByZWNvcmQgKi9bXG4gICAgICAgICAgICAgIC8qIGhpICovMCxcbiAgICAgICAgICAgICAgLyogbG8gKi8oaGkgPj4+IDApXG4gICAgICAgICAgICBdO1xuICAgIH0gZWxzZSBpZiAob2Zmc2V0ID4gMCkge1xuICAgICAgdmFyIGxvID0gKGhpID4+PiBvZmZzZXQpO1xuICAgICAgcmV0dXJuIC8qIHJlY29yZCAqL1tcbiAgICAgICAgICAgICAgLyogaGkgKi8wLFxuICAgICAgICAgICAgICAvKiBsbyAqLyhsbyA+Pj4gMClcbiAgICAgICAgICAgIF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBoaSQxID0gKGhpID4+PiBudW1CaXRzKTtcbiAgICAgIHZhciBsbyQxID0gKGhpIDw8ICgtb2Zmc2V0IHwgMCkpIHwgKHhbLyogbG8gKi8xXSA+Pj4gbnVtQml0cyk7XG4gICAgICByZXR1cm4gLyogcmVjb3JkICovW1xuICAgICAgICAgICAgICAvKiBoaSAqL2hpJDEsXG4gICAgICAgICAgICAgIC8qIGxvICovKGxvJDEgPj4+IDApXG4gICAgICAgICAgICBdO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhc3JfKHgsIG51bUJpdHMpIHtcbiAgaWYgKG51bUJpdHMgPT09IDApIHtcbiAgICByZXR1cm4geDtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaGkgPSB4Wy8qIGhpICovMF07XG4gICAgaWYgKG51bUJpdHMgPCAzMikge1xuICAgICAgdmFyIGhpJDEgPSAoaGkgPj4gbnVtQml0cyk7XG4gICAgICB2YXIgbG8gPSAoaGkgPDwgKDMyIC0gbnVtQml0cyB8IDApKSB8ICh4Wy8qIGxvICovMV0gPj4+IG51bUJpdHMpO1xuICAgICAgcmV0dXJuIC8qIHJlY29yZCAqL1tcbiAgICAgICAgICAgICAgLyogaGkgKi9oaSQxLFxuICAgICAgICAgICAgICAvKiBsbyAqLyhsbyA+Pj4gMClcbiAgICAgICAgICAgIF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsbyQxID0gKGhpID4+IChudW1CaXRzIC0gMzIgfCAwKSk7XG4gICAgICByZXR1cm4gLyogcmVjb3JkICovW1xuICAgICAgICAgICAgICAvKiBoaSAqL2hpID49IDAgPyAwIDogLTEsXG4gICAgICAgICAgICAgIC8qIGxvICovKGxvJDEgPj4+IDApXG4gICAgICAgICAgICBdO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc196ZXJvKHBhcmFtKSB7XG4gIGlmIChwYXJhbVsvKiBoaSAqLzBdICE9PSAwIHx8IHBhcmFtWy8qIGxvICovMV0gIT09IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gbXVsKF90aGlzLCBfb3RoZXIpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBvdGhlciA9IF9vdGhlcjtcbiAgICB2YXIgJCR0aGlzID0gX3RoaXM7XG4gICAgdmFyIGV4aXQgPSAwO1xuICAgIHZhciBsbztcbiAgICB2YXIgdGhpc19oaSA9ICQkdGhpc1svKiBoaSAqLzBdO1xuICAgIHZhciBleGl0JDEgPSAwO1xuICAgIHZhciBleGl0JDIgPSAwO1xuICAgIHZhciBleGl0JDMgPSAwO1xuICAgIGlmICh0aGlzX2hpICE9PSAwIHx8ICQkdGhpc1svKiBsbyAqLzFdICE9PSAwKSB7XG4gICAgICBleGl0JDMgPSA0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gemVybztcbiAgICB9XG4gICAgaWYgKGV4aXQkMyA9PT0gNCkge1xuICAgICAgaWYgKG90aGVyWy8qIGhpICovMF0gIT09IDAgfHwgb3RoZXJbLyogbG8gKi8xXSAhPT0gMCkge1xuICAgICAgICBleGl0JDIgPSAzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHplcm87XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChleGl0JDIgPT09IDMpIHtcbiAgICAgIGlmICh0aGlzX2hpICE9PSAtMjE0NzQ4MzY0OCB8fCAkJHRoaXNbLyogbG8gKi8xXSAhPT0gMCkge1xuICAgICAgICBleGl0JDEgPSAyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG8gPSBvdGhlclsvKiBsbyAqLzFdO1xuICAgICAgICBleGl0ID0gMTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGV4aXQkMSA9PT0gMikge1xuICAgICAgdmFyIG90aGVyX2hpID0gb3RoZXJbLyogaGkgKi8wXTtcbiAgICAgIHZhciBsbyQxID0gJCR0aGlzWy8qIGxvICovMV07XG4gICAgICB2YXIgZXhpdCQ0ID0gMDtcbiAgICAgIGlmIChvdGhlcl9oaSAhPT0gLTIxNDc0ODM2NDggfHwgb3RoZXJbLyogbG8gKi8xXSAhPT0gMCkge1xuICAgICAgICBleGl0JDQgPSAzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG8gPSBsbyQxO1xuICAgICAgICBleGl0ID0gMTtcbiAgICAgIH1cbiAgICAgIGlmIChleGl0JDQgPT09IDMpIHtcbiAgICAgICAgdmFyIG90aGVyX2xvID0gb3RoZXJbLyogbG8gKi8xXTtcbiAgICAgICAgaWYgKHRoaXNfaGkgPCAwKSB7XG4gICAgICAgICAgaWYgKG90aGVyX2hpIDwgMCkge1xuICAgICAgICAgICAgX290aGVyID0gbmVnKG90aGVyKTtcbiAgICAgICAgICAgIF90aGlzID0gbmVnKCQkdGhpcyk7XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZWcobXVsKG5lZygkJHRoaXMpLCBvdGhlcikpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChvdGhlcl9oaSA8IDApIHtcbiAgICAgICAgICByZXR1cm4gbmVnKG11bCgkJHRoaXMsIG5lZyhvdGhlcikpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgYTQ4ID0gKHRoaXNfaGkgPj4+IDE2KTtcbiAgICAgICAgICB2YXIgYTMyID0gdGhpc19oaSAmIDY1NTM1O1xuICAgICAgICAgIHZhciBhMTYgPSAobG8kMSA+Pj4gMTYpO1xuICAgICAgICAgIHZhciBhMDAgPSBsbyQxICYgNjU1MzU7XG4gICAgICAgICAgdmFyIGI0OCA9IChvdGhlcl9oaSA+Pj4gMTYpO1xuICAgICAgICAgIHZhciBiMzIgPSBvdGhlcl9oaSAmIDY1NTM1O1xuICAgICAgICAgIHZhciBiMTYgPSAob3RoZXJfbG8gPj4+IDE2KTtcbiAgICAgICAgICB2YXIgYjAwID0gb3RoZXJfbG8gJiA2NTUzNTtcbiAgICAgICAgICB2YXIgYzQ4ID0gMDtcbiAgICAgICAgICB2YXIgYzMyID0gMDtcbiAgICAgICAgICB2YXIgYzE2ID0gMDtcbiAgICAgICAgICB2YXIgYzAwID0gYTAwICogYjAwO1xuICAgICAgICAgIGMxNiA9IChjMDAgPj4+IDE2KSArIGExNiAqIGIwMDtcbiAgICAgICAgICBjMzIgPSAoYzE2ID4+PiAxNik7XG4gICAgICAgICAgYzE2ID0gKGMxNiAmIDY1NTM1KSArIGEwMCAqIGIxNjtcbiAgICAgICAgICBjMzIgPSBjMzIgKyAoYzE2ID4+PiAxNikgKyBhMzIgKiBiMDA7XG4gICAgICAgICAgYzQ4ID0gKGMzMiA+Pj4gMTYpO1xuICAgICAgICAgIGMzMiA9IChjMzIgJiA2NTUzNSkgKyBhMTYgKiBiMTY7XG4gICAgICAgICAgYzQ4ICs9IChjMzIgPj4+IDE2KTtcbiAgICAgICAgICBjMzIgPSAoYzMyICYgNjU1MzUpICsgYTAwICogYjMyO1xuICAgICAgICAgIGM0OCArPSAoYzMyID4+PiAxNik7XG4gICAgICAgICAgYzMyID0gYzMyICYgNjU1MzU7XG4gICAgICAgICAgYzQ4ID0gYzQ4ICsgKGE0OCAqIGIwMCArIGEzMiAqIGIxNiArIGExNiAqIGIzMiArIGEwMCAqIGI0OCkgJiA2NTUzNTtcbiAgICAgICAgICB2YXIgaGkgPSBjMzIgfCAoYzQ4IDw8IDE2KTtcbiAgICAgICAgICB2YXIgbG8kMiA9IGMwMCAmIDY1NTM1IHwgKChjMTYgJiA2NTUzNSkgPDwgMTYpO1xuICAgICAgICAgIHJldHVybiAvKiByZWNvcmQgKi9bXG4gICAgICAgICAgICAgICAgICAvKiBoaSAqL2hpLFxuICAgICAgICAgICAgICAgICAgLyogbG8gKi8obG8kMiA+Pj4gMClcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICB9XG4gICAgaWYgKGV4aXQgPT09IDEpIHtcbiAgICAgIGlmICgobG8gJiAxKSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gemVybztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBtaW5faW50O1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3dhcChwYXJhbSkge1xuICB2YXIgaGkgPSBDYW1sX2ludDMyLmNhbWxfaW50MzJfYnN3YXAocGFyYW1bLyogbG8gKi8xXSk7XG4gIHZhciBsbyA9IENhbWxfaW50MzIuY2FtbF9pbnQzMl9ic3dhcChwYXJhbVsvKiBoaSAqLzBdKTtcbiAgcmV0dXJuIC8qIHJlY29yZCAqL1tcbiAgICAgICAgICAvKiBoaSAqL2hpLFxuICAgICAgICAgIC8qIGxvICovKGxvID4+PiAwKVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiB4b3IocGFyYW0sIHBhcmFtJDEpIHtcbiAgcmV0dXJuIC8qIHJlY29yZCAqL1tcbiAgICAgICAgICAvKiBoaSAqL3BhcmFtWy8qIGhpICovMF0gXiBwYXJhbSQxWy8qIGhpICovMF0sXG4gICAgICAgICAgLyogbG8gKi8oKHBhcmFtWy8qIGxvICovMV0gXiBwYXJhbSQxWy8qIGxvICovMV0pID4+PiAwKVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBvcl8ocGFyYW0sIHBhcmFtJDEpIHtcbiAgcmV0dXJuIC8qIHJlY29yZCAqL1tcbiAgICAgICAgICAvKiBoaSAqL3BhcmFtWy8qIGhpICovMF0gfCBwYXJhbSQxWy8qIGhpICovMF0sXG4gICAgICAgICAgLyogbG8gKi8oKHBhcmFtWy8qIGxvICovMV0gfCBwYXJhbSQxWy8qIGxvICovMV0pID4+PiAwKVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBhbmRfKHBhcmFtLCBwYXJhbSQxKSB7XG4gIHJldHVybiAvKiByZWNvcmQgKi9bXG4gICAgICAgICAgLyogaGkgKi9wYXJhbVsvKiBoaSAqLzBdICYgcGFyYW0kMVsvKiBoaSAqLzBdLFxuICAgICAgICAgIC8qIGxvICovKChwYXJhbVsvKiBsbyAqLzFdICYgcGFyYW0kMVsvKiBsbyAqLzFdKSA+Pj4gMClcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gZ2UocGFyYW0sIHBhcmFtJDEpIHtcbiAgdmFyIG90aGVyX2hpID0gcGFyYW0kMVsvKiBoaSAqLzBdO1xuICB2YXIgaGkgPSBwYXJhbVsvKiBoaSAqLzBdO1xuICBpZiAoaGkgPiBvdGhlcl9oaSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGhpIDwgb3RoZXJfaGkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHBhcmFtWy8qIGxvICovMV0gPj0gcGFyYW0kMVsvKiBsbyAqLzFdO1xuICB9XG59XG5cbmZ1bmN0aW9uIG5lcSh4LCB5KSB7XG4gIHJldHVybiAhZXEoeCwgeSk7XG59XG5cbmZ1bmN0aW9uIGx0KHgsIHkpIHtcbiAgcmV0dXJuICFnZSh4LCB5KTtcbn1cblxuZnVuY3Rpb24gZ3QoeCwgeSkge1xuICBpZiAoeFsvKiBoaSAqLzBdID4geVsvKiBoaSAqLzBdKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoeFsvKiBoaSAqLzBdIDwgeVsvKiBoaSAqLzBdKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4Wy8qIGxvICovMV0gPiB5Wy8qIGxvICovMV07XG4gIH1cbn1cblxuZnVuY3Rpb24gbGUoeCwgeSkge1xuICByZXR1cm4gIWd0KHgsIHkpO1xufVxuXG5mdW5jdGlvbiBtaW4oeCwgeSkge1xuICBpZiAoZ2UoeCwgeSkpIHtcbiAgICByZXR1cm4geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geDtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXgoeCwgeSkge1xuICBpZiAoZ3QoeCwgeSkpIHtcbiAgICByZXR1cm4geDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0b19mbG9hdChwYXJhbSkge1xuICByZXR1cm4gcGFyYW1bLyogaGkgKi8wXSAqICgweDEwMDAwMDAwMCkgKyBwYXJhbVsvKiBsbyAqLzFdO1xufVxuXG5mdW5jdGlvbiBvZl9mbG9hdCh4KSB7XG4gIGlmIChpc05hTih4KSB8fCAhaXNGaW5pdGUoeCkpIHtcbiAgICByZXR1cm4gemVybztcbiAgfSBlbHNlIGlmICh4IDw9IC05LjIyMzM3MjAzNjg1NDc3NTgxZSsxOCkge1xuICAgIHJldHVybiBtaW5faW50O1xuICB9IGVsc2UgaWYgKHggKyAxID49IDkuMjIzMzcyMDM2ODU0Nzc1ODFlKzE4KSB7XG4gICAgcmV0dXJuIG1heF9pbnQ7XG4gIH0gZWxzZSBpZiAoeCA8IDApIHtcbiAgICByZXR1cm4gbmVnKG9mX2Zsb2F0KC14KSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGhpID0geCAvIDQyOTQ5NjcyOTYgfCAwO1xuICAgIHZhciBsbyA9IHggJSA0Mjk0OTY3Mjk2IHwgMDtcbiAgICByZXR1cm4gLyogcmVjb3JkICovW1xuICAgICAgICAgICAgLyogaGkgKi9oaSxcbiAgICAgICAgICAgIC8qIGxvICovKGxvID4+PiAwKVxuICAgICAgICAgIF07XG4gIH1cbn1cblxuZnVuY3Rpb24gZGl2KF9zZWxmLCBfb3RoZXIpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBvdGhlciA9IF9vdGhlcjtcbiAgICB2YXIgc2VsZiA9IF9zZWxmO1xuICAgIHZhciBzZWxmX2hpID0gc2VsZlsvKiBoaSAqLzBdO1xuICAgIHZhciBleGl0ID0gMDtcbiAgICB2YXIgZXhpdCQxID0gMDtcbiAgICBpZiAob3RoZXJbLyogaGkgKi8wXSAhPT0gMCB8fCBvdGhlclsvKiBsbyAqLzFdICE9PSAwKSB7XG4gICAgICBleGl0JDEgPSAyO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5kaXZpc2lvbl9ieV96ZXJvO1xuICAgIH1cbiAgICBpZiAoZXhpdCQxID09PSAyKSB7XG4gICAgICBpZiAoc2VsZl9oaSAhPT0gLTIxNDc0ODM2NDgpIHtcbiAgICAgICAgaWYgKHNlbGZfaGkgIT09IDAgfHwgc2VsZlsvKiBsbyAqLzFdICE9PSAwKSB7XG4gICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHplcm87XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc2VsZlsvKiBsbyAqLzFdICE9PSAwKSB7XG4gICAgICAgIGV4aXQgPSAxO1xuICAgICAgfSBlbHNlIGlmIChlcShvdGhlciwgb25lKSB8fCBlcShvdGhlciwgbmVnX29uZSkpIHtcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICB9IGVsc2UgaWYgKGVxKG90aGVyLCBtaW5faW50KSkge1xuICAgICAgICByZXR1cm4gb25lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG90aGVyX2hpID0gb3RoZXJbLyogaGkgKi8wXTtcbiAgICAgICAgdmFyIGhhbGZfdGhpcyA9IGFzcl8oc2VsZiwgMSk7XG4gICAgICAgIHZhciBhcHByb3ggPSBsc2xfKGRpdihoYWxmX3RoaXMsIG90aGVyKSwgMSk7XG4gICAgICAgIHZhciBleGl0JDIgPSAwO1xuICAgICAgICBpZiAoYXBwcm94Wy8qIGhpICovMF0gIT09IDAgfHwgYXBwcm94Wy8qIGxvICovMV0gIT09IDApIHtcbiAgICAgICAgICBleGl0JDIgPSAzO1xuICAgICAgICB9IGVsc2UgaWYgKG90aGVyX2hpIDwgMCkge1xuICAgICAgICAgIHJldHVybiBvbmU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIG5lZyhvbmUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChleGl0JDIgPT09IDMpIHtcbiAgICAgICAgICB2YXIgeSA9IG11bChvdGhlciwgYXBwcm94KTtcbiAgICAgICAgICB2YXIgcmVtID0gYWRkKHNlbGYsIG5lZyh5KSk7XG4gICAgICAgICAgcmV0dXJuIGFkZChhcHByb3gsIGRpdihyZW0sIG90aGVyKSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChleGl0ID09PSAxKSB7XG4gICAgICB2YXIgb3RoZXJfaGkkMSA9IG90aGVyWy8qIGhpICovMF07XG4gICAgICB2YXIgZXhpdCQzID0gMDtcbiAgICAgIGlmIChvdGhlcl9oaSQxICE9PSAtMjE0NzQ4MzY0OCB8fCBvdGhlclsvKiBsbyAqLzFdICE9PSAwKSB7XG4gICAgICAgIGV4aXQkMyA9IDI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gemVybztcbiAgICAgIH1cbiAgICAgIGlmIChleGl0JDMgPT09IDIpIHtcbiAgICAgICAgaWYgKHNlbGZfaGkgPCAwKSB7XG4gICAgICAgICAgaWYgKG90aGVyX2hpJDEgPCAwKSB7XG4gICAgICAgICAgICBfb3RoZXIgPSBuZWcob3RoZXIpO1xuICAgICAgICAgICAgX3NlbGYgPSBuZWcoc2VsZik7XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZWcoZGl2KG5lZyhzZWxmKSwgb3RoZXIpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAob3RoZXJfaGkkMSA8IDApIHtcbiAgICAgICAgICByZXR1cm4gbmVnKGRpdihzZWxmLCBuZWcob3RoZXIpKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHJlcyA9IHplcm87XG4gICAgICAgICAgdmFyIHJlbSQxID0gc2VsZjtcbiAgICAgICAgICB3aGlsZShnZShyZW0kMSwgb3RoZXIpKSB7XG4gICAgICAgICAgICB2YXIgYXBwcm94JDEgPSBDYW1sX3ByaW1pdGl2ZS5jYW1sX2Zsb2F0X21heCgxLCBNYXRoLmZsb29yKHRvX2Zsb2F0KHJlbSQxKSAvIHRvX2Zsb2F0KG90aGVyKSkpO1xuICAgICAgICAgICAgdmFyIGxvZzIgPSBNYXRoLmNlaWwoTWF0aC5sb2coYXBwcm94JDEpIC8gTWF0aC5MTjIpO1xuICAgICAgICAgICAgdmFyIGRlbHRhID0gbG9nMiA8PSA0OCA/IDEgOiBNYXRoLnBvdygyLCBsb2cyIC0gNDgpO1xuICAgICAgICAgICAgdmFyIGFwcHJveFJlcyA9IG9mX2Zsb2F0KGFwcHJveCQxKTtcbiAgICAgICAgICAgIHZhciBhcHByb3hSZW0gPSBtdWwoYXBwcm94UmVzLCBvdGhlcik7XG4gICAgICAgICAgICB3aGlsZShhcHByb3hSZW1bLyogaGkgKi8wXSA8IDAgfHwgZ3QoYXBwcm94UmVtLCByZW0kMSkpIHtcbiAgICAgICAgICAgICAgYXBwcm94JDEgLT0gZGVsdGE7XG4gICAgICAgICAgICAgIGFwcHJveFJlcyA9IG9mX2Zsb2F0KGFwcHJveCQxKTtcbiAgICAgICAgICAgICAgYXBwcm94UmVtID0gbXVsKGFwcHJveFJlcywgb3RoZXIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChpc196ZXJvKGFwcHJveFJlcykpIHtcbiAgICAgICAgICAgICAgYXBwcm94UmVzID0gb25lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzID0gYWRkKHJlcywgYXBwcm94UmVzKTtcbiAgICAgICAgICAgIHJlbSQxID0gYWRkKHJlbSQxLCBuZWcoYXBwcm94UmVtKSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICB9XG4gICAgXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1vZF8oc2VsZiwgb3RoZXIpIHtcbiAgdmFyIHkgPSBtdWwoZGl2KHNlbGYsIG90aGVyKSwgb3RoZXIpO1xuICByZXR1cm4gYWRkKHNlbGYsIG5lZyh5KSk7XG59XG5cbmZ1bmN0aW9uIGRpdl9tb2Qoc2VsZiwgb3RoZXIpIHtcbiAgdmFyIHF1b3RpZW50ID0gZGl2KHNlbGYsIG90aGVyKTtcbiAgdmFyIHkgPSBtdWwocXVvdGllbnQsIG90aGVyKTtcbiAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgIHF1b3RpZW50LFxuICAgICAgICAgIGFkZChzZWxmLCBuZWcoeSkpXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGNvbXBhcmUoc2VsZiwgb3RoZXIpIHtcbiAgdmFyIHYgPSBDYW1sX3ByaW1pdGl2ZS5jYW1sX25hdGl2ZWludF9jb21wYXJlKHNlbGZbLyogaGkgKi8wXSwgb3RoZXJbLyogaGkgKi8wXSk7XG4gIGlmICh2ID09PSAwKSB7XG4gICAgcmV0dXJuIENhbWxfcHJpbWl0aXZlLmNhbWxfbmF0aXZlaW50X2NvbXBhcmUoc2VsZlsvKiBsbyAqLzFdLCBvdGhlclsvKiBsbyAqLzFdKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdjtcbiAgfVxufVxuXG5mdW5jdGlvbiBvZl9pbnQzMihsbykge1xuICByZXR1cm4gLyogcmVjb3JkICovW1xuICAgICAgICAgIC8qIGhpICovbG8gPCAwID8gLTEgOiAwLFxuICAgICAgICAgIC8qIGxvICovKGxvID4+PiAwKVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiB0b19pbnQzMih4KSB7XG4gIHJldHVybiB4Wy8qIGxvICovMV0gfCAwO1xufVxuXG5mdW5jdGlvbiB0b19oZXgoeCkge1xuICB2YXIgeF9sbyA9IHhbLyogbG8gKi8xXTtcbiAgdmFyIHhfaGkgPSB4Wy8qIGhpICovMF07XG4gIHZhciBhdXggPSBmdW5jdGlvbiAodikge1xuICAgIHJldHVybiAodiA+Pj4gMCkudG9TdHJpbmcoMTYpO1xuICB9O1xuICB2YXIgZXhpdCA9IDA7XG4gIGlmICh4X2hpICE9PSAwIHx8IHhfbG8gIT09IDApIHtcbiAgICBleGl0ID0gMTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCIwXCI7XG4gIH1cbiAgaWYgKGV4aXQgPT09IDEpIHtcbiAgICBpZiAoeF9sbyAhPT0gMCkge1xuICAgICAgaWYgKHhfaGkgIT09IDApIHtcbiAgICAgICAgdmFyIGxvID0gYXV4KHhfbG8pO1xuICAgICAgICB2YXIgcGFkID0gOCAtIGxvLmxlbmd0aCB8IDA7XG4gICAgICAgIGlmIChwYWQgPD0gMCkge1xuICAgICAgICAgIHJldHVybiBhdXgoeF9oaSkgKyBsbztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gYXV4KHhfaGkpICsgKENhbWxfdXRpbHMucmVwZWF0KHBhZCwgXCIwXCIpICsgbG8pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYXV4KHhfbG8pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYXV4KHhfaGkpICsgXCIwMDAwMDAwMFwiO1xuICAgIH1cbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gZGlzY2FyZF9zaWduKHgpIHtcbiAgcmV0dXJuIC8qIHJlY29yZCAqL1tcbiAgICAgICAgICAvKiBoaSAqLzIxNDc0ODM2NDcgJiB4Wy8qIGhpICovMF0sXG4gICAgICAgICAgLyogbG8gKi94Wy8qIGxvICovMV1cbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gZmxvYXRfb2ZfYml0cyAoeCl7IFxuICByZXR1cm4gbmV3IEZsb2F0NjRBcnJheShuZXcgSW50MzJBcnJheShbeFsxXSx4WzBdXSkuYnVmZmVyKVswXVxufTtcblxuZnVuY3Rpb24gYml0c19vZl9mbG9hdCh4KSB7XG4gIHZhciBidWYgPSAobmV3IEludDMyQXJyYXkobmV3IEZsb2F0NjRBcnJheShbeF0pLmJ1ZmZlcikpO1xuICByZXR1cm4gLyogcmVjb3JkICovW1xuICAgICAgICAgIC8qIGhpICovYnVmWzFdLFxuICAgICAgICAgIC8qIGxvICovKGJ1ZlswXSA+Pj4gMClcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gZ2V0NjQocywgaSkge1xuICB2YXIgaGkgPSAocy5jaGFyQ29kZUF0KGkgKyA0IHwgMCkgPDwgMzIpIHwgKHMuY2hhckNvZGVBdChpICsgNSB8IDApIDw8IDQwKSB8IChzLmNoYXJDb2RlQXQoaSArIDYgfCAwKSA8PCA0OCkgfCAocy5jaGFyQ29kZUF0KGkgKyA3IHwgMCkgPDwgNTYpO1xuICB2YXIgbG8gPSBzLmNoYXJDb2RlQXQoaSkgfCAocy5jaGFyQ29kZUF0KGkgKyAxIHwgMCkgPDwgOCkgfCAocy5jaGFyQ29kZUF0KGkgKyAyIHwgMCkgPDwgMTYpIHwgKHMuY2hhckNvZGVBdChpICsgMyB8IDApIDw8IDI0KTtcbiAgcmV0dXJuIC8qIHJlY29yZCAqL1tcbiAgICAgICAgICAvKiBoaSAqL2hpLFxuICAgICAgICAgIC8qIGxvICovKGxvID4+PiAwKVxuICAgICAgICBdO1xufVxuXG5leHBvcnRzLm1pbl9pbnQgPSBtaW5faW50O1xuZXhwb3J0cy5tYXhfaW50ID0gbWF4X2ludDtcbmV4cG9ydHMub25lID0gb25lO1xuZXhwb3J0cy56ZXJvID0gemVybztcbmV4cG9ydHMubm90ID0gbm90O1xuZXhwb3J0cy5vZl9pbnQzMiA9IG9mX2ludDMyO1xuZXhwb3J0cy50b19pbnQzMiA9IHRvX2ludDMyO1xuZXhwb3J0cy5hZGQgPSBhZGQ7XG5leHBvcnRzLm5lZyA9IG5lZztcbmV4cG9ydHMuc3ViID0gc3ViO1xuZXhwb3J0cy5sc2xfID0gbHNsXztcbmV4cG9ydHMubHNyXyA9IGxzcl87XG5leHBvcnRzLmFzcl8gPSBhc3JfO1xuZXhwb3J0cy5pc196ZXJvID0gaXNfemVybztcbmV4cG9ydHMubXVsID0gbXVsO1xuZXhwb3J0cy54b3IgPSB4b3I7XG5leHBvcnRzLm9yXyA9IG9yXztcbmV4cG9ydHMuYW5kXyA9IGFuZF87XG5leHBvcnRzLnN3YXAgPSBzd2FwO1xuZXhwb3J0cy5nZSA9IGdlO1xuZXhwb3J0cy5lcSA9IGVxO1xuZXhwb3J0cy5uZXEgPSBuZXE7XG5leHBvcnRzLmx0ID0gbHQ7XG5leHBvcnRzLmd0ID0gZ3Q7XG5leHBvcnRzLmxlID0gbGU7XG5leHBvcnRzLmVxdWFsX251bGwgPSBlcXVhbF9udWxsO1xuZXhwb3J0cy5lcXVhbF91bmRlZmluZWQgPSBlcXVhbF91bmRlZmluZWQ7XG5leHBvcnRzLmVxdWFsX251bGxhYmxlID0gZXF1YWxfbnVsbGFibGU7XG5leHBvcnRzLm1pbiA9IG1pbjtcbmV4cG9ydHMubWF4ID0gbWF4O1xuZXhwb3J0cy50b19mbG9hdCA9IHRvX2Zsb2F0O1xuZXhwb3J0cy5vZl9mbG9hdCA9IG9mX2Zsb2F0O1xuZXhwb3J0cy5kaXYgPSBkaXY7XG5leHBvcnRzLm1vZF8gPSBtb2RfO1xuZXhwb3J0cy5jb21wYXJlID0gY29tcGFyZTtcbmV4cG9ydHMuZmxvYXRfb2ZfYml0cyA9IGZsb2F0X29mX2JpdHM7XG5leHBvcnRzLmJpdHNfb2ZfZmxvYXQgPSBiaXRzX29mX2Zsb2F0O1xuZXhwb3J0cy5nZXQ2NCA9IGdldDY0O1xuZXhwb3J0cy5kaXZfbW9kID0gZGl2X21vZDtcbmV4cG9ydHMudG9faGV4ID0gdG9faGV4O1xuZXhwb3J0cy5kaXNjYXJkX3NpZ24gPSBkaXNjYXJkX3NpZ247XG4vKiBDYW1sX2ludDMyIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDdXJyeSA9IHJlcXVpcmUoXCIuL2N1cnJ5LmpzXCIpO1xuXG52YXIgc3Rkb3V0ID0gLyogcmVjb3JkICovW1xuICAvKiBidWZmZXIgKi9cIlwiLFxuICAvKiBvdXRwdXQgKi8oZnVuY3Rpb24gKHBhcmFtLCBzKSB7XG4gICAgICB2YXIgdiA9IHMubGVuZ3RoIC0gMSB8IDA7XG4gICAgICBpZiAoKCAodHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIpICYmIHByb2Nlc3Muc3Rkb3V0ICYmIHByb2Nlc3Muc3Rkb3V0LndyaXRlKSkge1xuICAgICAgICByZXR1cm4gKCBwcm9jZXNzLnN0ZG91dC53cml0ZSApKHMpO1xuICAgICAgfSBlbHNlIGlmIChzW3ZdID09PSBcIlxcblwiKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHMuc2xpY2UoMCwgdikpO1xuICAgICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2cocyk7XG4gICAgICAgIHJldHVybiAvKiAoKSAqLzA7XG4gICAgICB9XG4gICAgfSlcbl07XG5cbnZhciBzdGRlcnIgPSAvKiByZWNvcmQgKi9bXG4gIC8qIGJ1ZmZlciAqL1wiXCIsXG4gIC8qIG91dHB1dCAqLyhmdW5jdGlvbiAocGFyYW0sIHMpIHtcbiAgICAgIHZhciB2ID0gcy5sZW5ndGggLSAxIHwgMDtcbiAgICAgIGlmIChzW3ZdID09PSBcIlxcblwiKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHMuc2xpY2UoMCwgdikpO1xuICAgICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2cocyk7XG4gICAgICAgIHJldHVybiAvKiAoKSAqLzA7XG4gICAgICB9XG4gICAgfSlcbl07XG5cbmZ1bmN0aW9uIGNhbWxfbWxfZmx1c2gob2MpIHtcbiAgaWYgKG9jWy8qIGJ1ZmZlciAqLzBdICE9PSBcIlwiKSB7XG4gICAgQ3VycnkuXzIob2NbLyogb3V0cHV0ICovMV0sIG9jLCBvY1svKiBidWZmZXIgKi8wXSk7XG4gICAgb2NbLyogYnVmZmVyICovMF0gPSBcIlwiO1xuICAgIHJldHVybiAvKiAoKSAqLzA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9tbF9vdXRwdXQob2MsIHN0ciwgb2Zmc2V0LCBsZW4pIHtcbiAgdmFyIHN0ciQxID0gb2Zmc2V0ID09PSAwICYmIGxlbiA9PT0gc3RyLmxlbmd0aCA/IHN0ciA6IHN0ci5zbGljZShvZmZzZXQsIGxlbik7XG4gIGlmICgoICh0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIikgJiYgcHJvY2Vzcy5zdGRvdXQgJiYgcHJvY2Vzcy5zdGRvdXQud3JpdGUgKSAmJiBvYyA9PT0gc3Rkb3V0KSB7XG4gICAgcmV0dXJuICggcHJvY2Vzcy5zdGRvdXQud3JpdGUgKShzdHIkMSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGlkID0gc3RyJDEubGFzdEluZGV4T2YoXCJcXG5cIik7XG4gICAgaWYgKGlkIDwgMCkge1xuICAgICAgb2NbLyogYnVmZmVyICovMF0gPSBvY1svKiBidWZmZXIgKi8wXSArIHN0ciQxO1xuICAgICAgcmV0dXJuIC8qICgpICovMDtcbiAgICB9IGVsc2Uge1xuICAgICAgb2NbLyogYnVmZmVyICovMF0gPSBvY1svKiBidWZmZXIgKi8wXSArIHN0ciQxLnNsaWNlKDAsIGlkICsgMSB8IDApO1xuICAgICAgY2FtbF9tbF9mbHVzaChvYyk7XG4gICAgICBvY1svKiBidWZmZXIgKi8wXSA9IG9jWy8qIGJ1ZmZlciAqLzBdICsgc3RyJDEuc2xpY2UoaWQgKyAxIHwgMCk7XG4gICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX21sX291dHB1dF9jaGFyKG9jLCAkJGNoYXIpIHtcbiAgcmV0dXJuIGNhbWxfbWxfb3V0cHV0KG9jLCBTdHJpbmcuZnJvbUNoYXJDb2RlKCQkY2hhciksIDAsIDEpO1xufVxuXG5mdW5jdGlvbiBjYW1sX21sX291dF9jaGFubmVsc19saXN0KHBhcmFtKSB7XG4gIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICBzdGRvdXQsXG4gICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICBzdGRlcnIsXG4gICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICBdXG4gICAgICAgIF07XG59XG5cbnZhciBzdGRpbiA9IHVuZGVmaW5lZDtcblxuZXhwb3J0cy5zdGRpbiA9IHN0ZGluO1xuZXhwb3J0cy5zdGRvdXQgPSBzdGRvdXQ7XG5leHBvcnRzLnN0ZGVyciA9IHN0ZGVycjtcbmV4cG9ydHMuY2FtbF9tbF9mbHVzaCA9IGNhbWxfbWxfZmx1c2g7XG5leHBvcnRzLmNhbWxfbWxfb3V0cHV0ID0gY2FtbF9tbF9vdXRwdXQ7XG5leHBvcnRzLmNhbWxfbWxfb3V0cHV0X2NoYXIgPSBjYW1sX21sX291dHB1dF9jaGFyO1xuZXhwb3J0cy5jYW1sX21sX291dF9jaGFubmVsc19saXN0ID0gY2FtbF9tbF9vdXRfY2hhbm5lbHNfbGlzdDtcbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW1sX29wdGlvbiA9IHJlcXVpcmUoXCIuL2NhbWxfb3B0aW9uLmpzXCIpO1xudmFyIENhbWxfZXhjZXB0aW9ucyA9IHJlcXVpcmUoXCIuL2NhbWxfZXhjZXB0aW9ucy5qc1wiKTtcblxudmFyICQkRXJyb3IgPSBDYW1sX2V4Y2VwdGlvbnMuY3JlYXRlKFwiQ2FtbF9qc19leGNlcHRpb25zLkVycm9yXCIpO1xuXG5mdW5jdGlvbiBpbnRlcm5hbFRvT0NhbWxFeGNlcHRpb24oZSkge1xuICBpZiAoQ2FtbF9leGNlcHRpb25zLmNhbWxfaXNfZXh0ZW5zaW9uKGUpKSB7XG4gICAgcmV0dXJuIGU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgICAgICQkRXJyb3IsXG4gICAgICAgICAgICBlXG4gICAgICAgICAgXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX2FzX2pzX2V4bihleG4pIHtcbiAgaWYgKGV4blswXSA9PT0gJCRFcnJvcikge1xuICAgIHJldHVybiBDYW1sX29wdGlvbi5zb21lKGV4blsxXSk7XG4gIH1cbiAgXG59XG5cbmV4cG9ydHMuJCRFcnJvciA9ICQkRXJyb3I7XG5leHBvcnRzLmludGVybmFsVG9PQ2FtbEV4Y2VwdGlvbiA9IGludGVybmFsVG9PQ2FtbEV4Y2VwdGlvbjtcbmV4cG9ydHMuY2FtbF9hc19qc19leG4gPSBjYW1sX2FzX2pzX2V4bjtcbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCIndXNlIHN0cmljdCc7XG5cblxuZnVuY3Rpb24gbm90X2ltcGxlbWVudGVkIChzKXtcbiAgdGhyb3cgbmV3IEVycm9yKHMgKyBcIiBub3QgaW1wbGVtZW50ZWQgYnkgQnVja2xlU2NyaXB0IHlldFxcblwiKVxufTtcblxuZXhwb3J0cy5ub3RfaW1wbGVtZW50ZWQgPSBub3RfaW1wbGVtZW50ZWQ7XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQmxvY2sgPSByZXF1aXJlKFwiLi9ibG9jay5qc1wiKTtcbnZhciBDYW1sX3ByaW1pdGl2ZSA9IHJlcXVpcmUoXCIuL2NhbWxfcHJpbWl0aXZlLmpzXCIpO1xudmFyIENhbWxfYnVpbHRpbl9leGNlcHRpb25zID0gcmVxdWlyZShcIi4vY2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuanNcIik7XG5cbmZ1bmN0aW9uIGNhbWxfb2JqX2Jsb2NrKHRhZywgc2l6ZSkge1xuICB2YXIgdiA9IG5ldyBBcnJheShzaXplKTtcbiAgdi50YWcgPSB0YWc7XG4gIHJldHVybiB2O1xufVxuXG5mdW5jdGlvbiBjYW1sX29ial9kdXAoeCkge1xuICB2YXIgbGVuID0geC5sZW5ndGggfCAwO1xuICB2YXIgdiA9IG5ldyBBcnJheShsZW4pO1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGxlbiAtIDEgfCAwOyBpIDw9IGlfZmluaXNoOyArK2kpe1xuICAgIHZbaV0gPSB4W2ldO1xuICB9XG4gIHYudGFnID0geC50YWcgfCAwO1xuICByZXR1cm4gdjtcbn1cblxuZnVuY3Rpb24gY2FtbF9vYmpfdHJ1bmNhdGUoeCwgbmV3X3NpemUpIHtcbiAgdmFyIGxlbiA9IHgubGVuZ3RoIHwgMDtcbiAgaWYgKG5ld19zaXplIDw9IDAgfHwgbmV3X3NpemUgPiBsZW4pIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIk9iai50cnVuY2F0ZVwiXG4gICAgICAgIF07XG4gIH0gZWxzZSBpZiAobGVuICE9PSBuZXdfc2l6ZSkge1xuICAgIGZvcih2YXIgaSA9IG5ld19zaXplICxpX2ZpbmlzaCA9IGxlbiAtIDEgfCAwOyBpIDw9IGlfZmluaXNoOyArK2kpe1xuICAgICAgeFtpXSA9IDA7XG4gICAgfVxuICAgIHgubGVuZ3RoID0gbmV3X3NpemU7XG4gICAgcmV0dXJuIC8qICgpICovMDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX2xhenlfbWFrZV9mb3J3YXJkKHgpIHtcbiAgcmV0dXJuIEJsb2NrLl9fKDI1MCwgW3hdKTtcbn1cblxuZnVuY3Rpb24gY2FtbF91cGRhdGVfZHVtbXkoeCwgeSkge1xuICB2YXIgbGVuID0geS5sZW5ndGggfCAwO1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGxlbiAtIDEgfCAwOyBpIDw9IGlfZmluaXNoOyArK2kpe1xuICAgIHhbaV0gPSB5W2ldO1xuICB9XG4gIHZhciB5X3RhZyA9IHkudGFnIHwgMDtcbiAgaWYgKHlfdGFnICE9PSAwKSB7XG4gICAgeC50YWcgPSB5X3RhZztcbiAgICByZXR1cm4gLyogKCkgKi8wO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZvcl9pbiAobyxmb28pe1xuICAgICAgICBmb3IgKHZhciB4IGluIG8pIHsgZm9vKHgpIH1cbiAgICAgIH07XG5cbmZ1bmN0aW9uIGNhbWxfY29tcGFyZShfYSwgX2IpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBiID0gX2I7XG4gICAgdmFyIGEgPSBfYTtcbiAgICBpZiAoYSA9PT0gYikge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhX3R5cGUgPSB0eXBlb2YgYTtcbiAgICAgIHZhciBiX3R5cGUgPSB0eXBlb2YgYjtcbiAgICAgIHZhciBleGl0ID0gMDtcbiAgICAgIHN3aXRjaCAoYV90eXBlKSB7XG4gICAgICAgIGNhc2UgXCJib29sZWFuXCIgOiBcbiAgICAgICAgICAgIGlmIChiX3R5cGUgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICAgIHJldHVybiBDYW1sX3ByaW1pdGl2ZS5jYW1sX2Jvb2xfY29tcGFyZShhLCBiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGV4aXQgPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJmdW5jdGlvblwiIDogXG4gICAgICAgICAgICBpZiAoYl90eXBlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgICAgICAgICAgICBcImNvbXBhcmU6IGZ1bmN0aW9uYWwgdmFsdWVcIlxuICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGV4aXQgPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJudW1iZXJcIiA6IFxuICAgICAgICAgICAgaWYgKGJfdHlwZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICByZXR1cm4gQ2FtbF9wcmltaXRpdmUuY2FtbF9pbnRfY29tcGFyZShhLCBiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGV4aXQgPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJzdHJpbmdcIiA6IFxuICAgICAgICAgICAgaWYgKGJfdHlwZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICByZXR1cm4gQ2FtbF9wcmltaXRpdmUuY2FtbF9zdHJpbmdfY29tcGFyZShhLCBiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgfVxuICAgICAgICBjYXNlIFwidW5kZWZpbmVkXCIgOiBcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBleGl0ID0gMTtcbiAgICAgIH1cbiAgICAgIGlmIChleGl0ID09PSAxKSB7XG4gICAgICAgIHN3aXRjaCAoYl90eXBlKSB7XG4gICAgICAgICAgY2FzZSBcInN0cmluZ1wiIDogXG4gICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICBjYXNlIFwidW5kZWZpbmVkXCIgOiBcbiAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGlmIChhX3R5cGUgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChiX3R5cGUgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYV90eXBlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGJfdHlwZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYV90eXBlID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgIGlmIChiID09PSBudWxsIHx8IGIudGFnID09PSAyNTYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYl90eXBlID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgIGlmIChhID09PSBudWxsIHx8IGEudGFnID09PSAyNTYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICBpZiAoYi50YWcgPT09IDI1Nikge1xuICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChiID09PSBudWxsKSB7XG4gICAgICAgICAgICAgIGlmIChhLnRhZyA9PT0gMjU2KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgdGFnX2EgPSBhLnRhZyB8IDA7XG4gICAgICAgICAgICAgIHZhciB0YWdfYiA9IGIudGFnIHwgMDtcbiAgICAgICAgICAgICAgaWYgKHRhZ19hID09PSAyNTApIHtcbiAgICAgICAgICAgICAgICBfYSA9IGFbMF07XG4gICAgICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRhZ19iID09PSAyNTApIHtcbiAgICAgICAgICAgICAgICBfYiA9IGJbMF07XG4gICAgICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRhZ19hID09PSAyNTYpIHtcbiAgICAgICAgICAgICAgICBpZiAodGFnX2IgPT09IDI1Nikge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIENhbWxfcHJpbWl0aXZlLmNhbWxfaW50X2NvbXBhcmUoYVsxXSwgYlsxXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodGFnX2EgPT09IDI0OCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBDYW1sX3ByaW1pdGl2ZS5jYW1sX2ludF9jb21wYXJlKGFbMV0sIGJbMV0pO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRhZ19hID09PSAyNTEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBbXG4gICAgICAgICAgICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICAgICAgICAgICAgICBcImVxdWFsOiBhYnN0cmFjdCB2YWx1ZVwiXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodGFnX2EgIT09IHRhZ19iKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRhZ19hIDwgdGFnX2IpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBsZW5fYSA9IGEubGVuZ3RoIHwgMDtcbiAgICAgICAgICAgICAgICB2YXIgbGVuX2IgPSBiLmxlbmd0aCB8IDA7XG4gICAgICAgICAgICAgICAgaWYgKGxlbl9hID09PSBsZW5fYikge1xuICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGEkMSA9IGE7XG4gICAgICAgICAgICAgICAgICAgIHZhciBiJDEgPSBiO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2kgPSAwO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2FtZV9sZW5ndGggPSBsZW5fYTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUodHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gX2k7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IHNhbWVfbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlcyA9IGNhbWxfY29tcGFyZShhJDFbaV0sIGIkMVtpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhJDIgPSBhO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYiQyID0gYjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1pbl9rZXlfbGhzID0gLyogcmVjb3JkICovWy8qIGNvbnRlbnRzICovdW5kZWZpbmVkXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1pbl9rZXlfcmhzID0gLyogcmVjb3JkICovWy8qIGNvbnRlbnRzICovdW5kZWZpbmVkXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRvX2tleSA9IGZ1bmN0aW9uIChwYXJhbSwga2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIG1pbl9rZXkgPSBwYXJhbVsyXTtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgYiA9IHBhcmFtWzFdO1xuICAgICAgICAgICAgICAgICAgICAgIGlmICghYi5oYXNPd25Qcm9wZXJ0eShrZXkpIHx8IGNhbWxfY29tcGFyZShwYXJhbVswXVtrZXldLCBiW2tleV0pID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gbWluX2tleVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCAhPT0gdW5kZWZpbmVkICYmIGtleSA+PSBtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1pbl9rZXlbMF0gPSBrZXk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiAoKSAqLzA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnRpYWxfYXJnID0gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgYSQyLFxuICAgICAgICAgICAgICAgICAgICAgIGIkMixcbiAgICAgICAgICAgICAgICAgICAgICBtaW5fa2V5X3Joc1xuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZG9fa2V5X2EgPSAoZnVuY3Rpb24ocGFydGlhbF9hcmcpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gZG9fa2V5X2EocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9fa2V5KHBhcnRpYWxfYXJnLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfShwYXJ0aWFsX2FyZykpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFydGlhbF9hcmckMSA9IC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgIGIkMixcbiAgICAgICAgICAgICAgICAgICAgICBhJDIsXG4gICAgICAgICAgICAgICAgICAgICAgbWluX2tleV9saHNcbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRvX2tleV9iID0gKGZ1bmN0aW9uKHBhcnRpYWxfYXJnJDEpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gZG9fa2V5X2IocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9fa2V5KHBhcnRpYWxfYXJnJDEsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KHBhcnRpYWxfYXJnJDEpKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yX2luKGEkMiwgZG9fa2V5X2EpO1xuICAgICAgICAgICAgICAgICAgICBmb3JfaW4oYiQyLCBkb19rZXlfYik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IG1pbl9rZXlfbGhzWzBdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2gkMSA9IG1pbl9rZXlfcmhzWzBdO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCQxICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDYW1sX3ByaW1pdGl2ZS5jYW1sX3N0cmluZ19jb21wYXJlKG1hdGNoLCBtYXRjaCQxKTtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaCQxICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobGVuX2EgPCBsZW5fYikge1xuICAgICAgICAgICAgICAgICAgdmFyIGEkMyA9IGE7XG4gICAgICAgICAgICAgICAgICB2YXIgYiQzID0gYjtcbiAgICAgICAgICAgICAgICAgIHZhciBfaSQxID0gMDtcbiAgICAgICAgICAgICAgICAgIHZhciBzaG9ydF9sZW5ndGggPSBsZW5fYTtcbiAgICAgICAgICAgICAgICAgIHdoaWxlKHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkkMSA9IF9pJDE7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpJDEgPT09IHNob3J0X2xlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzJDEgPSBjYW1sX2NvbXBhcmUoYSQzW2kkMV0sIGIkM1tpJDFdKTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzJDEgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXMkMTtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2kkMSA9IGkkMSArIDEgfCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdmFyIGEkNCA9IGE7XG4gICAgICAgICAgICAgICAgICB2YXIgYiQ0ID0gYjtcbiAgICAgICAgICAgICAgICAgIHZhciBfaSQyID0gMDtcbiAgICAgICAgICAgICAgICAgIHZhciBzaG9ydF9sZW5ndGgkMSA9IGxlbl9iO1xuICAgICAgICAgICAgICAgICAgd2hpbGUodHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaSQyID0gX2kkMjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkkMiA9PT0gc2hvcnRfbGVuZ3RoJDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzJDIgPSBjYW1sX2NvbXBhcmUoYSQ0W2kkMl0sIGIkNFtpJDJdKTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzJDIgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXMkMjtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2kkMiA9IGkkMiArIDEgfCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjYW1sX2VxdWFsKF9hLCBfYikge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGIgPSBfYjtcbiAgICB2YXIgYSA9IF9hO1xuICAgIGlmIChhID09PSBiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFfdHlwZSA9IHR5cGVvZiBhO1xuICAgICAgaWYgKGFfdHlwZSA9PT0gXCJzdHJpbmdcIiB8fCBhX3R5cGUgPT09IFwibnVtYmVyXCIgfHwgYV90eXBlID09PSBcImJvb2xlYW5cIiB8fCBhX3R5cGUgPT09IFwidW5kZWZpbmVkXCIgfHwgYSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgYl90eXBlID0gdHlwZW9mIGI7XG4gICAgICAgIGlmIChhX3R5cGUgPT09IFwiZnVuY3Rpb25cIiB8fCBiX3R5cGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIHRocm93IFtcbiAgICAgICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgICAgICAgIFwiZXF1YWw6IGZ1bmN0aW9uYWwgdmFsdWVcIlxuICAgICAgICAgICAgICBdO1xuICAgICAgICB9IGVsc2UgaWYgKGJfdHlwZSA9PT0gXCJudW1iZXJcIiB8fCBiX3R5cGUgPT09IFwidW5kZWZpbmVkXCIgfHwgYiA9PT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgdGFnX2EgPSBhLnRhZyB8IDA7XG4gICAgICAgICAgdmFyIHRhZ19iID0gYi50YWcgfCAwO1xuICAgICAgICAgIGlmICh0YWdfYSA9PT0gMjUwKSB7XG4gICAgICAgICAgICBfYSA9IGFbMF07XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgfSBlbHNlIGlmICh0YWdfYiA9PT0gMjUwKSB7XG4gICAgICAgICAgICBfYiA9IGJbMF07XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgfSBlbHNlIGlmICh0YWdfYSA9PT0gMjQ4KSB7XG4gICAgICAgICAgICByZXR1cm4gYVsxXSA9PT0gYlsxXTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRhZ19hID09PSAyNTEpIHtcbiAgICAgICAgICAgIHRocm93IFtcbiAgICAgICAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgICAgICAgICBcImVxdWFsOiBhYnN0cmFjdCB2YWx1ZVwiXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRhZ19hICE9PSB0YWdfYikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGFnX2EgPT09IDI1Nikge1xuICAgICAgICAgICAgcmV0dXJuIGFbMV0gPT09IGJbMV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBsZW5fYSA9IGEubGVuZ3RoIHwgMDtcbiAgICAgICAgICAgIHZhciBsZW5fYiA9IGIubGVuZ3RoIHwgMDtcbiAgICAgICAgICAgIGlmIChsZW5fYSA9PT0gbGVuX2IpIHtcbiAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgYSQxID0gYTtcbiAgICAgICAgICAgICAgICB2YXIgYiQxID0gYjtcbiAgICAgICAgICAgICAgICB2YXIgX2kgPSAwO1xuICAgICAgICAgICAgICAgIHZhciBzYW1lX2xlbmd0aCA9IGxlbl9hO1xuICAgICAgICAgICAgICAgIHdoaWxlKHRydWUpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBpID0gX2k7XG4gICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gc2FtZV9sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNhbWxfZXF1YWwoYSQxW2ldLCBiJDFbaV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgYSQyID0gYTtcbiAgICAgICAgICAgICAgICB2YXIgYiQyID0gYjtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gLyogcmVjb3JkICovWy8qIGNvbnRlbnRzICovdHJ1ZV07XG4gICAgICAgICAgICAgICAgdmFyIGRvX2tleV9hID0gKGZ1bmN0aW9uKGIkMixyZXN1bHQpe1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBkb19rZXlfYShrZXkpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChiJDIuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFswXSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KGIkMixyZXN1bHQpKTtcbiAgICAgICAgICAgICAgICB2YXIgZG9fa2V5X2IgPSAoZnVuY3Rpb24oYSQyLGIkMixyZXN1bHQpe1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBkb19rZXlfYihrZXkpIHtcbiAgICAgICAgICAgICAgICAgIGlmICghYSQyLmhhc093blByb3BlcnR5KGtleSkgfHwgIWNhbWxfZXF1YWwoYiQyW2tleV0sIGEkMltrZXldKSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRbMF0gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qICgpICovMDtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KGEkMixiJDIscmVzdWx0KSk7XG4gICAgICAgICAgICAgICAgZm9yX2luKGEkMiwgZG9fa2V5X2EpO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHRbMF0pIHtcbiAgICAgICAgICAgICAgICAgIGZvcl9pbihiJDIsIGRvX2tleV9iKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFswXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY2FtbF9lcXVhbF9udWxsKHgsIHkpIHtcbiAgaWYgKHkgIT09IG51bGwpIHtcbiAgICByZXR1cm4gY2FtbF9lcXVhbCh4LCB5KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCA9PT0geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX2VxdWFsX3VuZGVmaW5lZCh4LCB5KSB7XG4gIGlmICh5ICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gY2FtbF9lcXVhbCh4LCB5KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCA9PT0geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX2VxdWFsX251bGxhYmxlKHgsIHkpIHtcbiAgaWYgKHkgPT0gbnVsbCkge1xuICAgIHJldHVybiB4ID09PSB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjYW1sX2VxdWFsKHgsIHkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfbm90ZXF1YWwoYSwgYikge1xuICByZXR1cm4gIWNhbWxfZXF1YWwoYSwgYik7XG59XG5cbmZ1bmN0aW9uIGNhbWxfZ3JlYXRlcmVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGNhbWxfY29tcGFyZShhLCBiKSA+PSAwO1xufVxuXG5mdW5jdGlvbiBjYW1sX2dyZWF0ZXJ0aGFuKGEsIGIpIHtcbiAgcmV0dXJuIGNhbWxfY29tcGFyZShhLCBiKSA+IDA7XG59XG5cbmZ1bmN0aW9uIGNhbWxfbGVzc2VxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGNhbWxfY29tcGFyZShhLCBiKSA8PSAwO1xufVxuXG5mdW5jdGlvbiBjYW1sX2xlc3N0aGFuKGEsIGIpIHtcbiAgcmV0dXJuIGNhbWxfY29tcGFyZShhLCBiKSA8IDA7XG59XG5cbmZ1bmN0aW9uIGNhbWxfbWluKHgsIHkpIHtcbiAgaWYgKGNhbWxfY29tcGFyZSh4LCB5KSA8PSAwKSB7XG4gICAgcmV0dXJuIHg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9tYXgoeCwgeSkge1xuICBpZiAoY2FtbF9jb21wYXJlKHgsIHkpID49IDApIHtcbiAgICByZXR1cm4geDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX29ial9zZXRfdGFnKHByaW0sIHByaW0kMSkge1xuICBwcmltLnRhZyA9IHByaW0kMTtcbiAgcmV0dXJuIC8qICgpICovMDtcbn1cblxuZXhwb3J0cy5jYW1sX29ial9ibG9jayA9IGNhbWxfb2JqX2Jsb2NrO1xuZXhwb3J0cy5jYW1sX29ial9kdXAgPSBjYW1sX29ial9kdXA7XG5leHBvcnRzLmNhbWxfb2JqX3RydW5jYXRlID0gY2FtbF9vYmpfdHJ1bmNhdGU7XG5leHBvcnRzLmNhbWxfbGF6eV9tYWtlX2ZvcndhcmQgPSBjYW1sX2xhenlfbWFrZV9mb3J3YXJkO1xuZXhwb3J0cy5jYW1sX3VwZGF0ZV9kdW1teSA9IGNhbWxfdXBkYXRlX2R1bW15O1xuZXhwb3J0cy5jYW1sX2NvbXBhcmUgPSBjYW1sX2NvbXBhcmU7XG5leHBvcnRzLmNhbWxfZXF1YWwgPSBjYW1sX2VxdWFsO1xuZXhwb3J0cy5jYW1sX2VxdWFsX251bGwgPSBjYW1sX2VxdWFsX251bGw7XG5leHBvcnRzLmNhbWxfZXF1YWxfdW5kZWZpbmVkID0gY2FtbF9lcXVhbF91bmRlZmluZWQ7XG5leHBvcnRzLmNhbWxfZXF1YWxfbnVsbGFibGUgPSBjYW1sX2VxdWFsX251bGxhYmxlO1xuZXhwb3J0cy5jYW1sX25vdGVxdWFsID0gY2FtbF9ub3RlcXVhbDtcbmV4cG9ydHMuY2FtbF9ncmVhdGVyZXF1YWwgPSBjYW1sX2dyZWF0ZXJlcXVhbDtcbmV4cG9ydHMuY2FtbF9ncmVhdGVydGhhbiA9IGNhbWxfZ3JlYXRlcnRoYW47XG5leHBvcnRzLmNhbWxfbGVzc3RoYW4gPSBjYW1sX2xlc3N0aGFuO1xuZXhwb3J0cy5jYW1sX2xlc3NlcXVhbCA9IGNhbWxfbGVzc2VxdWFsO1xuZXhwb3J0cy5jYW1sX21pbiA9IGNhbWxfbWluO1xuZXhwb3J0cy5jYW1sX21heCA9IGNhbWxfbWF4O1xuZXhwb3J0cy5jYW1sX29ial9zZXRfdGFnID0gY2FtbF9vYmpfc2V0X3RhZztcbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCIndXNlIHN0cmljdCc7XG5cblxudmFyIHVuZGVmaW5lZEhlYWRlciA9IC8qIGFycmF5ICovW107XG5cbmZ1bmN0aW9uIHNvbWUoeCkge1xuICBpZiAoeCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGJsb2NrID0gLyogdHVwbGUgKi9bXG4gICAgICB1bmRlZmluZWRIZWFkZXIsXG4gICAgICAwXG4gICAgXTtcbiAgICBibG9jay50YWcgPSAyNTY7XG4gICAgcmV0dXJuIGJsb2NrO1xuICB9IGVsc2UgaWYgKHggIT09IG51bGwgJiYgeFswXSA9PT0gdW5kZWZpbmVkSGVhZGVyKSB7XG4gICAgdmFyIG5pZCA9IHhbMV0gKyAxIHwgMDtcbiAgICB2YXIgYmxvY2skMSA9IC8qIHR1cGxlICovW1xuICAgICAgdW5kZWZpbmVkSGVhZGVyLFxuICAgICAgbmlkXG4gICAgXTtcbiAgICBibG9jayQxLnRhZyA9IDI1NjtcbiAgICByZXR1cm4gYmxvY2skMTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geDtcbiAgfVxufVxuXG5mdW5jdGlvbiBudWxsYWJsZV90b19vcHQoeCkge1xuICBpZiAoeCA9PT0gbnVsbCB8fCB4ID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzb21lKHgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVuZGVmaW5lZF90b19vcHQoeCkge1xuICBpZiAoeCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc29tZSh4KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBudWxsX3RvX29wdCh4KSB7XG4gIGlmICh4ID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc29tZSh4KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxGcm9tT3B0aW9uKHgpIHtcbiAgaWYgKHggIT09IG51bGwgJiYgeFswXSA9PT0gdW5kZWZpbmVkSGVhZGVyKSB7XG4gICAgdmFyIGRlcHRoID0geFsxXTtcbiAgICBpZiAoZGVwdGggPT09IDApIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgdW5kZWZpbmVkSGVhZGVyLFxuICAgICAgICAgICAgICBkZXB0aCAtIDEgfCAwXG4gICAgICAgICAgICBdO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geDtcbiAgfVxufVxuXG5mdW5jdGlvbiBvcHRpb25fZ2V0KHgpIHtcbiAgaWYgKHggPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZhbEZyb21PcHRpb24oeCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gb3B0aW9uX2dldF91bndyYXAoeCkge1xuICBpZiAoeCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdmFsRnJvbU9wdGlvbih4KVsxXTtcbiAgfVxufVxuXG5leHBvcnRzLm51bGxhYmxlX3RvX29wdCA9IG51bGxhYmxlX3RvX29wdDtcbmV4cG9ydHMudW5kZWZpbmVkX3RvX29wdCA9IHVuZGVmaW5lZF90b19vcHQ7XG5leHBvcnRzLm51bGxfdG9fb3B0ID0gbnVsbF90b19vcHQ7XG5leHBvcnRzLnZhbEZyb21PcHRpb24gPSB2YWxGcm9tT3B0aW9uO1xuZXhwb3J0cy5zb21lID0gc29tZTtcbmV4cG9ydHMub3B0aW9uX2dldCA9IG9wdGlvbl9nZXQ7XG5leHBvcnRzLm9wdGlvbl9nZXRfdW53cmFwID0gb3B0aW9uX2dldF91bndyYXA7XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5cbmZ1bmN0aW9uIGNhbWxfaW50X2NvbXBhcmUoeCwgeSkge1xuICBpZiAoeCA8IHkpIHtcbiAgICByZXR1cm4gLTE7XG4gIH0gZWxzZSBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiAwO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAxO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfYm9vbF9jb21wYXJlKHgsIHkpIHtcbiAgaWYgKHgpIHtcbiAgICBpZiAoeSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgfSBlbHNlIGlmICh5KSB7XG4gICAgcmV0dXJuIC0xO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfZmxvYXRfY29tcGFyZSh4LCB5KSB7XG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIDA7XG4gIH0gZWxzZSBpZiAoeCA8IHkpIHtcbiAgICByZXR1cm4gLTE7XG4gIH0gZWxzZSBpZiAoeCA+IHkgfHwgeCA9PT0geCkge1xuICAgIHJldHVybiAxO1xuICB9IGVsc2UgaWYgKHkgPT09IHkpIHtcbiAgICByZXR1cm4gLTE7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9zdHJpbmdfY29tcGFyZShzMSwgczIpIHtcbiAgaWYgKHMxID09PSBzMikge1xuICAgIHJldHVybiAwO1xuICB9IGVsc2UgaWYgKHMxIDwgczIpIHtcbiAgICByZXR1cm4gLTE7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9ieXRlc19jb21wYXJlX2F1eChzMSwgczIsIF9vZmYsIGxlbiwgZGVmKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgb2ZmID0gX29mZjtcbiAgICBpZiAob2ZmIDwgbGVuKSB7XG4gICAgICB2YXIgYSA9IHMxW29mZl07XG4gICAgICB2YXIgYiA9IHMyW29mZl07XG4gICAgICBpZiAoYSA+IGIpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9IGVsc2UgaWYgKGEgPCBiKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9vZmYgPSBvZmYgKyAxIHwgMDtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZGVmO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY2FtbF9ieXRlc19jb21wYXJlKHMxLCBzMikge1xuICB2YXIgbGVuMSA9IHMxLmxlbmd0aDtcbiAgdmFyIGxlbjIgPSBzMi5sZW5ndGg7XG4gIGlmIChsZW4xID09PSBsZW4yKSB7XG4gICAgcmV0dXJuIGNhbWxfYnl0ZXNfY29tcGFyZV9hdXgoczEsIHMyLCAwLCBsZW4xLCAwKTtcbiAgfSBlbHNlIGlmIChsZW4xIDwgbGVuMikge1xuICAgIHJldHVybiBjYW1sX2J5dGVzX2NvbXBhcmVfYXV4KHMxLCBzMiwgMCwgbGVuMSwgLTEpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjYW1sX2J5dGVzX2NvbXBhcmVfYXV4KHMxLCBzMiwgMCwgbGVuMiwgMSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9ieXRlc19lcXVhbChzMSwgczIpIHtcbiAgdmFyIGxlbjEgPSBzMS5sZW5ndGg7XG4gIHZhciBsZW4yID0gczIubGVuZ3RoO1xuICBpZiAobGVuMSA9PT0gbGVuMikge1xuICAgIHZhciBzMSQxID0gczE7XG4gICAgdmFyIHMyJDEgPSBzMjtcbiAgICB2YXIgX29mZiA9IDA7XG4gICAgdmFyIGxlbiA9IGxlbjE7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIG9mZiA9IF9vZmY7XG4gICAgICBpZiAob2ZmID09PSBsZW4pIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgYSA9IHMxJDFbb2ZmXTtcbiAgICAgICAgdmFyIGIgPSBzMiQxW29mZl07XG4gICAgICAgIGlmIChhID09PSBiKSB7XG4gICAgICAgICAgX29mZiA9IG9mZiArIDEgfCAwO1xuICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX2Jvb2xfbWluKHgsIHkpIHtcbiAgaWYgKHgpIHtcbiAgICByZXR1cm4geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geDtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX2ludF9taW4oeCwgeSkge1xuICBpZiAoeCA8IHkpIHtcbiAgICByZXR1cm4geDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX2Zsb2F0X21pbih4LCB5KSB7XG4gIGlmICh4IDwgeSkge1xuICAgIHJldHVybiB4O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfc3RyaW5nX21pbih4LCB5KSB7XG4gIGlmICh4IDwgeSkge1xuICAgIHJldHVybiB4O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfbmF0aXZlaW50X21pbih4LCB5KSB7XG4gIGlmICh4IDwgeSkge1xuICAgIHJldHVybiB4O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfaW50MzJfbWluKHgsIHkpIHtcbiAgaWYgKHggPCB5KSB7XG4gICAgcmV0dXJuIHg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9ib29sX21heCh4LCB5KSB7XG4gIGlmICh4KSB7XG4gICAgcmV0dXJuIHg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9pbnRfbWF4KHgsIHkpIHtcbiAgaWYgKHggPiB5KSB7XG4gICAgcmV0dXJuIHg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9mbG9hdF9tYXgoeCwgeSkge1xuICBpZiAoeCA+IHkpIHtcbiAgICByZXR1cm4geDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX3N0cmluZ19tYXgoeCwgeSkge1xuICBpZiAoeCA+IHkpIHtcbiAgICByZXR1cm4geDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX25hdGl2ZWludF9tYXgoeCwgeSkge1xuICBpZiAoeCA+IHkpIHtcbiAgICByZXR1cm4geDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX2ludDMyX21heCh4LCB5KSB7XG4gIGlmICh4ID4geSkge1xuICAgIHJldHVybiB4O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5O1xuICB9XG59XG5cbnZhciBjYW1sX25hdGl2ZWludF9jb21wYXJlID0gY2FtbF9pbnRfY29tcGFyZTtcblxudmFyIGNhbWxfaW50MzJfY29tcGFyZSA9IGNhbWxfaW50X2NvbXBhcmU7XG5cbmV4cG9ydHMuY2FtbF9ieXRlc19jb21wYXJlID0gY2FtbF9ieXRlc19jb21wYXJlO1xuZXhwb3J0cy5jYW1sX2J5dGVzX2VxdWFsID0gY2FtbF9ieXRlc19lcXVhbDtcbmV4cG9ydHMuY2FtbF9pbnRfY29tcGFyZSA9IGNhbWxfaW50X2NvbXBhcmU7XG5leHBvcnRzLmNhbWxfYm9vbF9jb21wYXJlID0gY2FtbF9ib29sX2NvbXBhcmU7XG5leHBvcnRzLmNhbWxfZmxvYXRfY29tcGFyZSA9IGNhbWxfZmxvYXRfY29tcGFyZTtcbmV4cG9ydHMuY2FtbF9uYXRpdmVpbnRfY29tcGFyZSA9IGNhbWxfbmF0aXZlaW50X2NvbXBhcmU7XG5leHBvcnRzLmNhbWxfc3RyaW5nX2NvbXBhcmUgPSBjYW1sX3N0cmluZ19jb21wYXJlO1xuZXhwb3J0cy5jYW1sX2ludDMyX2NvbXBhcmUgPSBjYW1sX2ludDMyX2NvbXBhcmU7XG5leHBvcnRzLmNhbWxfYm9vbF9taW4gPSBjYW1sX2Jvb2xfbWluO1xuZXhwb3J0cy5jYW1sX2ludF9taW4gPSBjYW1sX2ludF9taW47XG5leHBvcnRzLmNhbWxfZmxvYXRfbWluID0gY2FtbF9mbG9hdF9taW47XG5leHBvcnRzLmNhbWxfc3RyaW5nX21pbiA9IGNhbWxfc3RyaW5nX21pbjtcbmV4cG9ydHMuY2FtbF9uYXRpdmVpbnRfbWluID0gY2FtbF9uYXRpdmVpbnRfbWluO1xuZXhwb3J0cy5jYW1sX2ludDMyX21pbiA9IGNhbWxfaW50MzJfbWluO1xuZXhwb3J0cy5jYW1sX2Jvb2xfbWF4ID0gY2FtbF9ib29sX21heDtcbmV4cG9ydHMuY2FtbF9pbnRfbWF4ID0gY2FtbF9pbnRfbWF4O1xuZXhwb3J0cy5jYW1sX2Zsb2F0X21heCA9IGNhbWxfZmxvYXRfbWF4O1xuZXhwb3J0cy5jYW1sX3N0cmluZ19tYXggPSBjYW1sX3N0cmluZ19tYXg7XG5leHBvcnRzLmNhbWxfbmF0aXZlaW50X21heCA9IGNhbWxfbmF0aXZlaW50X21heDtcbmV4cG9ydHMuY2FtbF9pbnQzMl9tYXggPSBjYW1sX2ludDMyX21heDtcbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucyA9IHJlcXVpcmUoXCIuL2NhbWxfYnVpbHRpbl9leGNlcHRpb25zLmpzXCIpO1xuXG5mdW5jdGlvbiBjYW1sX3N0cmluZ19nZXQocywgaSkge1xuICBpZiAoaSA+PSBzLmxlbmd0aCB8fCBpIDwgMCkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiaW5kZXggb3V0IG9mIGJvdW5kc1wiXG4gICAgICAgIF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHMuY2hhckNvZGVBdChpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX3N0cmluZ19nZXQxNihzLCBpKSB7XG4gIHJldHVybiBzLmNoYXJDb2RlQXQoaSkgKyAocy5jaGFyQ29kZUF0KGkgKyAxIHwgMCkgPDwgOCkgfCAwO1xufVxuXG5mdW5jdGlvbiBjYW1sX3N0cmluZ19nZXQzMihzLCBpKSB7XG4gIHJldHVybiAoKHMuY2hhckNvZGVBdChpKSArIChzLmNoYXJDb2RlQXQoaSArIDEgfCAwKSA8PCA4KSB8IDApICsgKHMuY2hhckNvZGVBdChpICsgMiB8IDApIDw8IDE2KSB8IDApICsgKHMuY2hhckNvZGVBdChpICsgMyB8IDApIDw8IDI0KSB8IDA7XG59XG5cbmZ1bmN0aW9uIGdldChzLCBpKSB7XG4gIGlmIChpIDwgMCB8fCBpID49IHMubGVuZ3RoKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJpbmRleCBvdXQgb2YgYm91bmRzXCJcbiAgICAgICAgXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcy5jaGFyQ29kZUF0KGkpO1xuICB9XG59XG5cbmV4cG9ydHMuY2FtbF9zdHJpbmdfZ2V0ID0gY2FtbF9zdHJpbmdfZ2V0O1xuZXhwb3J0cy5jYW1sX3N0cmluZ19nZXQxNiA9IGNhbWxfc3RyaW5nX2dldDE2O1xuZXhwb3J0cy5jYW1sX3N0cmluZ19nZXQzMiA9IGNhbWxfc3RyaW5nX2dldDMyO1xuZXhwb3J0cy5nZXQgPSBnZXQ7XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMgPSByZXF1aXJlKFwiLi9jYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5qc1wiKTtcblxuZnVuY3Rpb24gY2FtbF9zeXNfZ2V0ZW52KHMpIHtcbiAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSBcInVuZGVmaW5lZFwiIHx8IChwcm9jZXNzLmVudikgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLm5vdF9mb3VuZDtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbWF0Y2ggPSAocHJvY2Vzcy5lbnYpW3NdO1xuICAgIGlmIChtYXRjaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLm5vdF9mb3VuZDtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9zeXNfdGltZShwYXJhbSkge1xuICBpZiAodHlwZW9mIHByb2Nlc3MgPT09IFwidW5kZWZpbmVkXCIgfHwgKHByb2Nlc3MudXB0aW1lKSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwcm9jZXNzLnVwdGltZSgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfc3lzX3JhbmRvbV9zZWVkKHBhcmFtKSB7XG4gIHJldHVybiAvKiBhcnJheSAqL1soKERhdGUubm93KCkgfCAwKSBeIDQyOTQ5NjcyOTUpICogTWF0aC5yYW5kb20oKSB8IDBdO1xufVxuXG5mdW5jdGlvbiBjYW1sX3N5c19zeXN0ZW1fY29tbWFuZChfY21kKSB7XG4gIHJldHVybiAxMjc7XG59XG5cbmZ1bmN0aW9uIGNhbWxfc3lzX2dldGN3ZChwYXJhbSkge1xuICBpZiAodHlwZW9mIHByb2Nlc3MgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4gXCIvXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHByb2Nlc3MuY3dkKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9zeXNfZ2V0X2FyZ3YocGFyYW0pIHtcbiAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIC8qIGFycmF5ICovW1wiXCJdXG4gICAgICAgICAgXTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgYXJndiA9IChwcm9jZXNzLmFyZ3YpO1xuICAgIGlmIChhcmd2ID09IG51bGwpIHtcbiAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgICAgLyogYXJyYXkgKi9bXCJcIl1cbiAgICAgICAgICAgIF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgYXJndlswXSxcbiAgICAgICAgICAgICAgYXJndlxuICAgICAgICAgICAgXTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9zeXNfZXhpdChleGl0X2NvZGUpIHtcbiAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHByb2Nlc3MuZXhpdChleGl0X2NvZGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfc3lzX2lzX2RpcmVjdG9yeShfcykge1xuICB0aHJvdyBbXG4gICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmZhaWx1cmUsXG4gICAgICAgIFwiY2FtbF9zeXNfaXNfZGlyZWN0b3J5IG5vdCBpbXBsZW1lbnRlZFwiXG4gICAgICBdO1xufVxuXG5mdW5jdGlvbiBjYW1sX3N5c19maWxlX2V4aXN0cyhfcykge1xuICB0aHJvdyBbXG4gICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmZhaWx1cmUsXG4gICAgICAgIFwiY2FtbF9zeXNfZmlsZV9leGlzdHMgbm90IGltcGxlbWVudGVkXCJcbiAgICAgIF07XG59XG5cbmV4cG9ydHMuY2FtbF9zeXNfZ2V0ZW52ID0gY2FtbF9zeXNfZ2V0ZW52O1xuZXhwb3J0cy5jYW1sX3N5c190aW1lID0gY2FtbF9zeXNfdGltZTtcbmV4cG9ydHMuY2FtbF9zeXNfcmFuZG9tX3NlZWQgPSBjYW1sX3N5c19yYW5kb21fc2VlZDtcbmV4cG9ydHMuY2FtbF9zeXNfc3lzdGVtX2NvbW1hbmQgPSBjYW1sX3N5c19zeXN0ZW1fY29tbWFuZDtcbmV4cG9ydHMuY2FtbF9zeXNfZ2V0Y3dkID0gY2FtbF9zeXNfZ2V0Y3dkO1xuZXhwb3J0cy5jYW1sX3N5c19nZXRfYXJndiA9IGNhbWxfc3lzX2dldF9hcmd2O1xuZXhwb3J0cy5jYW1sX3N5c19leGl0ID0gY2FtbF9zeXNfZXhpdDtcbmV4cG9ydHMuY2FtbF9zeXNfaXNfZGlyZWN0b3J5ID0gY2FtbF9zeXNfaXNfZGlyZWN0b3J5O1xuZXhwb3J0cy5jYW1sX3N5c19maWxlX2V4aXN0cyA9IGNhbWxfc3lzX2ZpbGVfZXhpc3RzO1xuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIid1c2Ugc3RyaWN0JztcblxuXG5mdW5jdGlvbiByZXBlYXQgKGNvdW50LHNlbGYpe1xuICAgIGlmIChzZWxmLnJlcGVhdCl7XG4gICAgICAgIHJldHVybiBzZWxmLnJlcGVhdChjb3VudClcbiAgICB9XG4gICAgaWYgKHNlbGYubGVuZ3RoID09IDAgfHwgY291bnQgPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgLy8gRW5zdXJpbmcgY291bnQgaXMgYSAzMS1iaXQgaW50ZWdlciBhbGxvd3MgdXMgdG8gaGVhdmlseSBvcHRpbWl6ZSB0aGVcbiAgICAvLyBtYWluIHBhcnQuIEJ1dCBhbnl3YXksIG1vc3QgY3VycmVudCAoQXVndXN0IDIwMTQpIGJyb3dzZXJzIGNhbid0IGhhbmRsZVxuICAgIC8vIHN0cmluZ3MgMSA8PCAyOCBjaGFycyBvciBsb25nZXIsIHNvOlxuICAgIGlmIChzZWxmLmxlbmd0aCAqIGNvdW50ID49IDEgPDwgMjgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdyZXBlYXQgY291bnQgbXVzdCBub3Qgb3ZlcmZsb3cgbWF4aW11bSBzdHJpbmcgc2l6ZScpO1xuICAgIH1cbiAgICB2YXIgcnB0ID0gJyc7XG4gICAgZm9yICg7Oykge1xuICAgICAgICAgICAgaWYgKChjb3VudCAmIDEpID09IDEpIHtcbiAgICAgICAgICAgICAgICBycHQgKz0gc2VsZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvdW50ID4+Pj0gMTtcbiAgICAgICAgICAgIGlmIChjb3VudCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmICs9IHNlbGY7XG4gICAgfVxuICAgIHJldHVybiBycHQ7XG5cbn07XG5cbmV4cG9ydHMucmVwZWF0ID0gcmVwZWF0O1xuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENoYXIgPSByZXF1aXJlKFwiLi9jaGFyLmpzXCIpO1xudmFyIEJsb2NrID0gcmVxdWlyZShcIi4vYmxvY2suanNcIik7XG52YXIgQnl0ZXMgPSByZXF1aXJlKFwiLi9ieXRlcy5qc1wiKTtcbnZhciBDdXJyeSA9IHJlcXVpcmUoXCIuL2N1cnJ5LmpzXCIpO1xudmFyICQkQnVmZmVyID0gcmVxdWlyZShcIi4vYnVmZmVyLmpzXCIpO1xudmFyICQkU3RyaW5nID0gcmVxdWlyZShcIi4vc3RyaW5nLmpzXCIpO1xudmFyIENhbWxfaW8gPSByZXF1aXJlKFwiLi9jYW1sX2lvLmpzXCIpO1xudmFyIENhbWxfb2JqID0gcmVxdWlyZShcIi4vY2FtbF9vYmouanNcIik7XG52YXIgQ2FtbF9ieXRlcyA9IHJlcXVpcmUoXCIuL2NhbWxfYnl0ZXMuanNcIik7XG52YXIgQ2FtbF9pbnQzMiA9IHJlcXVpcmUoXCIuL2NhbWxfaW50MzIuanNcIik7XG52YXIgUGVydmFzaXZlcyA9IHJlcXVpcmUoXCIuL3BlcnZhc2l2ZXMuanNcIik7XG52YXIgQ2FtbF9mb3JtYXQgPSByZXF1aXJlKFwiLi9jYW1sX2Zvcm1hdC5qc1wiKTtcbnZhciBDYW1sX3N0cmluZyA9IHJlcXVpcmUoXCIuL2NhbWxfc3RyaW5nLmpzXCIpO1xudmFyIENhbWxfcHJpbWl0aXZlID0gcmVxdWlyZShcIi4vY2FtbF9wcmltaXRpdmUuanNcIik7XG52YXIgQ2FtbF9leGNlcHRpb25zID0gcmVxdWlyZShcIi4vY2FtbF9leGNlcHRpb25zLmpzXCIpO1xudmFyIENhbWxfanNfZXhjZXB0aW9ucyA9IHJlcXVpcmUoXCIuL2NhbWxfanNfZXhjZXB0aW9ucy5qc1wiKTtcbnZhciBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucyA9IHJlcXVpcmUoXCIuL2NhbWxfYnVpbHRpbl9leGNlcHRpb25zLmpzXCIpO1xudmFyIENhbWxpbnRlcm5hbEZvcm1hdEJhc2ljcyA9IHJlcXVpcmUoXCIuL2NhbWxpbnRlcm5hbEZvcm1hdEJhc2ljcy5qc1wiKTtcblxuZnVuY3Rpb24gY3JlYXRlX2NoYXJfc2V0KHBhcmFtKSB7XG4gIHJldHVybiBCeXRlcy5tYWtlKDMyLCAvKiBcIlxcMDAwXCIgKi8wKTtcbn1cblxuZnVuY3Rpb24gYWRkX2luX2NoYXJfc2V0KGNoYXJfc2V0LCBjKSB7XG4gIHZhciBzdHJfaW5kID0gKGMgPj4+IDMpO1xuICB2YXIgbWFzayA9ICgxIDw8IChjICYgNykpO1xuICBjaGFyX3NldFtzdHJfaW5kXSA9IFBlcnZhc2l2ZXMuY2hhcl9vZl9pbnQoQ2FtbF9ieXRlcy5nZXQoY2hhcl9zZXQsIHN0cl9pbmQpIHwgbWFzayk7XG4gIHJldHVybiAvKiAoKSAqLzA7XG59XG5cbnZhciBmcmVlemVfY2hhcl9zZXQgPSBCeXRlcy50b19zdHJpbmc7XG5cbmZ1bmN0aW9uIHJldl9jaGFyX3NldChjaGFyX3NldCkge1xuICB2YXIgY2hhcl9zZXQkcHJpbWUgPSBCeXRlcy5tYWtlKDMyLCAvKiBcIlxcMDAwXCIgKi8wKTtcbiAgZm9yKHZhciBpID0gMDsgaSA8PSAzMTsgKytpKXtcbiAgICBjaGFyX3NldCRwcmltZVtpXSA9IFBlcnZhc2l2ZXMuY2hhcl9vZl9pbnQoQ2FtbF9zdHJpbmcuZ2V0KGNoYXJfc2V0LCBpKSBeIDI1NSk7XG4gIH1cbiAgcmV0dXJuIENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nKGNoYXJfc2V0JHByaW1lKTtcbn1cblxuZnVuY3Rpb24gaXNfaW5fY2hhcl9zZXQoY2hhcl9zZXQsIGMpIHtcbiAgdmFyIHN0cl9pbmQgPSAoYyA+Pj4gMyk7XG4gIHZhciBtYXNrID0gKDEgPDwgKGMgJiA3KSk7XG4gIHJldHVybiAoQ2FtbF9zdHJpbmcuZ2V0KGNoYXJfc2V0LCBzdHJfaW5kKSAmIG1hc2spICE9PSAwO1xufVxuXG5mdW5jdGlvbiBwYWRfb2ZfcGFkX29wdChwYWRfb3B0KSB7XG4gIGlmIChwYWRfb3B0ICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gLyogTGl0X3BhZGRpbmcgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICAgIC8qIFJpZ2h0ICovMSxcbiAgICAgICAgICAgICAgcGFkX29wdFxuICAgICAgICAgICAgXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIE5vX3BhZGRpbmcgKi8wO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByZWNfb2ZfcHJlY19vcHQocHJlY19vcHQpIHtcbiAgaWYgKHByZWNfb3B0ICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gLyogTGl0X3ByZWNpc2lvbiAqL1twcmVjX29wdF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIE5vX3ByZWNpc2lvbiAqLzA7XG4gIH1cbn1cblxuZnVuY3Rpb24gcGFyYW1fZm9ybWF0X29mX2lnbm9yZWRfZm9ybWF0KGlnbiwgZm10KSB7XG4gIGlmICh0eXBlb2YgaWduID09PSBcIm51bWJlclwiKSB7XG4gICAgc3dpdGNoIChpZ24pIHtcbiAgICAgIGNhc2UgMCA6IFxuICAgICAgICAgIHJldHVybiAvKiBQYXJhbV9mb3JtYXRfRUJCICovWy8qIENoYXIgKi9CbG9jay5fXygwLCBbZm10XSldO1xuICAgICAgY2FzZSAxIDogXG4gICAgICAgICAgcmV0dXJuIC8qIFBhcmFtX2Zvcm1hdF9FQkIgKi9bLyogQ2FtbF9jaGFyICovQmxvY2suX18oMSwgW2ZtdF0pXTtcbiAgICAgIGNhc2UgMiA6IFxuICAgICAgICAgIHJldHVybiAvKiBQYXJhbV9mb3JtYXRfRUJCICovWy8qIEJvb2wgKi9CbG9jay5fXyg5LCBbZm10XSldO1xuICAgICAgY2FzZSAzIDogXG4gICAgICAgICAgcmV0dXJuIC8qIFBhcmFtX2Zvcm1hdF9FQkIgKi9bLyogUmVhZGVyICovQmxvY2suX18oMTksIFtmbXRdKV07XG4gICAgICBjYXNlIDQgOiBcbiAgICAgICAgICByZXR1cm4gLyogUGFyYW1fZm9ybWF0X0VCQiAqL1svKiBTY2FuX25leHRfY2hhciAqL0Jsb2NrLl9fKDIyLCBbZm10XSldO1xuICAgICAgXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXRjaCAoaWduLnRhZyB8IDApIHtcbiAgICAgIGNhc2UgMCA6IFxuICAgICAgICAgIHJldHVybiAvKiBQYXJhbV9mb3JtYXRfRUJCICovWy8qIFN0cmluZyAqL0Jsb2NrLl9fKDIsIFtcbiAgICAgICAgICAgICAgICAgICAgICBwYWRfb2ZfcGFkX29wdChpZ25bMF0pLFxuICAgICAgICAgICAgICAgICAgICAgIGZtdFxuICAgICAgICAgICAgICAgICAgICBdKV07XG4gICAgICBjYXNlIDEgOiBcbiAgICAgICAgICByZXR1cm4gLyogUGFyYW1fZm9ybWF0X0VCQiAqL1svKiBDYW1sX3N0cmluZyAqL0Jsb2NrLl9fKDMsIFtcbiAgICAgICAgICAgICAgICAgICAgICBwYWRfb2ZfcGFkX29wdChpZ25bMF0pLFxuICAgICAgICAgICAgICAgICAgICAgIGZtdFxuICAgICAgICAgICAgICAgICAgICBdKV07XG4gICAgICBjYXNlIDIgOiBcbiAgICAgICAgICByZXR1cm4gLyogUGFyYW1fZm9ybWF0X0VCQiAqL1svKiBJbnQgKi9CbG9jay5fXyg0LCBbXG4gICAgICAgICAgICAgICAgICAgICAgaWduWzBdLFxuICAgICAgICAgICAgICAgICAgICAgIHBhZF9vZl9wYWRfb3B0KGlnblsxXSksXG4gICAgICAgICAgICAgICAgICAgICAgLyogTm9fcHJlY2lzaW9uICovMCxcbiAgICAgICAgICAgICAgICAgICAgICBmbXRcbiAgICAgICAgICAgICAgICAgICAgXSldO1xuICAgICAgY2FzZSAzIDogXG4gICAgICAgICAgcmV0dXJuIC8qIFBhcmFtX2Zvcm1hdF9FQkIgKi9bLyogSW50MzIgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgICAgaWduWzBdLFxuICAgICAgICAgICAgICAgICAgICAgIHBhZF9vZl9wYWRfb3B0KGlnblsxXSksXG4gICAgICAgICAgICAgICAgICAgICAgLyogTm9fcHJlY2lzaW9uICovMCxcbiAgICAgICAgICAgICAgICAgICAgICBmbXRcbiAgICAgICAgICAgICAgICAgICAgXSldO1xuICAgICAgY2FzZSA0IDogXG4gICAgICAgICAgcmV0dXJuIC8qIFBhcmFtX2Zvcm1hdF9FQkIgKi9bLyogTmF0aXZlaW50ICovQmxvY2suX18oNiwgW1xuICAgICAgICAgICAgICAgICAgICAgIGlnblswXSxcbiAgICAgICAgICAgICAgICAgICAgICBwYWRfb2ZfcGFkX29wdChpZ25bMV0pLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIE5vX3ByZWNpc2lvbiAqLzAsXG4gICAgICAgICAgICAgICAgICAgICAgZm10XG4gICAgICAgICAgICAgICAgICAgIF0pXTtcbiAgICAgIGNhc2UgNSA6IFxuICAgICAgICAgIHJldHVybiAvKiBQYXJhbV9mb3JtYXRfRUJCICovWy8qIEludDY0ICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgICAgICAgICAgIGlnblswXSxcbiAgICAgICAgICAgICAgICAgICAgICBwYWRfb2ZfcGFkX29wdChpZ25bMV0pLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIE5vX3ByZWNpc2lvbiAqLzAsXG4gICAgICAgICAgICAgICAgICAgICAgZm10XG4gICAgICAgICAgICAgICAgICAgIF0pXTtcbiAgICAgIGNhc2UgNiA6IFxuICAgICAgICAgIHJldHVybiAvKiBQYXJhbV9mb3JtYXRfRUJCICovWy8qIEZsb2F0ICovQmxvY2suX18oOCwgW1xuICAgICAgICAgICAgICAgICAgICAgIC8qIEZsb2F0X2YgKi8wLFxuICAgICAgICAgICAgICAgICAgICAgIHBhZF9vZl9wYWRfb3B0KGlnblswXSksXG4gICAgICAgICAgICAgICAgICAgICAgcHJlY19vZl9wcmVjX29wdChpZ25bMV0pLFxuICAgICAgICAgICAgICAgICAgICAgIGZtdFxuICAgICAgICAgICAgICAgICAgICBdKV07XG4gICAgICBjYXNlIDcgOiBcbiAgICAgICAgICByZXR1cm4gLyogUGFyYW1fZm9ybWF0X0VCQiAqL1svKiBGb3JtYXRfYXJnICovQmxvY2suX18oMTMsIFtcbiAgICAgICAgICAgICAgICAgICAgICBpZ25bMF0sXG4gICAgICAgICAgICAgICAgICAgICAgaWduWzFdLFxuICAgICAgICAgICAgICAgICAgICAgIGZtdFxuICAgICAgICAgICAgICAgICAgICBdKV07XG4gICAgICBjYXNlIDggOiBcbiAgICAgICAgICByZXR1cm4gLyogUGFyYW1fZm9ybWF0X0VCQiAqL1svKiBGb3JtYXRfc3Vic3QgKi9CbG9jay5fXygxNCwgW1xuICAgICAgICAgICAgICAgICAgICAgIGlnblswXSxcbiAgICAgICAgICAgICAgICAgICAgICBpZ25bMV0sXG4gICAgICAgICAgICAgICAgICAgICAgZm10XG4gICAgICAgICAgICAgICAgICAgIF0pXTtcbiAgICAgIGNhc2UgOSA6IFxuICAgICAgICAgIHJldHVybiAvKiBQYXJhbV9mb3JtYXRfRUJCICovWy8qIFNjYW5fY2hhcl9zZXQgKi9CbG9jay5fXygyMCwgW1xuICAgICAgICAgICAgICAgICAgICAgIGlnblswXSxcbiAgICAgICAgICAgICAgICAgICAgICBpZ25bMV0sXG4gICAgICAgICAgICAgICAgICAgICAgZm10XG4gICAgICAgICAgICAgICAgICAgIF0pXTtcbiAgICAgIGNhc2UgMTAgOiBcbiAgICAgICAgICByZXR1cm4gLyogUGFyYW1fZm9ybWF0X0VCQiAqL1svKiBTY2FuX2dldF9jb3VudGVyICovQmxvY2suX18oMjEsIFtcbiAgICAgICAgICAgICAgICAgICAgICBpZ25bMF0sXG4gICAgICAgICAgICAgICAgICAgICAgZm10XG4gICAgICAgICAgICAgICAgICAgIF0pXTtcbiAgICAgIFxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBidWZmZXJfY2hlY2tfc2l6ZShidWYsIG92ZXJoZWFkKSB7XG4gIHZhciBsZW4gPSBidWZbLyogYnl0ZXMgKi8xXS5sZW5ndGg7XG4gIHZhciBtaW5fbGVuID0gYnVmWy8qIGluZCAqLzBdICsgb3ZlcmhlYWQgfCAwO1xuICBpZiAobWluX2xlbiA+IGxlbikge1xuICAgIHZhciBuZXdfbGVuID0gQ2FtbF9wcmltaXRpdmUuY2FtbF9pbnRfbWF4KChsZW4gPDwgMSksIG1pbl9sZW4pO1xuICAgIHZhciBuZXdfc3RyID0gQ2FtbF9ieXRlcy5jYW1sX2NyZWF0ZV9ieXRlcyhuZXdfbGVuKTtcbiAgICBCeXRlcy5ibGl0KGJ1ZlsvKiBieXRlcyAqLzFdLCAwLCBuZXdfc3RyLCAwLCBsZW4pO1xuICAgIGJ1ZlsvKiBieXRlcyAqLzFdID0gbmV3X3N0cjtcbiAgICByZXR1cm4gLyogKCkgKi8wO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJ1ZmZlcl9hZGRfY2hhcihidWYsIGMpIHtcbiAgYnVmZmVyX2NoZWNrX3NpemUoYnVmLCAxKTtcbiAgYnVmWy8qIGJ5dGVzICovMV1bYnVmWy8qIGluZCAqLzBdXSA9IGM7XG4gIGJ1ZlsvKiBpbmQgKi8wXSA9IGJ1ZlsvKiBpbmQgKi8wXSArIDEgfCAwO1xuICByZXR1cm4gLyogKCkgKi8wO1xufVxuXG5mdW5jdGlvbiBidWZmZXJfYWRkX3N0cmluZyhidWYsIHMpIHtcbiAgdmFyIHN0cl9sZW4gPSBzLmxlbmd0aDtcbiAgYnVmZmVyX2NoZWNrX3NpemUoYnVmLCBzdHJfbGVuKTtcbiAgJCRTdHJpbmcuYmxpdChzLCAwLCBidWZbLyogYnl0ZXMgKi8xXSwgYnVmWy8qIGluZCAqLzBdLCBzdHJfbGVuKTtcbiAgYnVmWy8qIGluZCAqLzBdID0gYnVmWy8qIGluZCAqLzBdICsgc3RyX2xlbiB8IDA7XG4gIHJldHVybiAvKiAoKSAqLzA7XG59XG5cbmZ1bmN0aW9uIGJ1ZmZlcl9jb250ZW50cyhidWYpIHtcbiAgcmV0dXJuIEJ5dGVzLnN1Yl9zdHJpbmcoYnVmWy8qIGJ5dGVzICovMV0sIDAsIGJ1ZlsvKiBpbmQgKi8wXSk7XG59XG5cbmZ1bmN0aW9uIGNoYXJfb2ZfaWNvbnYoaWNvbnYpIHtcbiAgc3dpdGNoIChpY29udikge1xuICAgIGNhc2UgMCA6IFxuICAgIGNhc2UgMSA6IFxuICAgIGNhc2UgMiA6IFxuICAgICAgICByZXR1cm4gLyogXCJkXCIgKi8xMDA7XG4gICAgY2FzZSAzIDogXG4gICAgY2FzZSA0IDogXG4gICAgY2FzZSA1IDogXG4gICAgICAgIHJldHVybiAvKiBcImlcIiAqLzEwNTtcbiAgICBjYXNlIDYgOiBcbiAgICBjYXNlIDcgOiBcbiAgICAgICAgcmV0dXJuIC8qIFwieFwiICovMTIwO1xuICAgIGNhc2UgOCA6IFxuICAgIGNhc2UgOSA6IFxuICAgICAgICByZXR1cm4gLyogXCJYXCIgKi84ODtcbiAgICBjYXNlIDEwIDogXG4gICAgY2FzZSAxMSA6IFxuICAgICAgICByZXR1cm4gLyogXCJvXCIgKi8xMTE7XG4gICAgY2FzZSAxMiA6IFxuICAgICAgICByZXR1cm4gLyogXCJ1XCIgKi8xMTc7XG4gICAgXG4gIH1cbn1cblxuZnVuY3Rpb24gY2hhcl9vZl9mY29udihmY29udikge1xuICBzd2l0Y2ggKGZjb252KSB7XG4gICAgY2FzZSAwIDogXG4gICAgY2FzZSAxIDogXG4gICAgY2FzZSAyIDogXG4gICAgICAgIHJldHVybiAvKiBcImZcIiAqLzEwMjtcbiAgICBjYXNlIDMgOiBcbiAgICBjYXNlIDQgOiBcbiAgICBjYXNlIDUgOiBcbiAgICAgICAgcmV0dXJuIC8qIFwiZVwiICovMTAxO1xuICAgIGNhc2UgNiA6IFxuICAgIGNhc2UgNyA6IFxuICAgIGNhc2UgOCA6IFxuICAgICAgICByZXR1cm4gLyogXCJFXCIgKi82OTtcbiAgICBjYXNlIDkgOiBcbiAgICBjYXNlIDEwIDogXG4gICAgY2FzZSAxMSA6IFxuICAgICAgICByZXR1cm4gLyogXCJnXCIgKi8xMDM7XG4gICAgY2FzZSAxMiA6IFxuICAgIGNhc2UgMTMgOiBcbiAgICBjYXNlIDE0IDogXG4gICAgICAgIHJldHVybiAvKiBcIkdcIiAqLzcxO1xuICAgIGNhc2UgMTUgOiBcbiAgICAgICAgcmV0dXJuIC8qIFwiRlwiICovNzA7XG4gICAgXG4gIH1cbn1cblxuZnVuY3Rpb24gY2hhcl9vZl9jb3VudGVyKGNvdW50ZXIpIHtcbiAgc3dpdGNoIChjb3VudGVyKSB7XG4gICAgY2FzZSAwIDogXG4gICAgICAgIHJldHVybiAvKiBcImxcIiAqLzEwODtcbiAgICBjYXNlIDEgOiBcbiAgICAgICAgcmV0dXJuIC8qIFwiblwiICovMTEwO1xuICAgIGNhc2UgMiA6IFxuICAgICAgICByZXR1cm4gLyogXCJOXCIgKi83ODtcbiAgICBcbiAgfVxufVxuXG5mdW5jdGlvbiBicHJpbnRfY2hhcl9zZXQoYnVmLCBjaGFyX3NldCkge1xuICB2YXIgcHJpbnRfY2hhciA9IGZ1bmN0aW9uIChidWYsIGkpIHtcbiAgICB2YXIgYyA9IFBlcnZhc2l2ZXMuY2hhcl9vZl9pbnQoaSk7XG4gICAgaWYgKGMgIT09IDM3KSB7XG4gICAgICBpZiAoYyAhPT0gNjQpIHtcbiAgICAgICAgcmV0dXJuIGJ1ZmZlcl9hZGRfY2hhcihidWYsIGMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnVmZmVyX2FkZF9jaGFyKGJ1ZiwgLyogXCIlXCIgKi8zNyk7XG4gICAgICAgIHJldHVybiBidWZmZXJfYWRkX2NoYXIoYnVmLCAvKiBcIkBcIiAqLzY0KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYnVmZmVyX2FkZF9jaGFyKGJ1ZiwgLyogXCIlXCIgKi8zNyk7XG4gICAgICByZXR1cm4gYnVmZmVyX2FkZF9jaGFyKGJ1ZiwgLyogXCIlXCIgKi8zNyk7XG4gICAgfVxuICB9O1xuICB2YXIgcHJpbnRfb3V0ID0gZnVuY3Rpb24gKHNldCwgX2kpIHtcbiAgICB3aGlsZSh0cnVlKSB7XG4gICAgICB2YXIgaSA9IF9pO1xuICAgICAgaWYgKGkgPCAyNTYpIHtcbiAgICAgICAgaWYgKGlzX2luX2NoYXJfc2V0KHNldCwgUGVydmFzaXZlcy5jaGFyX29mX2ludChpKSkpIHtcbiAgICAgICAgICB2YXIgc2V0JDEgPSBzZXQ7XG4gICAgICAgICAgdmFyIGkkMSA9IGk7XG4gICAgICAgICAgdmFyIG1hdGNoID0gUGVydmFzaXZlcy5jaGFyX29mX2ludChpJDEpO1xuICAgICAgICAgIHZhciBzd2l0Y2hlciA9IG1hdGNoIC0gNDUgfCAwO1xuICAgICAgICAgIGlmIChzd2l0Y2hlciA+IDQ4IHx8IHN3aXRjaGVyIDwgMCkge1xuICAgICAgICAgICAgaWYgKHN3aXRjaGVyID49IDIxMCkge1xuICAgICAgICAgICAgICByZXR1cm4gcHJpbnRfY2hhcihidWYsIDI1NSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gcHJpbnRfc2Vjb25kKHNldCQxLCBpJDEgKyAxIHwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChzd2l0Y2hlciA+IDQ3IHx8IHN3aXRjaGVyIDwgMSkge1xuICAgICAgICAgICAgcmV0dXJuIHByaW50X291dChzZXQkMSwgaSQxICsgMSB8IDApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcHJpbnRfc2Vjb25kKHNldCQxLCBpJDEgKyAxIHwgMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbiAgdmFyIHByaW50X3NlY29uZCA9IGZ1bmN0aW9uIChzZXQsIGkpIHtcbiAgICBpZiAoaXNfaW5fY2hhcl9zZXQoc2V0LCBQZXJ2YXNpdmVzLmNoYXJfb2ZfaW50KGkpKSkge1xuICAgICAgdmFyIG1hdGNoID0gUGVydmFzaXZlcy5jaGFyX29mX2ludChpKTtcbiAgICAgIHZhciBleGl0ID0gMDtcbiAgICAgIHZhciBzd2l0Y2hlciA9IG1hdGNoIC0gNDUgfCAwO1xuICAgICAgaWYgKHN3aXRjaGVyID4gNDggfHwgc3dpdGNoZXIgPCAwKSB7XG4gICAgICAgIGlmIChzd2l0Y2hlciA+PSAyMTApIHtcbiAgICAgICAgICBwcmludF9jaGFyKGJ1ZiwgMjU0KTtcbiAgICAgICAgICByZXR1cm4gcHJpbnRfY2hhcihidWYsIDI1NSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoKHN3aXRjaGVyID4gNDcgfHwgc3dpdGNoZXIgPCAxKSAmJiAhaXNfaW5fY2hhcl9zZXQoc2V0LCBQZXJ2YXNpdmVzLmNoYXJfb2ZfaW50KGkgKyAxIHwgMCkpKSB7XG4gICAgICAgIHByaW50X2NoYXIoYnVmLCBpIC0gMSB8IDApO1xuICAgICAgICByZXR1cm4gcHJpbnRfb3V0KHNldCwgaSArIDEgfCAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGV4aXQgPSAxO1xuICAgICAgfVxuICAgICAgaWYgKGV4aXQgPT09IDEpIHtcbiAgICAgICAgaWYgKGlzX2luX2NoYXJfc2V0KHNldCwgUGVydmFzaXZlcy5jaGFyX29mX2ludChpICsgMSB8IDApKSkge1xuICAgICAgICAgIHZhciBzZXQkMSA9IHNldDtcbiAgICAgICAgICB2YXIgaSQxID0gaSAtIDEgfCAwO1xuICAgICAgICAgIHZhciBfaiA9IGkgKyAyIHwgMDtcbiAgICAgICAgICB3aGlsZSh0cnVlKSB7XG4gICAgICAgICAgICB2YXIgaiA9IF9qO1xuICAgICAgICAgICAgaWYgKGogPT09IDI1NiB8fCAhaXNfaW5fY2hhcl9zZXQoc2V0JDEsIFBlcnZhc2l2ZXMuY2hhcl9vZl9pbnQoaikpKSB7XG4gICAgICAgICAgICAgIHByaW50X2NoYXIoYnVmLCBpJDEpO1xuICAgICAgICAgICAgICBwcmludF9jaGFyKGJ1ZiwgLyogXCItXCIgKi80NSk7XG4gICAgICAgICAgICAgIHByaW50X2NoYXIoYnVmLCBqIC0gMSB8IDApO1xuICAgICAgICAgICAgICBpZiAoaiA8IDI1Nikge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcmludF9vdXQoc2V0JDEsIGogKyAxIHwgMCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIF9qID0gaiArIDEgfCAwO1xuICAgICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmludF9jaGFyKGJ1ZiwgaSAtIDEgfCAwKTtcbiAgICAgICAgICBwcmludF9jaGFyKGJ1ZiwgaSk7XG4gICAgICAgICAgcmV0dXJuIHByaW50X291dChzZXQsIGkgKyAyIHwgMCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFxuICAgIH0gZWxzZSB7XG4gICAgICBwcmludF9jaGFyKGJ1ZiwgaSAtIDEgfCAwKTtcbiAgICAgIHJldHVybiBwcmludF9vdXQoc2V0LCBpICsgMSB8IDApO1xuICAgIH1cbiAgfTtcbiAgdmFyIHByaW50X3N0YXJ0ID0gZnVuY3Rpb24gKHNldCkge1xuICAgIHZhciBpc19hbG9uZSA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICB2YXIgYmVmb3JlID0gQ2hhci5jaHIoYyAtIDEgfCAwKTtcbiAgICAgIHZhciBhZnRlciA9IENoYXIuY2hyKGMgKyAxIHwgMCk7XG4gICAgICBpZiAoaXNfaW5fY2hhcl9zZXQoc2V0LCBjKSkge1xuICAgICAgICByZXR1cm4gIShpc19pbl9jaGFyX3NldChzZXQsIGJlZm9yZSkgJiYgaXNfaW5fY2hhcl9zZXQoc2V0LCBhZnRlcikpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH07XG4gICAgaWYgKGlzX2Fsb25lKC8qIFwiXVwiICovOTMpKSB7XG4gICAgICBidWZmZXJfYWRkX2NoYXIoYnVmLCAvKiBcIl1cIiAqLzkzKTtcbiAgICB9XG4gICAgcHJpbnRfb3V0KHNldCwgMSk7XG4gICAgaWYgKGlzX2Fsb25lKC8qIFwiLVwiICovNDUpKSB7XG4gICAgICByZXR1cm4gYnVmZmVyX2FkZF9jaGFyKGJ1ZiwgLyogXCItXCIgKi80NSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgfTtcbiAgYnVmZmVyX2FkZF9jaGFyKGJ1ZiwgLyogXCJbXCIgKi85MSk7XG4gIHByaW50X3N0YXJ0KGlzX2luX2NoYXJfc2V0KGNoYXJfc2V0LCAvKiBcIlxcMDAwXCIgKi8wKSA/IChidWZmZXJfYWRkX2NoYXIoYnVmLCAvKiBcIl5cIiAqLzk0KSwgcmV2X2NoYXJfc2V0KGNoYXJfc2V0KSkgOiBjaGFyX3NldCk7XG4gIHJldHVybiBidWZmZXJfYWRkX2NoYXIoYnVmLCAvKiBcIl1cIiAqLzkzKTtcbn1cblxuZnVuY3Rpb24gYnByaW50X3BhZHR5KGJ1ZiwgcGFkdHkpIHtcbiAgc3dpdGNoIChwYWR0eSkge1xuICAgIGNhc2UgMCA6IFxuICAgICAgICByZXR1cm4gYnVmZmVyX2FkZF9jaGFyKGJ1ZiwgLyogXCItXCIgKi80NSk7XG4gICAgY2FzZSAxIDogXG4gICAgICAgIHJldHVybiAvKiAoKSAqLzA7XG4gICAgY2FzZSAyIDogXG4gICAgICAgIHJldHVybiBidWZmZXJfYWRkX2NoYXIoYnVmLCAvKiBcIjBcIiAqLzQ4KTtcbiAgICBcbiAgfVxufVxuXG5mdW5jdGlvbiBicHJpbnRfaWdub3JlZF9mbGFnKGJ1ZiwgaWduX2ZsYWcpIHtcbiAgaWYgKGlnbl9mbGFnKSB7XG4gICAgcmV0dXJuIGJ1ZmZlcl9hZGRfY2hhcihidWYsIC8qIFwiX1wiICovOTUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJwcmludF9wYWRfb3B0KGJ1ZiwgcGFkX29wdCkge1xuICBpZiAocGFkX29wdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGJ1ZmZlcl9hZGRfc3RyaW5nKGJ1ZiwgU3RyaW5nKHBhZF9vcHQpKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogKCkgKi8wO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJwcmludF9wYWRkaW5nKGJ1ZiwgcGFkKSB7XG4gIGlmICh0eXBlb2YgcGFkID09PSBcIm51bWJlclwiKSB7XG4gICAgcmV0dXJuIC8qICgpICovMDtcbiAgfSBlbHNlIHtcbiAgICBicHJpbnRfcGFkdHkoYnVmLCBwYWRbMF0pO1xuICAgIGlmIChwYWQudGFnKSB7XG4gICAgICByZXR1cm4gYnVmZmVyX2FkZF9jaGFyKGJ1ZiwgLyogXCIqXCIgKi80Mik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWZmZXJfYWRkX3N0cmluZyhidWYsIFN0cmluZyhwYWRbMV0pKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYnByaW50X3ByZWNpc2lvbihidWYsIHByZWMpIHtcbiAgaWYgKHR5cGVvZiBwcmVjID09PSBcIm51bWJlclwiKSB7XG4gICAgaWYgKHByZWMgIT09IDApIHtcbiAgICAgIHJldHVybiBidWZmZXJfYWRkX3N0cmluZyhidWYsIFwiLipcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiAoKSAqLzA7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJ1ZmZlcl9hZGRfY2hhcihidWYsIC8qIFwiLlwiICovNDYpO1xuICAgIHJldHVybiBidWZmZXJfYWRkX3N0cmluZyhidWYsIFN0cmluZyhwcmVjWzBdKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYnByaW50X2ljb252X2ZsYWcoYnVmLCBpY29udikge1xuICBzd2l0Y2ggKGljb252KSB7XG4gICAgY2FzZSAxIDogXG4gICAgY2FzZSA0IDogXG4gICAgICAgIHJldHVybiBidWZmZXJfYWRkX2NoYXIoYnVmLCAvKiBcIitcIiAqLzQzKTtcbiAgICBjYXNlIDIgOiBcbiAgICBjYXNlIDUgOiBcbiAgICAgICAgcmV0dXJuIGJ1ZmZlcl9hZGRfY2hhcihidWYsIC8qIFwiIFwiICovMzIpO1xuICAgIGNhc2UgNyA6IFxuICAgIGNhc2UgOSA6IFxuICAgIGNhc2UgMTEgOiBcbiAgICAgICAgcmV0dXJuIGJ1ZmZlcl9hZGRfY2hhcihidWYsIC8qIFwiI1wiICovMzUpO1xuICAgIGNhc2UgMCA6IFxuICAgIGNhc2UgMyA6IFxuICAgIGNhc2UgNiA6IFxuICAgIGNhc2UgOCA6IFxuICAgIGNhc2UgMTAgOiBcbiAgICBjYXNlIDEyIDogXG4gICAgICAgIHJldHVybiAvKiAoKSAqLzA7XG4gICAgXG4gIH1cbn1cblxuZnVuY3Rpb24gYnByaW50X2ludF9mbXQoYnVmLCBpZ25fZmxhZywgaWNvbnYsIHBhZCwgcHJlYykge1xuICBidWZmZXJfYWRkX2NoYXIoYnVmLCAvKiBcIiVcIiAqLzM3KTtcbiAgYnByaW50X2lnbm9yZWRfZmxhZyhidWYsIGlnbl9mbGFnKTtcbiAgYnByaW50X2ljb252X2ZsYWcoYnVmLCBpY29udik7XG4gIGJwcmludF9wYWRkaW5nKGJ1ZiwgcGFkKTtcbiAgYnByaW50X3ByZWNpc2lvbihidWYsIHByZWMpO1xuICByZXR1cm4gYnVmZmVyX2FkZF9jaGFyKGJ1ZiwgY2hhcl9vZl9pY29udihpY29udikpO1xufVxuXG5mdW5jdGlvbiBicHJpbnRfYWx0aW50X2ZtdChidWYsIGlnbl9mbGFnLCBpY29udiwgcGFkLCBwcmVjLCBjKSB7XG4gIGJ1ZmZlcl9hZGRfY2hhcihidWYsIC8qIFwiJVwiICovMzcpO1xuICBicHJpbnRfaWdub3JlZF9mbGFnKGJ1ZiwgaWduX2ZsYWcpO1xuICBicHJpbnRfaWNvbnZfZmxhZyhidWYsIGljb252KTtcbiAgYnByaW50X3BhZGRpbmcoYnVmLCBwYWQpO1xuICBicHJpbnRfcHJlY2lzaW9uKGJ1ZiwgcHJlYyk7XG4gIGJ1ZmZlcl9hZGRfY2hhcihidWYsIGMpO1xuICByZXR1cm4gYnVmZmVyX2FkZF9jaGFyKGJ1ZiwgY2hhcl9vZl9pY29udihpY29udikpO1xufVxuXG5mdW5jdGlvbiBicHJpbnRfZmNvbnZfZmxhZyhidWYsIGZjb252KSB7XG4gIHN3aXRjaCAoZmNvbnYpIHtcbiAgICBjYXNlIDEgOiBcbiAgICBjYXNlIDQgOiBcbiAgICBjYXNlIDcgOiBcbiAgICBjYXNlIDEwIDogXG4gICAgY2FzZSAxMyA6IFxuICAgICAgICByZXR1cm4gYnVmZmVyX2FkZF9jaGFyKGJ1ZiwgLyogXCIrXCIgKi80Myk7XG4gICAgY2FzZSAyIDogXG4gICAgY2FzZSA1IDogXG4gICAgY2FzZSA4IDogXG4gICAgY2FzZSAxMSA6IFxuICAgIGNhc2UgMTQgOiBcbiAgICAgICAgcmV0dXJuIGJ1ZmZlcl9hZGRfY2hhcihidWYsIC8qIFwiIFwiICovMzIpO1xuICAgIGNhc2UgMCA6IFxuICAgIGNhc2UgMyA6IFxuICAgIGNhc2UgNiA6IFxuICAgIGNhc2UgOSA6IFxuICAgIGNhc2UgMTIgOiBcbiAgICBjYXNlIDE1IDogXG4gICAgICAgIHJldHVybiAvKiAoKSAqLzA7XG4gICAgXG4gIH1cbn1cblxuZnVuY3Rpb24gYnByaW50X2Zsb2F0X2ZtdChidWYsIGlnbl9mbGFnLCBmY29udiwgcGFkLCBwcmVjKSB7XG4gIGJ1ZmZlcl9hZGRfY2hhcihidWYsIC8qIFwiJVwiICovMzcpO1xuICBicHJpbnRfaWdub3JlZF9mbGFnKGJ1ZiwgaWduX2ZsYWcpO1xuICBicHJpbnRfZmNvbnZfZmxhZyhidWYsIGZjb252KTtcbiAgYnByaW50X3BhZGRpbmcoYnVmLCBwYWQpO1xuICBicHJpbnRfcHJlY2lzaW9uKGJ1ZiwgcHJlYyk7XG4gIHJldHVybiBidWZmZXJfYWRkX2NoYXIoYnVmLCBjaGFyX29mX2Zjb252KGZjb252KSk7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ19vZl9mb3JtYXR0aW5nX2xpdChmb3JtYXR0aW5nX2xpdCkge1xuICBpZiAodHlwZW9mIGZvcm1hdHRpbmdfbGl0ID09PSBcIm51bWJlclwiKSB7XG4gICAgc3dpdGNoIChmb3JtYXR0aW5nX2xpdCkge1xuICAgICAgY2FzZSAwIDogXG4gICAgICAgICAgcmV0dXJuIFwiQF1cIjtcbiAgICAgIGNhc2UgMSA6IFxuICAgICAgICAgIHJldHVybiBcIkB9XCI7XG4gICAgICBjYXNlIDIgOiBcbiAgICAgICAgICByZXR1cm4gXCJAP1wiO1xuICAgICAgY2FzZSAzIDogXG4gICAgICAgICAgcmV0dXJuIFwiQFxcblwiO1xuICAgICAgY2FzZSA0IDogXG4gICAgICAgICAgcmV0dXJuIFwiQC5cIjtcbiAgICAgIGNhc2UgNSA6IFxuICAgICAgICAgIHJldHVybiBcIkBAXCI7XG4gICAgICBjYXNlIDYgOiBcbiAgICAgICAgICByZXR1cm4gXCJAJVwiO1xuICAgICAgXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXRjaCAoZm9ybWF0dGluZ19saXQudGFnIHwgMCkge1xuICAgICAgY2FzZSAwIDogXG4gICAgICBjYXNlIDEgOiBcbiAgICAgICAgICByZXR1cm4gZm9ybWF0dGluZ19saXRbMF07XG4gICAgICBjYXNlIDIgOiBcbiAgICAgICAgICByZXR1cm4gXCJAXCIgKyBDYW1sX2J5dGVzLmJ5dGVzX3RvX3N0cmluZyhCeXRlcy5tYWtlKDEsIGZvcm1hdHRpbmdfbGl0WzBdKSk7XG4gICAgICBcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RyaW5nX29mX2Zvcm1hdHRpbmdfZ2VuKGZvcm1hdHRpbmdfZ2VuKSB7XG4gIHJldHVybiBmb3JtYXR0aW5nX2dlblswXVsxXTtcbn1cblxuZnVuY3Rpb24gYnByaW50X2NoYXJfbGl0ZXJhbChidWYsIGNocikge1xuICBpZiAoY2hyICE9PSAzNykge1xuICAgIHJldHVybiBidWZmZXJfYWRkX2NoYXIoYnVmLCBjaHIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBidWZmZXJfYWRkX3N0cmluZyhidWYsIFwiJSVcIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYnByaW50X3N0cmluZ19saXRlcmFsKGJ1Ziwgc3RyKSB7XG4gIGZvcih2YXIgaSA9IDAgLGlfZmluaXNoID0gc3RyLmxlbmd0aCAtIDEgfCAwOyBpIDw9IGlfZmluaXNoOyArK2kpe1xuICAgIGJwcmludF9jaGFyX2xpdGVyYWwoYnVmLCBDYW1sX3N0cmluZy5nZXQoc3RyLCBpKSk7XG4gIH1cbiAgcmV0dXJuIC8qICgpICovMDtcbn1cblxuZnVuY3Rpb24gYnByaW50X2ZtdHR5KGJ1ZiwgX2ZtdHR5KSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgZm10dHkgPSBfZm10dHk7XG4gICAgaWYgKHR5cGVvZiBmbXR0eSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgcmV0dXJuIC8qICgpICovMDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpdGNoIChmbXR0eS50YWcgfCAwKSB7XG4gICAgICAgIGNhc2UgMCA6IFxuICAgICAgICAgICAgYnVmZmVyX2FkZF9zdHJpbmcoYnVmLCBcIiVjXCIpO1xuICAgICAgICAgICAgX2ZtdHR5ID0gZm10dHlbMF07XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIGNhc2UgMSA6IFxuICAgICAgICAgICAgYnVmZmVyX2FkZF9zdHJpbmcoYnVmLCBcIiVzXCIpO1xuICAgICAgICAgICAgX2ZtdHR5ID0gZm10dHlbMF07XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIGNhc2UgMiA6IFxuICAgICAgICAgICAgYnVmZmVyX2FkZF9zdHJpbmcoYnVmLCBcIiVpXCIpO1xuICAgICAgICAgICAgX2ZtdHR5ID0gZm10dHlbMF07XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIGNhc2UgMyA6IFxuICAgICAgICAgICAgYnVmZmVyX2FkZF9zdHJpbmcoYnVmLCBcIiVsaVwiKTtcbiAgICAgICAgICAgIF9mbXR0eSA9IGZtdHR5WzBdO1xuICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICBjYXNlIDQgOiBcbiAgICAgICAgICAgIGJ1ZmZlcl9hZGRfc3RyaW5nKGJ1ZiwgXCIlbmlcIik7XG4gICAgICAgICAgICBfZm10dHkgPSBmbXR0eVswXTtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgY2FzZSA1IDogXG4gICAgICAgICAgICBidWZmZXJfYWRkX3N0cmluZyhidWYsIFwiJUxpXCIpO1xuICAgICAgICAgICAgX2ZtdHR5ID0gZm10dHlbMF07XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIGNhc2UgNiA6IFxuICAgICAgICAgICAgYnVmZmVyX2FkZF9zdHJpbmcoYnVmLCBcIiVmXCIpO1xuICAgICAgICAgICAgX2ZtdHR5ID0gZm10dHlbMF07XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIGNhc2UgNyA6IFxuICAgICAgICAgICAgYnVmZmVyX2FkZF9zdHJpbmcoYnVmLCBcIiVCXCIpO1xuICAgICAgICAgICAgX2ZtdHR5ID0gZm10dHlbMF07XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIGNhc2UgOCA6IFxuICAgICAgICAgICAgYnVmZmVyX2FkZF9zdHJpbmcoYnVmLCBcIiV7XCIpO1xuICAgICAgICAgICAgYnByaW50X2ZtdHR5KGJ1ZiwgZm10dHlbMF0pO1xuICAgICAgICAgICAgYnVmZmVyX2FkZF9zdHJpbmcoYnVmLCBcIiV9XCIpO1xuICAgICAgICAgICAgX2ZtdHR5ID0gZm10dHlbMV07XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIGNhc2UgOSA6IFxuICAgICAgICAgICAgYnVmZmVyX2FkZF9zdHJpbmcoYnVmLCBcIiUoXCIpO1xuICAgICAgICAgICAgYnByaW50X2ZtdHR5KGJ1ZiwgZm10dHlbMF0pO1xuICAgICAgICAgICAgYnVmZmVyX2FkZF9zdHJpbmcoYnVmLCBcIiUpXCIpO1xuICAgICAgICAgICAgX2ZtdHR5ID0gZm10dHlbMl07XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIGNhc2UgMTAgOiBcbiAgICAgICAgICAgIGJ1ZmZlcl9hZGRfc3RyaW5nKGJ1ZiwgXCIlYVwiKTtcbiAgICAgICAgICAgIF9mbXR0eSA9IGZtdHR5WzBdO1xuICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICBjYXNlIDExIDogXG4gICAgICAgICAgICBidWZmZXJfYWRkX3N0cmluZyhidWYsIFwiJXRcIik7XG4gICAgICAgICAgICBfZm10dHkgPSBmbXR0eVswXTtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgY2FzZSAxMiA6IFxuICAgICAgICAgICAgYnVmZmVyX2FkZF9zdHJpbmcoYnVmLCBcIiU/XCIpO1xuICAgICAgICAgICAgX2ZtdHR5ID0gZm10dHlbMF07XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIGNhc2UgMTMgOiBcbiAgICAgICAgICAgIGJ1ZmZlcl9hZGRfc3RyaW5nKGJ1ZiwgXCIlclwiKTtcbiAgICAgICAgICAgIF9mbXR0eSA9IGZtdHR5WzBdO1xuICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICBjYXNlIDE0IDogXG4gICAgICAgICAgICBidWZmZXJfYWRkX3N0cmluZyhidWYsIFwiJV9yXCIpO1xuICAgICAgICAgICAgX2ZtdHR5ID0gZm10dHlbMF07XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIFxuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaW50X29mX2N1c3RvbV9hcml0eShwYXJhbSkge1xuICBpZiAocGFyYW0pIHtcbiAgICByZXR1cm4gMSArIGludF9vZl9jdXN0b21fYXJpdHkocGFyYW1bMF0pIHwgMDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBicHJpbnRfZm10KGJ1ZiwgZm10KSB7XG4gIHZhciBfZm10ID0gZm10O1xuICB2YXIgX2lnbl9mbGFnID0gZmFsc2U7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgaWduX2ZsYWcgPSBfaWduX2ZsYWc7XG4gICAgdmFyIGZtdCQxID0gX2ZtdDtcbiAgICBpZiAodHlwZW9mIGZtdCQxID09PSBcIm51bWJlclwiKSB7XG4gICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2l0Y2ggKGZtdCQxLnRhZyB8IDApIHtcbiAgICAgICAgY2FzZSAwIDogXG4gICAgICAgICAgICBidWZmZXJfYWRkX2NoYXIoYnVmLCAvKiBcIiVcIiAqLzM3KTtcbiAgICAgICAgICAgIGJwcmludF9pZ25vcmVkX2ZsYWcoYnVmLCBpZ25fZmxhZyk7XG4gICAgICAgICAgICBidWZmZXJfYWRkX2NoYXIoYnVmLCAvKiBcImNcIiAqLzk5KTtcbiAgICAgICAgICAgIF9pZ25fZmxhZyA9IGZhbHNlO1xuICAgICAgICAgICAgX2ZtdCA9IGZtdCQxWzBdO1xuICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICBjYXNlIDEgOiBcbiAgICAgICAgICAgIGJ1ZmZlcl9hZGRfY2hhcihidWYsIC8qIFwiJVwiICovMzcpO1xuICAgICAgICAgICAgYnByaW50X2lnbm9yZWRfZmxhZyhidWYsIGlnbl9mbGFnKTtcbiAgICAgICAgICAgIGJ1ZmZlcl9hZGRfY2hhcihidWYsIC8qIFwiQ1wiICovNjcpO1xuICAgICAgICAgICAgX2lnbl9mbGFnID0gZmFsc2U7XG4gICAgICAgICAgICBfZm10ID0gZm10JDFbMF07XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIGNhc2UgMiA6IFxuICAgICAgICAgICAgYnVmZmVyX2FkZF9jaGFyKGJ1ZiwgLyogXCIlXCIgKi8zNyk7XG4gICAgICAgICAgICBicHJpbnRfaWdub3JlZF9mbGFnKGJ1ZiwgaWduX2ZsYWcpO1xuICAgICAgICAgICAgYnByaW50X3BhZGRpbmcoYnVmLCBmbXQkMVswXSk7XG4gICAgICAgICAgICBidWZmZXJfYWRkX2NoYXIoYnVmLCAvKiBcInNcIiAqLzExNSk7XG4gICAgICAgICAgICBfaWduX2ZsYWcgPSBmYWxzZTtcbiAgICAgICAgICAgIF9mbXQgPSBmbXQkMVsxXTtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgY2FzZSAzIDogXG4gICAgICAgICAgICBidWZmZXJfYWRkX2NoYXIoYnVmLCAvKiBcIiVcIiAqLzM3KTtcbiAgICAgICAgICAgIGJwcmludF9pZ25vcmVkX2ZsYWcoYnVmLCBpZ25fZmxhZyk7XG4gICAgICAgICAgICBicHJpbnRfcGFkZGluZyhidWYsIGZtdCQxWzBdKTtcbiAgICAgICAgICAgIGJ1ZmZlcl9hZGRfY2hhcihidWYsIC8qIFwiU1wiICovODMpO1xuICAgICAgICAgICAgX2lnbl9mbGFnID0gZmFsc2U7XG4gICAgICAgICAgICBfZm10ID0gZm10JDFbMV07XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIGNhc2UgNCA6IFxuICAgICAgICAgICAgYnByaW50X2ludF9mbXQoYnVmLCBpZ25fZmxhZywgZm10JDFbMF0sIGZtdCQxWzFdLCBmbXQkMVsyXSk7XG4gICAgICAgICAgICBfaWduX2ZsYWcgPSBmYWxzZTtcbiAgICAgICAgICAgIF9mbXQgPSBmbXQkMVszXTtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgY2FzZSA1IDogXG4gICAgICAgICAgICBicHJpbnRfYWx0aW50X2ZtdChidWYsIGlnbl9mbGFnLCBmbXQkMVswXSwgZm10JDFbMV0sIGZtdCQxWzJdLCAvKiBcImxcIiAqLzEwOCk7XG4gICAgICAgICAgICBfaWduX2ZsYWcgPSBmYWxzZTtcbiAgICAgICAgICAgIF9mbXQgPSBmbXQkMVszXTtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgY2FzZSA2IDogXG4gICAgICAgICAgICBicHJpbnRfYWx0aW50X2ZtdChidWYsIGlnbl9mbGFnLCBmbXQkMVswXSwgZm10JDFbMV0sIGZtdCQxWzJdLCAvKiBcIm5cIiAqLzExMCk7XG4gICAgICAgICAgICBfaWduX2ZsYWcgPSBmYWxzZTtcbiAgICAgICAgICAgIF9mbXQgPSBmbXQkMVszXTtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgY2FzZSA3IDogXG4gICAgICAgICAgICBicHJpbnRfYWx0aW50X2ZtdChidWYsIGlnbl9mbGFnLCBmbXQkMVswXSwgZm10JDFbMV0sIGZtdCQxWzJdLCAvKiBcIkxcIiAqLzc2KTtcbiAgICAgICAgICAgIF9pZ25fZmxhZyA9IGZhbHNlO1xuICAgICAgICAgICAgX2ZtdCA9IGZtdCQxWzNdO1xuICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICBjYXNlIDggOiBcbiAgICAgICAgICAgIGJwcmludF9mbG9hdF9mbXQoYnVmLCBpZ25fZmxhZywgZm10JDFbMF0sIGZtdCQxWzFdLCBmbXQkMVsyXSk7XG4gICAgICAgICAgICBfaWduX2ZsYWcgPSBmYWxzZTtcbiAgICAgICAgICAgIF9mbXQgPSBmbXQkMVszXTtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgY2FzZSA5IDogXG4gICAgICAgICAgICBidWZmZXJfYWRkX2NoYXIoYnVmLCAvKiBcIiVcIiAqLzM3KTtcbiAgICAgICAgICAgIGJwcmludF9pZ25vcmVkX2ZsYWcoYnVmLCBpZ25fZmxhZyk7XG4gICAgICAgICAgICBidWZmZXJfYWRkX2NoYXIoYnVmLCAvKiBcIkJcIiAqLzY2KTtcbiAgICAgICAgICAgIF9pZ25fZmxhZyA9IGZhbHNlO1xuICAgICAgICAgICAgX2ZtdCA9IGZtdCQxWzBdO1xuICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICBjYXNlIDEwIDogXG4gICAgICAgICAgICBidWZmZXJfYWRkX3N0cmluZyhidWYsIFwiJSFcIik7XG4gICAgICAgICAgICBfZm10ID0gZm10JDFbMF07XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIGNhc2UgMTEgOiBcbiAgICAgICAgICAgIGJwcmludF9zdHJpbmdfbGl0ZXJhbChidWYsIGZtdCQxWzBdKTtcbiAgICAgICAgICAgIF9mbXQgPSBmbXQkMVsxXTtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgY2FzZSAxMiA6IFxuICAgICAgICAgICAgYnByaW50X2NoYXJfbGl0ZXJhbChidWYsIGZtdCQxWzBdKTtcbiAgICAgICAgICAgIF9mbXQgPSBmbXQkMVsxXTtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgY2FzZSAxMyA6IFxuICAgICAgICAgICAgYnVmZmVyX2FkZF9jaGFyKGJ1ZiwgLyogXCIlXCIgKi8zNyk7XG4gICAgICAgICAgICBicHJpbnRfaWdub3JlZF9mbGFnKGJ1ZiwgaWduX2ZsYWcpO1xuICAgICAgICAgICAgYnByaW50X3BhZF9vcHQoYnVmLCBmbXQkMVswXSk7XG4gICAgICAgICAgICBidWZmZXJfYWRkX2NoYXIoYnVmLCAvKiBcIntcIiAqLzEyMyk7XG4gICAgICAgICAgICBicHJpbnRfZm10dHkoYnVmLCBmbXQkMVsxXSk7XG4gICAgICAgICAgICBidWZmZXJfYWRkX2NoYXIoYnVmLCAvKiBcIiVcIiAqLzM3KTtcbiAgICAgICAgICAgIGJ1ZmZlcl9hZGRfY2hhcihidWYsIC8qIFwifVwiICovMTI1KTtcbiAgICAgICAgICAgIF9pZ25fZmxhZyA9IGZhbHNlO1xuICAgICAgICAgICAgX2ZtdCA9IGZtdCQxWzJdO1xuICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICBjYXNlIDE0IDogXG4gICAgICAgICAgICBidWZmZXJfYWRkX2NoYXIoYnVmLCAvKiBcIiVcIiAqLzM3KTtcbiAgICAgICAgICAgIGJwcmludF9pZ25vcmVkX2ZsYWcoYnVmLCBpZ25fZmxhZyk7XG4gICAgICAgICAgICBicHJpbnRfcGFkX29wdChidWYsIGZtdCQxWzBdKTtcbiAgICAgICAgICAgIGJ1ZmZlcl9hZGRfY2hhcihidWYsIC8qIFwiKFwiICovNDApO1xuICAgICAgICAgICAgYnByaW50X2ZtdHR5KGJ1ZiwgZm10JDFbMV0pO1xuICAgICAgICAgICAgYnVmZmVyX2FkZF9jaGFyKGJ1ZiwgLyogXCIlXCIgKi8zNyk7XG4gICAgICAgICAgICBidWZmZXJfYWRkX2NoYXIoYnVmLCAvKiBcIilcIiAqLzQxKTtcbiAgICAgICAgICAgIF9pZ25fZmxhZyA9IGZhbHNlO1xuICAgICAgICAgICAgX2ZtdCA9IGZtdCQxWzJdO1xuICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICBjYXNlIDE1IDogXG4gICAgICAgICAgICBidWZmZXJfYWRkX2NoYXIoYnVmLCAvKiBcIiVcIiAqLzM3KTtcbiAgICAgICAgICAgIGJwcmludF9pZ25vcmVkX2ZsYWcoYnVmLCBpZ25fZmxhZyk7XG4gICAgICAgICAgICBidWZmZXJfYWRkX2NoYXIoYnVmLCAvKiBcImFcIiAqLzk3KTtcbiAgICAgICAgICAgIF9pZ25fZmxhZyA9IGZhbHNlO1xuICAgICAgICAgICAgX2ZtdCA9IGZtdCQxWzBdO1xuICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICBjYXNlIDE2IDogXG4gICAgICAgICAgICBidWZmZXJfYWRkX2NoYXIoYnVmLCAvKiBcIiVcIiAqLzM3KTtcbiAgICAgICAgICAgIGJwcmludF9pZ25vcmVkX2ZsYWcoYnVmLCBpZ25fZmxhZyk7XG4gICAgICAgICAgICBidWZmZXJfYWRkX2NoYXIoYnVmLCAvKiBcInRcIiAqLzExNik7XG4gICAgICAgICAgICBfaWduX2ZsYWcgPSBmYWxzZTtcbiAgICAgICAgICAgIF9mbXQgPSBmbXQkMVswXTtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgY2FzZSAxNyA6IFxuICAgICAgICAgICAgYnByaW50X3N0cmluZ19saXRlcmFsKGJ1Ziwgc3RyaW5nX29mX2Zvcm1hdHRpbmdfbGl0KGZtdCQxWzBdKSk7XG4gICAgICAgICAgICBfZm10ID0gZm10JDFbMV07XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIGNhc2UgMTggOiBcbiAgICAgICAgICAgIGJwcmludF9zdHJpbmdfbGl0ZXJhbChidWYsIFwiQHtcIik7XG4gICAgICAgICAgICBicHJpbnRfc3RyaW5nX2xpdGVyYWwoYnVmLCBzdHJpbmdfb2ZfZm9ybWF0dGluZ19nZW4oZm10JDFbMF0pKTtcbiAgICAgICAgICAgIF9mbXQgPSBmbXQkMVsxXTtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgY2FzZSAxOSA6IFxuICAgICAgICAgICAgYnVmZmVyX2FkZF9jaGFyKGJ1ZiwgLyogXCIlXCIgKi8zNyk7XG4gICAgICAgICAgICBicHJpbnRfaWdub3JlZF9mbGFnKGJ1ZiwgaWduX2ZsYWcpO1xuICAgICAgICAgICAgYnVmZmVyX2FkZF9jaGFyKGJ1ZiwgLyogXCJyXCIgKi8xMTQpO1xuICAgICAgICAgICAgX2lnbl9mbGFnID0gZmFsc2U7XG4gICAgICAgICAgICBfZm10ID0gZm10JDFbMF07XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIGNhc2UgMjAgOiBcbiAgICAgICAgICAgIGJ1ZmZlcl9hZGRfY2hhcihidWYsIC8qIFwiJVwiICovMzcpO1xuICAgICAgICAgICAgYnByaW50X2lnbm9yZWRfZmxhZyhidWYsIGlnbl9mbGFnKTtcbiAgICAgICAgICAgIGJwcmludF9wYWRfb3B0KGJ1ZiwgZm10JDFbMF0pO1xuICAgICAgICAgICAgYnByaW50X2NoYXJfc2V0KGJ1ZiwgZm10JDFbMV0pO1xuICAgICAgICAgICAgX2lnbl9mbGFnID0gZmFsc2U7XG4gICAgICAgICAgICBfZm10ID0gZm10JDFbMl07XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIGNhc2UgMjEgOiBcbiAgICAgICAgICAgIGJ1ZmZlcl9hZGRfY2hhcihidWYsIC8qIFwiJVwiICovMzcpO1xuICAgICAgICAgICAgYnByaW50X2lnbm9yZWRfZmxhZyhidWYsIGlnbl9mbGFnKTtcbiAgICAgICAgICAgIGJ1ZmZlcl9hZGRfY2hhcihidWYsIGNoYXJfb2ZfY291bnRlcihmbXQkMVswXSkpO1xuICAgICAgICAgICAgX2lnbl9mbGFnID0gZmFsc2U7XG4gICAgICAgICAgICBfZm10ID0gZm10JDFbMV07XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIGNhc2UgMjIgOiBcbiAgICAgICAgICAgIGJ1ZmZlcl9hZGRfY2hhcihidWYsIC8qIFwiJVwiICovMzcpO1xuICAgICAgICAgICAgYnByaW50X2lnbm9yZWRfZmxhZyhidWYsIGlnbl9mbGFnKTtcbiAgICAgICAgICAgIGJwcmludF9zdHJpbmdfbGl0ZXJhbChidWYsIFwiMGNcIik7XG4gICAgICAgICAgICBfaWduX2ZsYWcgPSBmYWxzZTtcbiAgICAgICAgICAgIF9mbXQgPSBmbXQkMVswXTtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgY2FzZSAyMyA6IFxuICAgICAgICAgICAgdmFyIG1hdGNoID0gcGFyYW1fZm9ybWF0X29mX2lnbm9yZWRfZm9ybWF0KGZtdCQxWzBdLCBmbXQkMVsxXSk7XG4gICAgICAgICAgICBfaWduX2ZsYWcgPSB0cnVlO1xuICAgICAgICAgICAgX2ZtdCA9IG1hdGNoWzBdO1xuICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICBjYXNlIDI0IDogXG4gICAgICAgICAgICBmb3IodmFyIF9pID0gMSAsX2lfZmluaXNoID0gaW50X29mX2N1c3RvbV9hcml0eShmbXQkMVswXSk7IF9pIDw9IF9pX2ZpbmlzaDsgKytfaSl7XG4gICAgICAgICAgICAgIGJ1ZmZlcl9hZGRfY2hhcihidWYsIC8qIFwiJVwiICovMzcpO1xuICAgICAgICAgICAgICBicHJpbnRfaWdub3JlZF9mbGFnKGJ1ZiwgaWduX2ZsYWcpO1xuICAgICAgICAgICAgICBidWZmZXJfYWRkX2NoYXIoYnVmLCAvKiBcIj9cIiAqLzYzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9pZ25fZmxhZyA9IGZhbHNlO1xuICAgICAgICAgICAgX2ZtdCA9IGZtdCQxWzJdO1xuICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICBcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0cmluZ19vZl9mbXQoZm10KSB7XG4gIHZhciBidWYgPSAvKiByZWNvcmQgKi9bXG4gICAgLyogaW5kICovMCxcbiAgICAvKiBieXRlcyAqL0NhbWxfYnl0ZXMuY2FtbF9jcmVhdGVfYnl0ZXMoMTYpXG4gIF07XG4gIGJwcmludF9mbXQoYnVmLCBmbXQpO1xuICByZXR1cm4gYnVmZmVyX2NvbnRlbnRzKGJ1Zik7XG59XG5cbmZ1bmN0aW9uIHN5bW0ocGFyYW0pIHtcbiAgaWYgKHR5cGVvZiBwYXJhbSA9PT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiAvKiBFbmRfb2ZfZm10dHkgKi8wO1xuICB9IGVsc2Uge1xuICAgIHN3aXRjaCAocGFyYW0udGFnIHwgMCkge1xuICAgICAgY2FzZSAwIDogXG4gICAgICAgICAgcmV0dXJuIC8qIENoYXJfdHkgKi9CbG9jay5fXygwLCBbc3ltbShwYXJhbVswXSldKTtcbiAgICAgIGNhc2UgMSA6IFxuICAgICAgICAgIHJldHVybiAvKiBTdHJpbmdfdHkgKi9CbG9jay5fXygxLCBbc3ltbShwYXJhbVswXSldKTtcbiAgICAgIGNhc2UgMiA6IFxuICAgICAgICAgIHJldHVybiAvKiBJbnRfdHkgKi9CbG9jay5fXygyLCBbc3ltbShwYXJhbVswXSldKTtcbiAgICAgIGNhc2UgMyA6IFxuICAgICAgICAgIHJldHVybiAvKiBJbnQzMl90eSAqL0Jsb2NrLl9fKDMsIFtzeW1tKHBhcmFtWzBdKV0pO1xuICAgICAgY2FzZSA0IDogXG4gICAgICAgICAgcmV0dXJuIC8qIE5hdGl2ZWludF90eSAqL0Jsb2NrLl9fKDQsIFtzeW1tKHBhcmFtWzBdKV0pO1xuICAgICAgY2FzZSA1IDogXG4gICAgICAgICAgcmV0dXJuIC8qIEludDY0X3R5ICovQmxvY2suX18oNSwgW3N5bW0ocGFyYW1bMF0pXSk7XG4gICAgICBjYXNlIDYgOiBcbiAgICAgICAgICByZXR1cm4gLyogRmxvYXRfdHkgKi9CbG9jay5fXyg2LCBbc3ltbShwYXJhbVswXSldKTtcbiAgICAgIGNhc2UgNyA6IFxuICAgICAgICAgIHJldHVybiAvKiBCb29sX3R5ICovQmxvY2suX18oNywgW3N5bW0ocGFyYW1bMF0pXSk7XG4gICAgICBjYXNlIDggOiBcbiAgICAgICAgICByZXR1cm4gLyogRm9ybWF0X2FyZ190eSAqL0Jsb2NrLl9fKDgsIFtcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1bMF0sXG4gICAgICAgICAgICAgICAgICAgIHN5bW0ocGFyYW1bMV0pXG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIGNhc2UgOSA6IFxuICAgICAgICAgIHJldHVybiAvKiBGb3JtYXRfc3Vic3RfdHkgKi9CbG9jay5fXyg5LCBbXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtWzFdLFxuICAgICAgICAgICAgICAgICAgICBwYXJhbVswXSxcbiAgICAgICAgICAgICAgICAgICAgc3ltbShwYXJhbVsyXSlcbiAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgY2FzZSAxMCA6IFxuICAgICAgICAgIHJldHVybiAvKiBBbHBoYV90eSAqL0Jsb2NrLl9fKDEwLCBbc3ltbShwYXJhbVswXSldKTtcbiAgICAgIGNhc2UgMTEgOiBcbiAgICAgICAgICByZXR1cm4gLyogVGhldGFfdHkgKi9CbG9jay5fXygxMSwgW3N5bW0ocGFyYW1bMF0pXSk7XG4gICAgICBjYXNlIDEyIDogXG4gICAgICAgICAgcmV0dXJuIC8qIEFueV90eSAqL0Jsb2NrLl9fKDEyLCBbc3ltbShwYXJhbVswXSldKTtcbiAgICAgIGNhc2UgMTMgOiBcbiAgICAgICAgICByZXR1cm4gLyogUmVhZGVyX3R5ICovQmxvY2suX18oMTMsIFtzeW1tKHBhcmFtWzBdKV0pO1xuICAgICAgY2FzZSAxNCA6IFxuICAgICAgICAgIHJldHVybiAvKiBJZ25vcmVkX3JlYWRlcl90eSAqL0Jsb2NrLl9fKDE0LCBbc3ltbShwYXJhbVswXSldKTtcbiAgICAgIFxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmbXR0eV9yZWxfZGV0KHBhcmFtKSB7XG4gIGlmICh0eXBlb2YgcGFyYW0gPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIFJlZmwgKi8wO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogUmVmbCAqLzA7XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiBSZWZsICovMDtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIFJlZmwgKi8wO1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgIF07XG4gIH0gZWxzZSB7XG4gICAgc3dpdGNoIChwYXJhbS50YWcgfCAwKSB7XG4gICAgICBjYXNlIDAgOiBcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBmbXR0eV9yZWxfZGV0KHBhcmFtWzBdKTtcbiAgICAgICAgICB2YXIgYWYgPSBtYXRjaFsxXTtcbiAgICAgICAgICB2YXIgZmEgPSBtYXRjaFswXTtcbiAgICAgICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEoZmEsIC8qIFJlZmwgKi8wKTtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogUmVmbCAqLzA7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKGFmLCAvKiBSZWZsICovMCk7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIFJlZmwgKi8wO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIG1hdGNoWzJdLFxuICAgICAgICAgICAgICAgICAgbWF0Y2hbM11cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgY2FzZSAxIDogXG4gICAgICAgICAgdmFyIG1hdGNoJDEgPSBmbXR0eV9yZWxfZGV0KHBhcmFtWzBdKTtcbiAgICAgICAgICB2YXIgYWYkMSA9IG1hdGNoJDFbMV07XG4gICAgICAgICAgdmFyIGZhJDEgPSBtYXRjaCQxWzBdO1xuICAgICAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShmYSQxLCAvKiBSZWZsICovMCk7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIFJlZmwgKi8wO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShhZiQxLCAvKiBSZWZsICovMCk7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIFJlZmwgKi8wO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIG1hdGNoJDFbMl0sXG4gICAgICAgICAgICAgICAgICBtYXRjaCQxWzNdXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgIGNhc2UgMiA6IFxuICAgICAgICAgIHZhciBtYXRjaCQyID0gZm10dHlfcmVsX2RldChwYXJhbVswXSk7XG4gICAgICAgICAgdmFyIGFmJDIgPSBtYXRjaCQyWzFdO1xuICAgICAgICAgIHZhciBmYSQyID0gbWF0Y2gkMlswXTtcbiAgICAgICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEoZmEkMiwgLyogUmVmbCAqLzApO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBSZWZsICovMDtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEoYWYkMiwgLyogUmVmbCAqLzApO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBSZWZsICovMDtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICBtYXRjaCQyWzJdLFxuICAgICAgICAgICAgICAgICAgbWF0Y2gkMlszXVxuICAgICAgICAgICAgICAgIF07XG4gICAgICBjYXNlIDMgOiBcbiAgICAgICAgICB2YXIgbWF0Y2gkMyA9IGZtdHR5X3JlbF9kZXQocGFyYW1bMF0pO1xuICAgICAgICAgIHZhciBhZiQzID0gbWF0Y2gkM1sxXTtcbiAgICAgICAgICB2YXIgZmEkMyA9IG1hdGNoJDNbMF07XG4gICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKGZhJDMsIC8qIFJlZmwgKi8wKTtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogUmVmbCAqLzA7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKGFmJDMsIC8qIFJlZmwgKi8wKTtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogUmVmbCAqLzA7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgbWF0Y2gkM1syXSxcbiAgICAgICAgICAgICAgICAgIG1hdGNoJDNbM11cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgY2FzZSA0IDogXG4gICAgICAgICAgdmFyIG1hdGNoJDQgPSBmbXR0eV9yZWxfZGV0KHBhcmFtWzBdKTtcbiAgICAgICAgICB2YXIgYWYkNCA9IG1hdGNoJDRbMV07XG4gICAgICAgICAgdmFyIGZhJDQgPSBtYXRjaCQ0WzBdO1xuICAgICAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShmYSQ0LCAvKiBSZWZsICovMCk7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIFJlZmwgKi8wO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShhZiQ0LCAvKiBSZWZsICovMCk7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIFJlZmwgKi8wO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIG1hdGNoJDRbMl0sXG4gICAgICAgICAgICAgICAgICBtYXRjaCQ0WzNdXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgIGNhc2UgNSA6IFxuICAgICAgICAgIHZhciBtYXRjaCQ1ID0gZm10dHlfcmVsX2RldChwYXJhbVswXSk7XG4gICAgICAgICAgdmFyIGFmJDUgPSBtYXRjaCQ1WzFdO1xuICAgICAgICAgIHZhciBmYSQ1ID0gbWF0Y2gkNVswXTtcbiAgICAgICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEoZmEkNSwgLyogUmVmbCAqLzApO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBSZWZsICovMDtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEoYWYkNSwgLyogUmVmbCAqLzApO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBSZWZsICovMDtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICBtYXRjaCQ1WzJdLFxuICAgICAgICAgICAgICAgICAgbWF0Y2gkNVszXVxuICAgICAgICAgICAgICAgIF07XG4gICAgICBjYXNlIDYgOiBcbiAgICAgICAgICB2YXIgbWF0Y2gkNiA9IGZtdHR5X3JlbF9kZXQocGFyYW1bMF0pO1xuICAgICAgICAgIHZhciBhZiQ2ID0gbWF0Y2gkNlsxXTtcbiAgICAgICAgICB2YXIgZmEkNiA9IG1hdGNoJDZbMF07XG4gICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKGZhJDYsIC8qIFJlZmwgKi8wKTtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogUmVmbCAqLzA7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKGFmJDYsIC8qIFJlZmwgKi8wKTtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogUmVmbCAqLzA7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgbWF0Y2gkNlsyXSxcbiAgICAgICAgICAgICAgICAgIG1hdGNoJDZbM11cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgY2FzZSA3IDogXG4gICAgICAgICAgdmFyIG1hdGNoJDcgPSBmbXR0eV9yZWxfZGV0KHBhcmFtWzBdKTtcbiAgICAgICAgICB2YXIgYWYkNyA9IG1hdGNoJDdbMV07XG4gICAgICAgICAgdmFyIGZhJDcgPSBtYXRjaCQ3WzBdO1xuICAgICAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShmYSQ3LCAvKiBSZWZsICovMCk7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIFJlZmwgKi8wO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShhZiQ3LCAvKiBSZWZsICovMCk7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIFJlZmwgKi8wO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIG1hdGNoJDdbMl0sXG4gICAgICAgICAgICAgICAgICBtYXRjaCQ3WzNdXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgIGNhc2UgOCA6IFxuICAgICAgICAgIHZhciBtYXRjaCQ4ID0gZm10dHlfcmVsX2RldChwYXJhbVsxXSk7XG4gICAgICAgICAgdmFyIGFmJDggPSBtYXRjaCQ4WzFdO1xuICAgICAgICAgIHZhciBmYSQ4ID0gbWF0Y2gkOFswXTtcbiAgICAgICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEoZmEkOCwgLyogUmVmbCAqLzApO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBSZWZsICovMDtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEoYWYkOCwgLyogUmVmbCAqLzApO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBSZWZsICovMDtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICBtYXRjaCQ4WzJdLFxuICAgICAgICAgICAgICAgICAgbWF0Y2gkOFszXVxuICAgICAgICAgICAgICAgIF07XG4gICAgICBjYXNlIDkgOiBcbiAgICAgICAgICB2YXIgbWF0Y2gkOSA9IGZtdHR5X3JlbF9kZXQocGFyYW1bMl0pO1xuICAgICAgICAgIHZhciBkZSA9IG1hdGNoJDlbM107XG4gICAgICAgICAgdmFyIGVkID0gbWF0Y2gkOVsyXTtcbiAgICAgICAgICB2YXIgYWYkOSA9IG1hdGNoJDlbMV07XG4gICAgICAgICAgdmFyIGZhJDkgPSBtYXRjaCQ5WzBdO1xuICAgICAgICAgIHZhciB0eSA9IHRyYW5zKHN5bW0ocGFyYW1bMF0pLCBwYXJhbVsxXSk7XG4gICAgICAgICAgdmFyIG1hdGNoJDEwID0gZm10dHlfcmVsX2RldCh0eSk7XG4gICAgICAgICAgdmFyIGpkID0gbWF0Y2gkMTBbM107XG4gICAgICAgICAgdmFyIGRqID0gbWF0Y2gkMTBbMl07XG4gICAgICAgICAgdmFyIGdhID0gbWF0Y2gkMTBbMV07XG4gICAgICAgICAgdmFyIGFnID0gbWF0Y2gkMTBbMF07XG4gICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKGZhJDksIC8qIFJlZmwgKi8wKTtcbiAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShhZywgLyogUmVmbCAqLzApO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBSZWZsICovMDtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEoZ2EsIC8qIFJlZmwgKi8wKTtcbiAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShhZiQ5LCAvKiBSZWZsICovMCk7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIFJlZmwgKi8wO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShlZCwgLyogUmVmbCAqLzApO1xuICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKGRqLCAvKiBSZWZsICovMCk7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIFJlZmwgKi8wO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShqZCwgLyogUmVmbCAqLzApO1xuICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKGRlLCAvKiBSZWZsICovMCk7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIFJlZmwgKi8wO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIF07XG4gICAgICBjYXNlIDEwIDogXG4gICAgICAgICAgdmFyIG1hdGNoJDExID0gZm10dHlfcmVsX2RldChwYXJhbVswXSk7XG4gICAgICAgICAgdmFyIGFmJDEwID0gbWF0Y2gkMTFbMV07XG4gICAgICAgICAgdmFyIGZhJDEwID0gbWF0Y2gkMTFbMF07XG4gICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKGZhJDEwLCAvKiBSZWZsICovMCk7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIFJlZmwgKi8wO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShhZiQxMCwgLyogUmVmbCAqLzApO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBSZWZsICovMDtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICBtYXRjaCQxMVsyXSxcbiAgICAgICAgICAgICAgICAgIG1hdGNoJDExWzNdXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgIGNhc2UgMTEgOiBcbiAgICAgICAgICB2YXIgbWF0Y2gkMTIgPSBmbXR0eV9yZWxfZGV0KHBhcmFtWzBdKTtcbiAgICAgICAgICB2YXIgYWYkMTEgPSBtYXRjaCQxMlsxXTtcbiAgICAgICAgICB2YXIgZmEkMTEgPSBtYXRjaCQxMlswXTtcbiAgICAgICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEoZmEkMTEsIC8qIFJlZmwgKi8wKTtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogUmVmbCAqLzA7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKGFmJDExLCAvKiBSZWZsICovMCk7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIFJlZmwgKi8wO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIG1hdGNoJDEyWzJdLFxuICAgICAgICAgICAgICAgICAgbWF0Y2gkMTJbM11cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgY2FzZSAxMiA6IFxuICAgICAgICAgIHZhciBtYXRjaCQxMyA9IGZtdHR5X3JlbF9kZXQocGFyYW1bMF0pO1xuICAgICAgICAgIHZhciBhZiQxMiA9IG1hdGNoJDEzWzFdO1xuICAgICAgICAgIHZhciBmYSQxMiA9IG1hdGNoJDEzWzBdO1xuICAgICAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShmYSQxMiwgLyogUmVmbCAqLzApO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBSZWZsICovMDtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEoYWYkMTIsIC8qIFJlZmwgKi8wKTtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogUmVmbCAqLzA7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgbWF0Y2gkMTNbMl0sXG4gICAgICAgICAgICAgICAgICBtYXRjaCQxM1szXVxuICAgICAgICAgICAgICAgIF07XG4gICAgICBjYXNlIDEzIDogXG4gICAgICAgICAgdmFyIG1hdGNoJDE0ID0gZm10dHlfcmVsX2RldChwYXJhbVswXSk7XG4gICAgICAgICAgdmFyIGRlJDEgPSBtYXRjaCQxNFszXTtcbiAgICAgICAgICB2YXIgZWQkMSA9IG1hdGNoJDE0WzJdO1xuICAgICAgICAgIHZhciBhZiQxMyA9IG1hdGNoJDE0WzFdO1xuICAgICAgICAgIHZhciBmYSQxMyA9IG1hdGNoJDE0WzBdO1xuICAgICAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShmYSQxMywgLyogUmVmbCAqLzApO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBSZWZsICovMDtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEoYWYkMTMsIC8qIFJlZmwgKi8wKTtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogUmVmbCAqLzA7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKGVkJDEsIC8qIFJlZmwgKi8wKTtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogUmVmbCAqLzA7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKGRlJDEsIC8qIFJlZmwgKi8wKTtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogUmVmbCAqLzA7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgIGNhc2UgMTQgOiBcbiAgICAgICAgICB2YXIgbWF0Y2gkMTUgPSBmbXR0eV9yZWxfZGV0KHBhcmFtWzBdKTtcbiAgICAgICAgICB2YXIgZGUkMiA9IG1hdGNoJDE1WzNdO1xuICAgICAgICAgIHZhciBlZCQyID0gbWF0Y2gkMTVbMl07XG4gICAgICAgICAgdmFyIGFmJDE0ID0gbWF0Y2gkMTVbMV07XG4gICAgICAgICAgdmFyIGZhJDE0ID0gbWF0Y2gkMTVbMF07XG4gICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKGZhJDE0LCAvKiBSZWZsICovMCk7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIFJlZmwgKi8wO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShhZiQxNCwgLyogUmVmbCAqLzApO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBSZWZsICovMDtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEoZWQkMiwgLyogUmVmbCAqLzApO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBSZWZsICovMDtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEoZGUkMiwgLyogUmVmbCAqLzApO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBSZWZsICovMDtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHRyYW5zKHR5MSwgdHkyKSB7XG4gIHZhciBleGl0ID0gMDtcbiAgaWYgKHR5cGVvZiB0eTEgPT09IFwibnVtYmVyXCIpIHtcbiAgICBpZiAodHlwZW9mIHR5MiA9PT0gXCJudW1iZXJcIikge1xuICAgICAgcmV0dXJuIC8qIEVuZF9vZl9mbXR0eSAqLzA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXRjaCAodHkyLnRhZyB8IDApIHtcbiAgICAgICAgY2FzZSA4IDogXG4gICAgICAgICAgICBleGl0ID0gNjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDkgOiBcbiAgICAgICAgICAgIGV4aXQgPSA3O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTAgOiBcbiAgICAgICAgICAgIGV4aXQgPSAxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTEgOiBcbiAgICAgICAgICAgIGV4aXQgPSAyO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTIgOiBcbiAgICAgICAgICAgIGV4aXQgPSAzO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTMgOiBcbiAgICAgICAgICAgIGV4aXQgPSA0O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTQgOiBcbiAgICAgICAgICAgIGV4aXQgPSA1O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmFzc2VydF9mYWlsdXJlLFxuICAgICAgICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgXCJjYW1saW50ZXJuYWxGb3JtYXQubWxcIixcbiAgICAgICAgICAgICAgICAgIDgxNixcbiAgICAgICAgICAgICAgICAgIDIzXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICBdO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2l0Y2ggKHR5MS50YWcgfCAwKSB7XG4gICAgICBjYXNlIDAgOiBcbiAgICAgICAgICBpZiAodHlwZW9mIHR5MiA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgZXhpdCA9IDg7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN3aXRjaCAodHkyLnRhZyB8IDApIHtcbiAgICAgICAgICAgICAgY2FzZSAwIDogXG4gICAgICAgICAgICAgICAgICByZXR1cm4gLyogQ2hhcl90eSAqL0Jsb2NrLl9fKDAsIFt0cmFucyh0eTFbMF0sIHR5MlswXSldKTtcbiAgICAgICAgICAgICAgY2FzZSA4IDogXG4gICAgICAgICAgICAgICAgICBleGl0ID0gNjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDkgOiBcbiAgICAgICAgICAgICAgICAgIGV4aXQgPSA3O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgMTAgOiBcbiAgICAgICAgICAgICAgICAgIGV4aXQgPSAxO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgMTEgOiBcbiAgICAgICAgICAgICAgICAgIGV4aXQgPSAyO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgMTIgOiBcbiAgICAgICAgICAgICAgICAgIGV4aXQgPSAzO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgMTMgOiBcbiAgICAgICAgICAgICAgICAgIGV4aXQgPSA0O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgMTQgOiBcbiAgICAgICAgICAgICAgICAgIGV4aXQgPSA1O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMSA6IFxuICAgICAgICAgIGlmICh0eXBlb2YgdHkyID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICBleGl0ID0gODtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3dpdGNoICh0eTIudGFnIHwgMCkge1xuICAgICAgICAgICAgICBjYXNlIDEgOiBcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBTdHJpbmdfdHkgKi9CbG9jay5fXygxLCBbdHJhbnModHkxWzBdLCB0eTJbMF0pXSk7XG4gICAgICAgICAgICAgIGNhc2UgOCA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDY7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSA5IDogXG4gICAgICAgICAgICAgICAgICBleGl0ID0gNztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDEwIDogXG4gICAgICAgICAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDExIDogXG4gICAgICAgICAgICAgICAgICBleGl0ID0gMjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDEyIDogXG4gICAgICAgICAgICAgICAgICBleGl0ID0gMztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDEzIDogXG4gICAgICAgICAgICAgICAgICBleGl0ID0gNDtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDE0IDogXG4gICAgICAgICAgICAgICAgICBleGl0ID0gNTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDIgOiBcbiAgICAgICAgICBpZiAodHlwZW9mIHR5MiA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgZXhpdCA9IDg7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN3aXRjaCAodHkyLnRhZyB8IDApIHtcbiAgICAgICAgICAgICAgY2FzZSAyIDogXG4gICAgICAgICAgICAgICAgICByZXR1cm4gLyogSW50X3R5ICovQmxvY2suX18oMiwgW3RyYW5zKHR5MVswXSwgdHkyWzBdKV0pO1xuICAgICAgICAgICAgICBjYXNlIDggOiBcbiAgICAgICAgICAgICAgICAgIGV4aXQgPSA2O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgOSA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDc7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxMCA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxMSA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxMiA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDM7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxMyA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDQ7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxNCA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDU7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzIDogXG4gICAgICAgICAgaWYgKHR5cGVvZiB0eTIgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIGV4aXQgPSA4O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHR5Mi50YWcgfCAwKSB7XG4gICAgICAgICAgICAgIGNhc2UgMyA6IFxuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIEludDMyX3R5ICovQmxvY2suX18oMywgW3RyYW5zKHR5MVswXSwgdHkyWzBdKV0pO1xuICAgICAgICAgICAgICBjYXNlIDggOiBcbiAgICAgICAgICAgICAgICAgIGV4aXQgPSA2O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgOSA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDc7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxMCA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxMSA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxMiA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDM7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxMyA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDQ7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxNCA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDU7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA0IDogXG4gICAgICAgICAgaWYgKHR5cGVvZiB0eTIgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIGV4aXQgPSA4O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHR5Mi50YWcgfCAwKSB7XG4gICAgICAgICAgICAgIGNhc2UgNCA6IFxuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIE5hdGl2ZWludF90eSAqL0Jsb2NrLl9fKDQsIFt0cmFucyh0eTFbMF0sIHR5MlswXSldKTtcbiAgICAgICAgICAgICAgY2FzZSA4IDogXG4gICAgICAgICAgICAgICAgICBleGl0ID0gNjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDkgOiBcbiAgICAgICAgICAgICAgICAgIGV4aXQgPSA3O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgMTAgOiBcbiAgICAgICAgICAgICAgICAgIGV4aXQgPSAxO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgMTEgOiBcbiAgICAgICAgICAgICAgICAgIGV4aXQgPSAyO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgMTIgOiBcbiAgICAgICAgICAgICAgICAgIGV4aXQgPSAzO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgMTMgOiBcbiAgICAgICAgICAgICAgICAgIGV4aXQgPSA0O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgMTQgOiBcbiAgICAgICAgICAgICAgICAgIGV4aXQgPSA1O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNSA6IFxuICAgICAgICAgIGlmICh0eXBlb2YgdHkyID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICBleGl0ID0gODtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3dpdGNoICh0eTIudGFnIHwgMCkge1xuICAgICAgICAgICAgICBjYXNlIDUgOiBcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBJbnQ2NF90eSAqL0Jsb2NrLl9fKDUsIFt0cmFucyh0eTFbMF0sIHR5MlswXSldKTtcbiAgICAgICAgICAgICAgY2FzZSA4IDogXG4gICAgICAgICAgICAgICAgICBleGl0ID0gNjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDkgOiBcbiAgICAgICAgICAgICAgICAgIGV4aXQgPSA3O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgMTAgOiBcbiAgICAgICAgICAgICAgICAgIGV4aXQgPSAxO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgMTEgOiBcbiAgICAgICAgICAgICAgICAgIGV4aXQgPSAyO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgMTIgOiBcbiAgICAgICAgICAgICAgICAgIGV4aXQgPSAzO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgMTMgOiBcbiAgICAgICAgICAgICAgICAgIGV4aXQgPSA0O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgMTQgOiBcbiAgICAgICAgICAgICAgICAgIGV4aXQgPSA1O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNiA6IFxuICAgICAgICAgIGlmICh0eXBlb2YgdHkyID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICBleGl0ID0gODtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3dpdGNoICh0eTIudGFnIHwgMCkge1xuICAgICAgICAgICAgICBjYXNlIDYgOiBcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBGbG9hdF90eSAqL0Jsb2NrLl9fKDYsIFt0cmFucyh0eTFbMF0sIHR5MlswXSldKTtcbiAgICAgICAgICAgICAgY2FzZSA4IDogXG4gICAgICAgICAgICAgICAgICBleGl0ID0gNjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDkgOiBcbiAgICAgICAgICAgICAgICAgIGV4aXQgPSA3O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgMTAgOiBcbiAgICAgICAgICAgICAgICAgIGV4aXQgPSAxO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgMTEgOiBcbiAgICAgICAgICAgICAgICAgIGV4aXQgPSAyO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgMTIgOiBcbiAgICAgICAgICAgICAgICAgIGV4aXQgPSAzO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgMTMgOiBcbiAgICAgICAgICAgICAgICAgIGV4aXQgPSA0O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgMTQgOiBcbiAgICAgICAgICAgICAgICAgIGV4aXQgPSA1O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNyA6IFxuICAgICAgICAgIGlmICh0eXBlb2YgdHkyID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICBleGl0ID0gODtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3dpdGNoICh0eTIudGFnIHwgMCkge1xuICAgICAgICAgICAgICBjYXNlIDcgOiBcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBCb29sX3R5ICovQmxvY2suX18oNywgW3RyYW5zKHR5MVswXSwgdHkyWzBdKV0pO1xuICAgICAgICAgICAgICBjYXNlIDggOiBcbiAgICAgICAgICAgICAgICAgIGV4aXQgPSA2O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgOSA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDc7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxMCA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxMSA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxMiA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDM7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxMyA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDQ7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxNCA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDU7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA4IDogXG4gICAgICAgICAgaWYgKHR5cGVvZiB0eTIgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHRocm93IFtcbiAgICAgICAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmFzc2VydF9mYWlsdXJlLFxuICAgICAgICAgICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAgIFwiY2FtbGludGVybmFsRm9ybWF0Lm1sXCIsXG4gICAgICAgICAgICAgICAgICAgIDgwMixcbiAgICAgICAgICAgICAgICAgICAgMjZcbiAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHR5Mi50YWcgfCAwKSB7XG4gICAgICAgICAgICAgIGNhc2UgOCA6IFxuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIEZvcm1hdF9hcmdfdHkgKi9CbG9jay5fXyg4LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnModHkxWzBdLCB0eTJbMF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zKHR5MVsxXSwgdHkyWzFdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgY2FzZSAxMCA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxMSA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxMiA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDM7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxMyA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDQ7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxNCA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDU7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBbXG4gICAgICAgICAgICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuYXNzZXJ0X2ZhaWx1cmUsXG4gICAgICAgICAgICAgICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNhbWxpbnRlcm5hbEZvcm1hdC5tbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgODAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgMjZcbiAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA5IDogXG4gICAgICAgICAgaWYgKHR5cGVvZiB0eTIgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHRocm93IFtcbiAgICAgICAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmFzc2VydF9mYWlsdXJlLFxuICAgICAgICAgICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAgIFwiY2FtbGludGVybmFsRm9ybWF0Lm1sXCIsXG4gICAgICAgICAgICAgICAgICAgIDgxMixcbiAgICAgICAgICAgICAgICAgICAgMjhcbiAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHR5Mi50YWcgfCAwKSB7XG4gICAgICAgICAgICAgIGNhc2UgOCA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDY7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSA5IDogXG4gICAgICAgICAgICAgICAgICB2YXIgdHkgPSB0cmFucyhzeW1tKHR5MVsxXSksIHR5MlswXSk7XG4gICAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSBmbXR0eV9yZWxfZGV0KHR5KTtcbiAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKG1hdGNoWzFdLCAvKiBSZWZsICovMCk7XG4gICAgICAgICAgICAgICAgICBDdXJyeS5fMShtYXRjaFszXSwgLyogUmVmbCAqLzApO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIEZvcm1hdF9zdWJzdF90eSAqL0Jsb2NrLl9fKDksIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eTFbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHkyWzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zKHR5MVsyXSwgdHkyWzJdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgY2FzZSAxMCA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxMSA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxMiA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDM7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxMyA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDQ7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxNCA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDU7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBbXG4gICAgICAgICAgICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuYXNzZXJ0X2ZhaWx1cmUsXG4gICAgICAgICAgICAgICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNhbWxpbnRlcm5hbEZvcm1hdC5tbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgODEyLFxuICAgICAgICAgICAgICAgICAgICAgICAgMjhcbiAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxMCA6IFxuICAgICAgICAgIGlmICh0eXBlb2YgdHkyID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICB0aHJvdyBbXG4gICAgICAgICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5hc3NlcnRfZmFpbHVyZSxcbiAgICAgICAgICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICBcImNhbWxpbnRlcm5hbEZvcm1hdC5tbFwiLFxuICAgICAgICAgICAgICAgICAgICA3ODAsXG4gICAgICAgICAgICAgICAgICAgIDIxXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHR5Mi50YWcgPT09IDEwKSB7XG4gICAgICAgICAgICByZXR1cm4gLyogQWxwaGFfdHkgKi9CbG9jay5fXygxMCwgW3RyYW5zKHR5MVswXSwgdHkyWzBdKV0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBbXG4gICAgICAgICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5hc3NlcnRfZmFpbHVyZSxcbiAgICAgICAgICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICBcImNhbWxpbnRlcm5hbEZvcm1hdC5tbFwiLFxuICAgICAgICAgICAgICAgICAgICA3ODAsXG4gICAgICAgICAgICAgICAgICAgIDIxXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICB9XG4gICAgICBjYXNlIDExIDogXG4gICAgICAgICAgaWYgKHR5cGVvZiB0eTIgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHRocm93IFtcbiAgICAgICAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmFzc2VydF9mYWlsdXJlLFxuICAgICAgICAgICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAgIFwiY2FtbGludGVybmFsRm9ybWF0Lm1sXCIsXG4gICAgICAgICAgICAgICAgICAgIDc4NCxcbiAgICAgICAgICAgICAgICAgICAgMjFcbiAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHR5Mi50YWcgfCAwKSB7XG4gICAgICAgICAgICAgIGNhc2UgMTAgOiBcbiAgICAgICAgICAgICAgICAgIGV4aXQgPSAxO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgMTEgOiBcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBUaGV0YV90eSAqL0Jsb2NrLl9fKDExLCBbdHJhbnModHkxWzBdLCB0eTJbMF0pXSk7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmFzc2VydF9mYWlsdXJlLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJjYW1saW50ZXJuYWxGb3JtYXQubWxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIDc4NCxcbiAgICAgICAgICAgICAgICAgICAgICAgIDIxXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTIgOiBcbiAgICAgICAgICBpZiAodHlwZW9mIHR5MiA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuYXNzZXJ0X2ZhaWx1cmUsXG4gICAgICAgICAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgICAgXCJjYW1saW50ZXJuYWxGb3JtYXQubWxcIixcbiAgICAgICAgICAgICAgICAgICAgNzg4LFxuICAgICAgICAgICAgICAgICAgICAxOVxuICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN3aXRjaCAodHkyLnRhZyB8IDApIHtcbiAgICAgICAgICAgICAgY2FzZSAxMCA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxMSA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxMiA6IFxuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIEFueV90eSAqL0Jsb2NrLl9fKDEyLCBbdHJhbnModHkxWzBdLCB0eTJbMF0pXSk7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmFzc2VydF9mYWlsdXJlLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJjYW1saW50ZXJuYWxGb3JtYXQubWxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIDc4OCxcbiAgICAgICAgICAgICAgICAgICAgICAgIDE5XG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTMgOiBcbiAgICAgICAgICBpZiAodHlwZW9mIHR5MiA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuYXNzZXJ0X2ZhaWx1cmUsXG4gICAgICAgICAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgICAgXCJjYW1saW50ZXJuYWxGb3JtYXQubWxcIixcbiAgICAgICAgICAgICAgICAgICAgNzkyLFxuICAgICAgICAgICAgICAgICAgICAyMlxuICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN3aXRjaCAodHkyLnRhZyB8IDApIHtcbiAgICAgICAgICAgICAgY2FzZSAxMCA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxMSA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxMiA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDM7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxMyA6IFxuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIFJlYWRlcl90eSAqL0Jsb2NrLl9fKDEzLCBbdHJhbnModHkxWzBdLCB0eTJbMF0pXSk7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmFzc2VydF9mYWlsdXJlLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJjYW1saW50ZXJuYWxGb3JtYXQubWxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIDc5MixcbiAgICAgICAgICAgICAgICAgICAgICAgIDIyXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTQgOiBcbiAgICAgICAgICBpZiAodHlwZW9mIHR5MiA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuYXNzZXJ0X2ZhaWx1cmUsXG4gICAgICAgICAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgICAgXCJjYW1saW50ZXJuYWxGb3JtYXQubWxcIixcbiAgICAgICAgICAgICAgICAgICAgNzk3LFxuICAgICAgICAgICAgICAgICAgICAzMFxuICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN3aXRjaCAodHkyLnRhZyB8IDApIHtcbiAgICAgICAgICAgICAgY2FzZSAxMCA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxMSA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxMiA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDM7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxMyA6IFxuICAgICAgICAgICAgICAgICAgZXhpdCA9IDQ7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxNCA6IFxuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIElnbm9yZWRfcmVhZGVyX3R5ICovQmxvY2suX18oMTQsIFt0cmFucyh0eTFbMF0sIHR5MlswXSldKTtcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBbXG4gICAgICAgICAgICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuYXNzZXJ0X2ZhaWx1cmUsXG4gICAgICAgICAgICAgICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNhbWxpbnRlcm5hbEZvcm1hdC5tbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgNzk3LFxuICAgICAgICAgICAgICAgICAgICAgICAgMzBcbiAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgXG4gICAgfVxuICB9XG4gIHN3aXRjaCAoZXhpdCkge1xuICAgIGNhc2UgMSA6IFxuICAgICAgICB0aHJvdyBbXG4gICAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmFzc2VydF9mYWlsdXJlLFxuICAgICAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICBcImNhbWxpbnRlcm5hbEZvcm1hdC5tbFwiLFxuICAgICAgICAgICAgICAgIDc4MSxcbiAgICAgICAgICAgICAgICAyMVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdO1xuICAgIGNhc2UgMiA6IFxuICAgICAgICB0aHJvdyBbXG4gICAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmFzc2VydF9mYWlsdXJlLFxuICAgICAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICBcImNhbWxpbnRlcm5hbEZvcm1hdC5tbFwiLFxuICAgICAgICAgICAgICAgIDc4NSxcbiAgICAgICAgICAgICAgICAyMVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdO1xuICAgIGNhc2UgMyA6IFxuICAgICAgICB0aHJvdyBbXG4gICAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmFzc2VydF9mYWlsdXJlLFxuICAgICAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICBcImNhbWxpbnRlcm5hbEZvcm1hdC5tbFwiLFxuICAgICAgICAgICAgICAgIDc4OSxcbiAgICAgICAgICAgICAgICAxOVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdO1xuICAgIGNhc2UgNCA6IFxuICAgICAgICB0aHJvdyBbXG4gICAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmFzc2VydF9mYWlsdXJlLFxuICAgICAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICBcImNhbWxpbnRlcm5hbEZvcm1hdC5tbFwiLFxuICAgICAgICAgICAgICAgIDc5MyxcbiAgICAgICAgICAgICAgICAyMlxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdO1xuICAgIGNhc2UgNSA6IFxuICAgICAgICB0aHJvdyBbXG4gICAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmFzc2VydF9mYWlsdXJlLFxuICAgICAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICBcImNhbWxpbnRlcm5hbEZvcm1hdC5tbFwiLFxuICAgICAgICAgICAgICAgIDc5OCxcbiAgICAgICAgICAgICAgICAzMFxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdO1xuICAgIGNhc2UgNiA6IFxuICAgICAgICB0aHJvdyBbXG4gICAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmFzc2VydF9mYWlsdXJlLFxuICAgICAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICBcImNhbWxpbnRlcm5hbEZvcm1hdC5tbFwiLFxuICAgICAgICAgICAgICAgIDgwMyxcbiAgICAgICAgICAgICAgICAyNlxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdO1xuICAgIGNhc2UgNyA6IFxuICAgICAgICB0aHJvdyBbXG4gICAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmFzc2VydF9mYWlsdXJlLFxuICAgICAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICBcImNhbWxpbnRlcm5hbEZvcm1hdC5tbFwiLFxuICAgICAgICAgICAgICAgIDgxMyxcbiAgICAgICAgICAgICAgICAyOFxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdO1xuICAgIGNhc2UgOCA6IFxuICAgICAgICB0aHJvdyBbXG4gICAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmFzc2VydF9mYWlsdXJlLFxuICAgICAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICBcImNhbWxpbnRlcm5hbEZvcm1hdC5tbFwiLFxuICAgICAgICAgICAgICAgIDgxNyxcbiAgICAgICAgICAgICAgICAyM1xuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdO1xuICAgIFxuICB9XG59XG5cbmZ1bmN0aW9uIGZtdHR5X29mX2Zvcm1hdHRpbmdfZ2VuKGZvcm1hdHRpbmdfZ2VuKSB7XG4gIHJldHVybiBmbXR0eV9vZl9mbXQoZm9ybWF0dGluZ19nZW5bMF1bMF0pO1xufVxuXG5mdW5jdGlvbiBmbXR0eV9vZl9mbXQoX2ZtdHR5KSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgZm10dHkgPSBfZm10dHk7XG4gICAgdmFyIGV4aXQgPSAwO1xuICAgIGlmICh0eXBlb2YgZm10dHkgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHJldHVybiAvKiBFbmRfb2ZfZm10dHkgKi8wO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2l0Y2ggKGZtdHR5LnRhZyB8IDApIHtcbiAgICAgICAgY2FzZSAyIDogXG4gICAgICAgIGNhc2UgMyA6IFxuICAgICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA0IDogXG4gICAgICAgICAgICB2YXIgdHlfcmVzdCA9IGZtdHR5X29mX2ZtdChmbXR0eVszXSk7XG4gICAgICAgICAgICB2YXIgcHJlY190eSA9IGZtdHR5X29mX3ByZWNpc2lvbl9mbXR0eShmbXR0eVsyXSwgLyogSW50X3R5ICovQmxvY2suX18oMiwgW3R5X3Jlc3RdKSk7XG4gICAgICAgICAgICByZXR1cm4gZm10dHlfb2ZfcGFkZGluZ19mbXR0eShmbXR0eVsxXSwgcHJlY190eSk7XG4gICAgICAgIGNhc2UgNSA6IFxuICAgICAgICAgICAgdmFyIHR5X3Jlc3QkMSA9IGZtdHR5X29mX2ZtdChmbXR0eVszXSk7XG4gICAgICAgICAgICB2YXIgcHJlY190eSQxID0gZm10dHlfb2ZfcHJlY2lzaW9uX2ZtdHR5KGZtdHR5WzJdLCAvKiBJbnQzMl90eSAqL0Jsb2NrLl9fKDMsIFt0eV9yZXN0JDFdKSk7XG4gICAgICAgICAgICByZXR1cm4gZm10dHlfb2ZfcGFkZGluZ19mbXR0eShmbXR0eVsxXSwgcHJlY190eSQxKTtcbiAgICAgICAgY2FzZSA2IDogXG4gICAgICAgICAgICB2YXIgdHlfcmVzdCQyID0gZm10dHlfb2ZfZm10KGZtdHR5WzNdKTtcbiAgICAgICAgICAgIHZhciBwcmVjX3R5JDIgPSBmbXR0eV9vZl9wcmVjaXNpb25fZm10dHkoZm10dHlbMl0sIC8qIE5hdGl2ZWludF90eSAqL0Jsb2NrLl9fKDQsIFt0eV9yZXN0JDJdKSk7XG4gICAgICAgICAgICByZXR1cm4gZm10dHlfb2ZfcGFkZGluZ19mbXR0eShmbXR0eVsxXSwgcHJlY190eSQyKTtcbiAgICAgICAgY2FzZSA3IDogXG4gICAgICAgICAgICB2YXIgdHlfcmVzdCQzID0gZm10dHlfb2ZfZm10KGZtdHR5WzNdKTtcbiAgICAgICAgICAgIHZhciBwcmVjX3R5JDMgPSBmbXR0eV9vZl9wcmVjaXNpb25fZm10dHkoZm10dHlbMl0sIC8qIEludDY0X3R5ICovQmxvY2suX18oNSwgW3R5X3Jlc3QkM10pKTtcbiAgICAgICAgICAgIHJldHVybiBmbXR0eV9vZl9wYWRkaW5nX2ZtdHR5KGZtdHR5WzFdLCBwcmVjX3R5JDMpO1xuICAgICAgICBjYXNlIDggOiBcbiAgICAgICAgICAgIHZhciB0eV9yZXN0JDQgPSBmbXR0eV9vZl9mbXQoZm10dHlbM10pO1xuICAgICAgICAgICAgdmFyIHByZWNfdHkkNCA9IGZtdHR5X29mX3ByZWNpc2lvbl9mbXR0eShmbXR0eVsyXSwgLyogRmxvYXRfdHkgKi9CbG9jay5fXyg2LCBbdHlfcmVzdCQ0XSkpO1xuICAgICAgICAgICAgcmV0dXJuIGZtdHR5X29mX3BhZGRpbmdfZm10dHkoZm10dHlbMV0sIHByZWNfdHkkNCk7XG4gICAgICAgIGNhc2UgOSA6IFxuICAgICAgICAgICAgcmV0dXJuIC8qIEJvb2xfdHkgKi9CbG9jay5fXyg3LCBbZm10dHlfb2ZfZm10KGZtdHR5WzBdKV0pO1xuICAgICAgICBjYXNlIDEwIDogXG4gICAgICAgICAgICBfZm10dHkgPSBmbXR0eVswXTtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgY2FzZSAxMyA6IFxuICAgICAgICAgICAgcmV0dXJuIC8qIEZvcm1hdF9hcmdfdHkgKi9CbG9jay5fXyg4LCBbXG4gICAgICAgICAgICAgICAgICAgICAgZm10dHlbMV0sXG4gICAgICAgICAgICAgICAgICAgICAgZm10dHlfb2ZfZm10KGZtdHR5WzJdKVxuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgY2FzZSAxNCA6IFxuICAgICAgICAgICAgdmFyIHR5ID0gZm10dHlbMV07XG4gICAgICAgICAgICByZXR1cm4gLyogRm9ybWF0X3N1YnN0X3R5ICovQmxvY2suX18oOSwgW1xuICAgICAgICAgICAgICAgICAgICAgIHR5LFxuICAgICAgICAgICAgICAgICAgICAgIHR5LFxuICAgICAgICAgICAgICAgICAgICAgIGZtdHR5X29mX2ZtdChmbXR0eVsyXSlcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgIGNhc2UgMTUgOiBcbiAgICAgICAgICAgIHJldHVybiAvKiBBbHBoYV90eSAqL0Jsb2NrLl9fKDEwLCBbZm10dHlfb2ZfZm10KGZtdHR5WzBdKV0pO1xuICAgICAgICBjYXNlIDE2IDogXG4gICAgICAgICAgICByZXR1cm4gLyogVGhldGFfdHkgKi9CbG9jay5fXygxMSwgW2ZtdHR5X29mX2ZtdChmbXR0eVswXSldKTtcbiAgICAgICAgY2FzZSAxOCA6IFxuICAgICAgICAgICAgcmV0dXJuIENhbWxpbnRlcm5hbEZvcm1hdEJhc2ljcy5jb25jYXRfZm10dHkoZm10dHlfb2ZfZm9ybWF0dGluZ19nZW4oZm10dHlbMF0pLCBmbXR0eV9vZl9mbXQoZm10dHlbMV0pKTtcbiAgICAgICAgY2FzZSAxOSA6IFxuICAgICAgICAgICAgcmV0dXJuIC8qIFJlYWRlcl90eSAqL0Jsb2NrLl9fKDEzLCBbZm10dHlfb2ZfZm10KGZtdHR5WzBdKV0pO1xuICAgICAgICBjYXNlIDIwIDogXG4gICAgICAgICAgICByZXR1cm4gLyogU3RyaW5nX3R5ICovQmxvY2suX18oMSwgW2ZtdHR5X29mX2ZtdChmbXR0eVsyXSldKTtcbiAgICAgICAgY2FzZSAyMSA6IFxuICAgICAgICAgICAgcmV0dXJuIC8qIEludF90eSAqL0Jsb2NrLl9fKDIsIFtmbXR0eV9vZl9mbXQoZm10dHlbMV0pXSk7XG4gICAgICAgIGNhc2UgMCA6IFxuICAgICAgICBjYXNlIDEgOiBcbiAgICAgICAgY2FzZSAyMiA6IFxuICAgICAgICAgICAgcmV0dXJuIC8qIENoYXJfdHkgKi9CbG9jay5fXygwLCBbZm10dHlfb2ZfZm10KGZtdHR5WzBdKV0pO1xuICAgICAgICBjYXNlIDIzIDogXG4gICAgICAgICAgICB2YXIgaWduID0gZm10dHlbMF07XG4gICAgICAgICAgICB2YXIgZm10ID0gZm10dHlbMV07XG4gICAgICAgICAgICBpZiAodHlwZW9mIGlnbiA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICBpZiAoaWduID09PSAzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIElnbm9yZWRfcmVhZGVyX3R5ICovQmxvY2suX18oMTQsIFtmbXR0eV9vZl9mbXQoZm10KV0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBmbXR0eV9vZl9mbXQoZm10KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChpZ24udGFnID09PSA4KSB7XG4gICAgICAgICAgICAgIHJldHVybiBDYW1saW50ZXJuYWxGb3JtYXRCYXNpY3MuY29uY2F0X2ZtdHR5KGlnblsxXSwgZm10dHlfb2ZfZm10KGZtdCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZtdHR5X29mX2ZtdChmbXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICBjYXNlIDI0IDogXG4gICAgICAgICAgICByZXR1cm4gZm10dHlfb2ZfY3VzdG9tKGZtdHR5WzBdLCBmbXR0eV9vZl9mbXQoZm10dHlbMl0pKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBfZm10dHkgPSBmbXR0eVsxXTtcbiAgICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChleGl0ID09PSAxKSB7XG4gICAgICByZXR1cm4gZm10dHlfb2ZfcGFkZGluZ19mbXR0eShmbXR0eVswXSwgLyogU3RyaW5nX3R5ICovQmxvY2suX18oMSwgW2ZtdHR5X29mX2ZtdChmbXR0eVsxXSldKSk7XG4gICAgfVxuICAgIFxuICB9O1xufVxuXG5mdW5jdGlvbiBmbXR0eV9vZl9jdXN0b20oYXJpdHksIGZtdHR5KSB7XG4gIGlmIChhcml0eSkge1xuICAgIHJldHVybiAvKiBBbnlfdHkgKi9CbG9jay5fXygxMiwgW2ZtdHR5X29mX2N1c3RvbShhcml0eVswXSwgZm10dHkpXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZtdHR5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGZtdHR5X29mX3BhZGRpbmdfZm10dHkocGFkLCBmbXR0eSkge1xuICBpZiAodHlwZW9mIHBhZCA9PT0gXCJudW1iZXJcIiB8fCAhcGFkLnRhZykge1xuICAgIHJldHVybiBmbXR0eTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogSW50X3R5ICovQmxvY2suX18oMiwgW2ZtdHR5XSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZm10dHlfb2ZfcHJlY2lzaW9uX2ZtdHR5KHByZWMsIGZtdHR5KSB7XG4gIGlmICh0eXBlb2YgcHJlYyA9PT0gXCJudW1iZXJcIiAmJiBwcmVjICE9PSAwKSB7XG4gICAgcmV0dXJuIC8qIEludF90eSAqL0Jsb2NrLl9fKDIsIFtmbXR0eV0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmbXR0eTtcbiAgfVxufVxuXG52YXIgVHlwZV9taXNtYXRjaCA9IENhbWxfZXhjZXB0aW9ucy5jcmVhdGUoXCJDYW1saW50ZXJuYWxGb3JtYXQuVHlwZV9taXNtYXRjaFwiKTtcblxuZnVuY3Rpb24gdHlwZV9wYWRkaW5nKHBhZCwgZm10dHkpIHtcbiAgaWYgKHR5cGVvZiBwYWQgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4gLyogUGFkZGluZ19mbXR0eV9FQkIgKi9bXG4gICAgICAgICAgICAvKiBOb19wYWRkaW5nICovMCxcbiAgICAgICAgICAgIGZtdHR5XG4gICAgICAgICAgXTtcbiAgfSBlbHNlIGlmIChwYWQudGFnKSB7XG4gICAgaWYgKHR5cGVvZiBmbXR0eSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgdGhyb3cgVHlwZV9taXNtYXRjaDtcbiAgICB9IGVsc2UgaWYgKGZtdHR5LnRhZyA9PT0gMikge1xuICAgICAgcmV0dXJuIC8qIFBhZGRpbmdfZm10dHlfRUJCICovW1xuICAgICAgICAgICAgICAvKiBBcmdfcGFkZGluZyAqL0Jsb2NrLl9fKDEsIFtwYWRbMF1dKSxcbiAgICAgICAgICAgICAgZm10dHlbMF1cbiAgICAgICAgICAgIF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IFR5cGVfbWlzbWF0Y2g7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBQYWRkaW5nX2ZtdHR5X0VCQiAqL1tcbiAgICAgICAgICAgIC8qIExpdF9wYWRkaW5nICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgICAgIHBhZFswXSxcbiAgICAgICAgICAgICAgICBwYWRbMV1cbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBmbXR0eVxuICAgICAgICAgIF07XG4gIH1cbn1cblxuZnVuY3Rpb24gdHlwZV9wYWRwcmVjKHBhZCwgcHJlYywgZm10dHkpIHtcbiAgdmFyIG1hdGNoID0gdHlwZV9wYWRkaW5nKHBhZCwgZm10dHkpO1xuICBpZiAodHlwZW9mIHByZWMgPT09IFwibnVtYmVyXCIpIHtcbiAgICBpZiAocHJlYyAhPT0gMCkge1xuICAgICAgdmFyIG1hdGNoJDEgPSBtYXRjaFsxXTtcbiAgICAgIGlmICh0eXBlb2YgbWF0Y2gkMSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICB0aHJvdyBUeXBlX21pc21hdGNoO1xuICAgICAgfSBlbHNlIGlmIChtYXRjaCQxLnRhZyA9PT0gMikge1xuICAgICAgICByZXR1cm4gLyogUGFkcHJlY19mbXR0eV9FQkIgKi9bXG4gICAgICAgICAgICAgICAgbWF0Y2hbMF0sXG4gICAgICAgICAgICAgICAgLyogQXJnX3ByZWNpc2lvbiAqLzEsXG4gICAgICAgICAgICAgICAgbWF0Y2gkMVswXVxuICAgICAgICAgICAgICBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgVHlwZV9taXNtYXRjaDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIFBhZHByZWNfZm10dHlfRUJCICovW1xuICAgICAgICAgICAgICBtYXRjaFswXSxcbiAgICAgICAgICAgICAgLyogTm9fcHJlY2lzaW9uICovMCxcbiAgICAgICAgICAgICAgbWF0Y2hbMV1cbiAgICAgICAgICAgIF07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBQYWRwcmVjX2ZtdHR5X0VCQiAqL1tcbiAgICAgICAgICAgIG1hdGNoWzBdLFxuICAgICAgICAgICAgLyogTGl0X3ByZWNpc2lvbiAqL1twcmVjWzBdXSxcbiAgICAgICAgICAgIG1hdGNoWzFdXG4gICAgICAgICAgXTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0eXBlX2lnbm9yZWRfcGFyYW1fb25lKGlnbiwgZm10LCBmbXR0eSkge1xuICB2YXIgbWF0Y2ggPSB0eXBlX2Zvcm1hdF9nZW4oZm10LCBmbXR0eSk7XG4gIHJldHVybiAvKiBGbXRfZm10dHlfRUJCICovW1xuICAgICAgICAgIC8qIElnbm9yZWRfcGFyYW0gKi9CbG9jay5fXygyMywgW1xuICAgICAgICAgICAgICBpZ24sXG4gICAgICAgICAgICAgIG1hdGNoWzBdXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICBtYXRjaFsxXVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiB0eXBlX2Zvcm1hdF9nZW4oZm10LCBmbXR0eSkge1xuICBpZiAodHlwZW9mIGZtdCA9PT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiAvKiBGbXRfZm10dHlfRUJCICovW1xuICAgICAgICAgICAgLyogRW5kX29mX2Zvcm1hdCAqLzAsXG4gICAgICAgICAgICBmbXR0eVxuICAgICAgICAgIF07XG4gIH0gZWxzZSB7XG4gICAgc3dpdGNoIChmbXQudGFnIHwgMCkge1xuICAgICAgY2FzZSAwIDogXG4gICAgICAgICAgaWYgKHR5cGVvZiBmbXR0eSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgdGhyb3cgVHlwZV9taXNtYXRjaDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGZtdHR5LnRhZykge1xuICAgICAgICAgICAgdGhyb3cgVHlwZV9taXNtYXRjaDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIG1hdGNoID0gdHlwZV9mb3JtYXRfZ2VuKGZtdFswXSwgZm10dHlbMF0pO1xuICAgICAgICAgICAgcmV0dXJuIC8qIEZtdF9mbXR0eV9FQkIgKi9bXG4gICAgICAgICAgICAgICAgICAgIC8qIENoYXIgKi9CbG9jay5fXygwLCBbbWF0Y2hbMF1dKSxcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hbMV1cbiAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgfVxuICAgICAgY2FzZSAxIDogXG4gICAgICAgICAgaWYgKHR5cGVvZiBmbXR0eSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgdGhyb3cgVHlwZV9taXNtYXRjaDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGZtdHR5LnRhZykge1xuICAgICAgICAgICAgdGhyb3cgVHlwZV9taXNtYXRjaDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIG1hdGNoJDEgPSB0eXBlX2Zvcm1hdF9nZW4oZm10WzBdLCBmbXR0eVswXSk7XG4gICAgICAgICAgICByZXR1cm4gLyogRm10X2ZtdHR5X0VCQiAqL1tcbiAgICAgICAgICAgICAgICAgICAgLyogQ2FtbF9jaGFyICovQmxvY2suX18oMSwgW21hdGNoJDFbMF1dKSxcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2gkMVsxXVxuICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICB9XG4gICAgICBjYXNlIDIgOiBcbiAgICAgICAgICB2YXIgbWF0Y2gkMiA9IHR5cGVfcGFkZGluZyhmbXRbMF0sIGZtdHR5KTtcbiAgICAgICAgICB2YXIgbWF0Y2gkMyA9IG1hdGNoJDJbMV07XG4gICAgICAgICAgaWYgKHR5cGVvZiBtYXRjaCQzID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICB0aHJvdyBUeXBlX21pc21hdGNoO1xuICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2gkMy50YWcgPT09IDEpIHtcbiAgICAgICAgICAgIHZhciBtYXRjaCQ0ID0gdHlwZV9mb3JtYXRfZ2VuKGZtdFsxXSwgbWF0Y2gkM1swXSk7XG4gICAgICAgICAgICByZXR1cm4gLyogRm10X2ZtdHR5X0VCQiAqL1tcbiAgICAgICAgICAgICAgICAgICAgLyogU3RyaW5nICovQmxvY2suX18oMiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gkMlswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoJDRbMF1cbiAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2gkNFsxXVxuICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgVHlwZV9taXNtYXRjaDtcbiAgICAgICAgICB9XG4gICAgICBjYXNlIDMgOiBcbiAgICAgICAgICB2YXIgbWF0Y2gkNSA9IHR5cGVfcGFkZGluZyhmbXRbMF0sIGZtdHR5KTtcbiAgICAgICAgICB2YXIgbWF0Y2gkNiA9IG1hdGNoJDVbMV07XG4gICAgICAgICAgaWYgKHR5cGVvZiBtYXRjaCQ2ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICB0aHJvdyBUeXBlX21pc21hdGNoO1xuICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2gkNi50YWcgPT09IDEpIHtcbiAgICAgICAgICAgIHZhciBtYXRjaCQ3ID0gdHlwZV9mb3JtYXRfZ2VuKGZtdFsxXSwgbWF0Y2gkNlswXSk7XG4gICAgICAgICAgICByZXR1cm4gLyogRm10X2ZtdHR5X0VCQiAqL1tcbiAgICAgICAgICAgICAgICAgICAgLyogQ2FtbF9zdHJpbmcgKi9CbG9jay5fXygzLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCQ1WzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gkN1swXVxuICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBtYXRjaCQ3WzFdXG4gICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBUeXBlX21pc21hdGNoO1xuICAgICAgICAgIH1cbiAgICAgIGNhc2UgNCA6IFxuICAgICAgICAgIHZhciBtYXRjaCQ4ID0gdHlwZV9wYWRwcmVjKGZtdFsxXSwgZm10WzJdLCBmbXR0eSk7XG4gICAgICAgICAgdmFyIG1hdGNoJDkgPSBtYXRjaCQ4WzJdO1xuICAgICAgICAgIGlmICh0eXBlb2YgbWF0Y2gkOSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgdGhyb3cgVHlwZV9taXNtYXRjaDtcbiAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoJDkudGFnID09PSAyKSB7XG4gICAgICAgICAgICB2YXIgbWF0Y2gkMTAgPSB0eXBlX2Zvcm1hdF9nZW4oZm10WzNdLCBtYXRjaCQ5WzBdKTtcbiAgICAgICAgICAgIHJldHVybiAvKiBGbXRfZm10dHlfRUJCICovW1xuICAgICAgICAgICAgICAgICAgICAvKiBJbnQgKi9CbG9jay5fXyg0LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBmbXRbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCQ4WzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gkOFsxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoJDEwWzBdXG4gICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoJDEwWzFdXG4gICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBUeXBlX21pc21hdGNoO1xuICAgICAgICAgIH1cbiAgICAgIGNhc2UgNSA6IFxuICAgICAgICAgIHZhciBtYXRjaCQxMSA9IHR5cGVfcGFkcHJlYyhmbXRbMV0sIGZtdFsyXSwgZm10dHkpO1xuICAgICAgICAgIHZhciBtYXRjaCQxMiA9IG1hdGNoJDExWzJdO1xuICAgICAgICAgIGlmICh0eXBlb2YgbWF0Y2gkMTIgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHRocm93IFR5cGVfbWlzbWF0Y2g7XG4gICAgICAgICAgfSBlbHNlIGlmIChtYXRjaCQxMi50YWcgPT09IDMpIHtcbiAgICAgICAgICAgIHZhciBtYXRjaCQxMyA9IHR5cGVfZm9ybWF0X2dlbihmbXRbM10sIG1hdGNoJDEyWzBdKTtcbiAgICAgICAgICAgIHJldHVybiAvKiBGbXRfZm10dHlfRUJCICovW1xuICAgICAgICAgICAgICAgICAgICAvKiBJbnQzMiAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZtdFswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoJDExWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gkMTFbMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCQxM1swXVxuICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBtYXRjaCQxM1sxXVxuICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgVHlwZV9taXNtYXRjaDtcbiAgICAgICAgICB9XG4gICAgICBjYXNlIDYgOiBcbiAgICAgICAgICB2YXIgbWF0Y2gkMTQgPSB0eXBlX3BhZHByZWMoZm10WzFdLCBmbXRbMl0sIGZtdHR5KTtcbiAgICAgICAgICB2YXIgbWF0Y2gkMTUgPSBtYXRjaCQxNFsyXTtcbiAgICAgICAgICBpZiAodHlwZW9mIG1hdGNoJDE1ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICB0aHJvdyBUeXBlX21pc21hdGNoO1xuICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2gkMTUudGFnID09PSA0KSB7XG4gICAgICAgICAgICB2YXIgbWF0Y2gkMTYgPSB0eXBlX2Zvcm1hdF9nZW4oZm10WzNdLCBtYXRjaCQxNVswXSk7XG4gICAgICAgICAgICByZXR1cm4gLyogRm10X2ZtdHR5X0VCQiAqL1tcbiAgICAgICAgICAgICAgICAgICAgLyogTmF0aXZlaW50ICovQmxvY2suX18oNiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgZm10WzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gkMTRbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCQxNFsxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoJDE2WzBdXG4gICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoJDE2WzFdXG4gICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBUeXBlX21pc21hdGNoO1xuICAgICAgICAgIH1cbiAgICAgIGNhc2UgNyA6IFxuICAgICAgICAgIHZhciBtYXRjaCQxNyA9IHR5cGVfcGFkcHJlYyhmbXRbMV0sIGZtdFsyXSwgZm10dHkpO1xuICAgICAgICAgIHZhciBtYXRjaCQxOCA9IG1hdGNoJDE3WzJdO1xuICAgICAgICAgIGlmICh0eXBlb2YgbWF0Y2gkMTggPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHRocm93IFR5cGVfbWlzbWF0Y2g7XG4gICAgICAgICAgfSBlbHNlIGlmIChtYXRjaCQxOC50YWcgPT09IDUpIHtcbiAgICAgICAgICAgIHZhciBtYXRjaCQxOSA9IHR5cGVfZm9ybWF0X2dlbihmbXRbM10sIG1hdGNoJDE4WzBdKTtcbiAgICAgICAgICAgIHJldHVybiAvKiBGbXRfZm10dHlfRUJCICovW1xuICAgICAgICAgICAgICAgICAgICAvKiBJbnQ2NCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZtdFswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoJDE3WzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gkMTdbMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCQxOVswXVxuICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBtYXRjaCQxOVsxXVxuICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgVHlwZV9taXNtYXRjaDtcbiAgICAgICAgICB9XG4gICAgICBjYXNlIDggOiBcbiAgICAgICAgICB2YXIgbWF0Y2gkMjAgPSB0eXBlX3BhZHByZWMoZm10WzFdLCBmbXRbMl0sIGZtdHR5KTtcbiAgICAgICAgICB2YXIgbWF0Y2gkMjEgPSBtYXRjaCQyMFsyXTtcbiAgICAgICAgICBpZiAodHlwZW9mIG1hdGNoJDIxID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICB0aHJvdyBUeXBlX21pc21hdGNoO1xuICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2gkMjEudGFnID09PSA2KSB7XG4gICAgICAgICAgICB2YXIgbWF0Y2gkMjIgPSB0eXBlX2Zvcm1hdF9nZW4oZm10WzNdLCBtYXRjaCQyMVswXSk7XG4gICAgICAgICAgICByZXR1cm4gLyogRm10X2ZtdHR5X0VCQiAqL1tcbiAgICAgICAgICAgICAgICAgICAgLyogRmxvYXQgKi9CbG9jay5fXyg4LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBmbXRbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCQyMFswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoJDIwWzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gkMjJbMF1cbiAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2gkMjJbMV1cbiAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IFR5cGVfbWlzbWF0Y2g7XG4gICAgICAgICAgfVxuICAgICAgY2FzZSA5IDogXG4gICAgICAgICAgaWYgKHR5cGVvZiBmbXR0eSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgdGhyb3cgVHlwZV9taXNtYXRjaDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGZtdHR5LnRhZyA9PT0gNykge1xuICAgICAgICAgICAgdmFyIG1hdGNoJDIzID0gdHlwZV9mb3JtYXRfZ2VuKGZtdFswXSwgZm10dHlbMF0pO1xuICAgICAgICAgICAgcmV0dXJuIC8qIEZtdF9mbXR0eV9FQkIgKi9bXG4gICAgICAgICAgICAgICAgICAgIC8qIEJvb2wgKi9CbG9jay5fXyg5LCBbbWF0Y2gkMjNbMF1dKSxcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2gkMjNbMV1cbiAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IFR5cGVfbWlzbWF0Y2g7XG4gICAgICAgICAgfVxuICAgICAgY2FzZSAxMCA6IFxuICAgICAgICAgIHZhciBtYXRjaCQyNCA9IHR5cGVfZm9ybWF0X2dlbihmbXRbMF0sIGZtdHR5KTtcbiAgICAgICAgICByZXR1cm4gLyogRm10X2ZtdHR5X0VCQiAqL1tcbiAgICAgICAgICAgICAgICAgIC8qIEZsdXNoICovQmxvY2suX18oMTAsIFttYXRjaCQyNFswXV0pLFxuICAgICAgICAgICAgICAgICAgbWF0Y2gkMjRbMV1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgY2FzZSAxMSA6IFxuICAgICAgICAgIHZhciBtYXRjaCQyNSA9IHR5cGVfZm9ybWF0X2dlbihmbXRbMV0sIGZtdHR5KTtcbiAgICAgICAgICByZXR1cm4gLyogRm10X2ZtdHR5X0VCQiAqL1tcbiAgICAgICAgICAgICAgICAgIC8qIFN0cmluZ19saXRlcmFsICovQmxvY2suX18oMTEsIFtcbiAgICAgICAgICAgICAgICAgICAgICBmbXRbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgbWF0Y2gkMjVbMF1cbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICBtYXRjaCQyNVsxXVxuICAgICAgICAgICAgICAgIF07XG4gICAgICBjYXNlIDEyIDogXG4gICAgICAgICAgdmFyIG1hdGNoJDI2ID0gdHlwZV9mb3JtYXRfZ2VuKGZtdFsxXSwgZm10dHkpO1xuICAgICAgICAgIHJldHVybiAvKiBGbXRfZm10dHlfRUJCICovW1xuICAgICAgICAgICAgICAgICAgLyogQ2hhcl9saXRlcmFsICovQmxvY2suX18oMTIsIFtcbiAgICAgICAgICAgICAgICAgICAgICBmbXRbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgbWF0Y2gkMjZbMF1cbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICBtYXRjaCQyNlsxXVxuICAgICAgICAgICAgICAgIF07XG4gICAgICBjYXNlIDEzIDogXG4gICAgICAgICAgaWYgKHR5cGVvZiBmbXR0eSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgdGhyb3cgVHlwZV9taXNtYXRjaDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGZtdHR5LnRhZyA9PT0gOCkge1xuICAgICAgICAgICAgdmFyIHN1Yl9mbXR0eSRwcmltZSA9IGZtdHR5WzBdO1xuICAgICAgICAgICAgaWYgKENhbWxfb2JqLmNhbWxfbm90ZXF1YWwoLyogRm10dHlfRUJCICovW2ZtdFsxXV0sIC8qIEZtdHR5X0VCQiAqL1tzdWJfZm10dHkkcHJpbWVdKSkge1xuICAgICAgICAgICAgICB0aHJvdyBUeXBlX21pc21hdGNoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG1hdGNoJDI3ID0gdHlwZV9mb3JtYXRfZ2VuKGZtdFsyXSwgZm10dHlbMV0pO1xuICAgICAgICAgICAgcmV0dXJuIC8qIEZtdF9mbXR0eV9FQkIgKi9bXG4gICAgICAgICAgICAgICAgICAgIC8qIEZvcm1hdF9hcmcgKi9CbG9jay5fXygxMywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgZm10WzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3ViX2ZtdHR5JHByaW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gkMjdbMF1cbiAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2gkMjdbMV1cbiAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IFR5cGVfbWlzbWF0Y2g7XG4gICAgICAgICAgfVxuICAgICAgY2FzZSAxNCA6IFxuICAgICAgICAgIGlmICh0eXBlb2YgZm10dHkgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHRocm93IFR5cGVfbWlzbWF0Y2g7XG4gICAgICAgICAgfSBlbHNlIGlmIChmbXR0eS50YWcgPT09IDkpIHtcbiAgICAgICAgICAgIHZhciBzdWJfZm10dHkxID0gZm10dHlbMF07XG4gICAgICAgICAgICBpZiAoQ2FtbF9vYmouY2FtbF9ub3RlcXVhbCgvKiBGbXR0eV9FQkIgKi9bQ2FtbGludGVybmFsRm9ybWF0QmFzaWNzLmVyYXNlX3JlbChmbXRbMV0pXSwgLyogRm10dHlfRUJCICovW0NhbWxpbnRlcm5hbEZvcm1hdEJhc2ljcy5lcmFzZV9yZWwoc3ViX2ZtdHR5MSldKSkge1xuICAgICAgICAgICAgICB0aHJvdyBUeXBlX21pc21hdGNoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG1hdGNoJDI4ID0gdHlwZV9mb3JtYXRfZ2VuKGZtdFsyXSwgQ2FtbGludGVybmFsRm9ybWF0QmFzaWNzLmVyYXNlX3JlbChmbXR0eVsyXSkpO1xuICAgICAgICAgICAgcmV0dXJuIC8qIEZtdF9mbXR0eV9FQkIgKi9bXG4gICAgICAgICAgICAgICAgICAgIC8qIEZvcm1hdF9zdWJzdCAqL0Jsb2NrLl9fKDE0LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBmbXRbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJfZm10dHkxLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gkMjhbMF1cbiAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2gkMjhbMV1cbiAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IFR5cGVfbWlzbWF0Y2g7XG4gICAgICAgICAgfVxuICAgICAgY2FzZSAxNSA6IFxuICAgICAgICAgIGlmICh0eXBlb2YgZm10dHkgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHRocm93IFR5cGVfbWlzbWF0Y2g7XG4gICAgICAgICAgfSBlbHNlIGlmIChmbXR0eS50YWcgPT09IDEwKSB7XG4gICAgICAgICAgICB2YXIgbWF0Y2gkMjkgPSB0eXBlX2Zvcm1hdF9nZW4oZm10WzBdLCBmbXR0eVswXSk7XG4gICAgICAgICAgICByZXR1cm4gLyogRm10X2ZtdHR5X0VCQiAqL1tcbiAgICAgICAgICAgICAgICAgICAgLyogQWxwaGEgKi9CbG9jay5fXygxNSwgW21hdGNoJDI5WzBdXSksXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoJDI5WzFdXG4gICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBUeXBlX21pc21hdGNoO1xuICAgICAgICAgIH1cbiAgICAgIGNhc2UgMTYgOiBcbiAgICAgICAgICBpZiAodHlwZW9mIGZtdHR5ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICB0aHJvdyBUeXBlX21pc21hdGNoO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZm10dHkudGFnID09PSAxMSkge1xuICAgICAgICAgICAgdmFyIG1hdGNoJDMwID0gdHlwZV9mb3JtYXRfZ2VuKGZtdFswXSwgZm10dHlbMF0pO1xuICAgICAgICAgICAgcmV0dXJuIC8qIEZtdF9mbXR0eV9FQkIgKi9bXG4gICAgICAgICAgICAgICAgICAgIC8qIFRoZXRhICovQmxvY2suX18oMTYsIFttYXRjaCQzMFswXV0pLFxuICAgICAgICAgICAgICAgICAgICBtYXRjaCQzMFsxXVxuICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgVHlwZV9taXNtYXRjaDtcbiAgICAgICAgICB9XG4gICAgICBjYXNlIDE3IDogXG4gICAgICAgICAgdmFyIG1hdGNoJDMxID0gdHlwZV9mb3JtYXRfZ2VuKGZtdFsxXSwgZm10dHkpO1xuICAgICAgICAgIHJldHVybiAvKiBGbXRfZm10dHlfRUJCICovW1xuICAgICAgICAgICAgICAgICAgLyogRm9ybWF0dGluZ19saXQgKi9CbG9jay5fXygxNywgW1xuICAgICAgICAgICAgICAgICAgICAgIGZtdFswXSxcbiAgICAgICAgICAgICAgICAgICAgICBtYXRjaCQzMVswXVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgIG1hdGNoJDMxWzFdXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgIGNhc2UgMTggOiBcbiAgICAgICAgICB2YXIgZm9ybWF0dGluZ19nZW4gPSBmbXRbMF07XG4gICAgICAgICAgdmFyIGZtdDAgPSBmbXRbMV07XG4gICAgICAgICAgdmFyIGZtdHR5MCA9IGZtdHR5O1xuICAgICAgICAgIGlmIChmb3JtYXR0aW5nX2dlbi50YWcpIHtcbiAgICAgICAgICAgIHZhciBtYXRjaCQzMiA9IGZvcm1hdHRpbmdfZ2VuWzBdO1xuICAgICAgICAgICAgdmFyIG1hdGNoJDMzID0gdHlwZV9mb3JtYXRfZ2VuKG1hdGNoJDMyWzBdLCBmbXR0eTApO1xuICAgICAgICAgICAgdmFyIG1hdGNoJDM0ID0gdHlwZV9mb3JtYXRfZ2VuKGZtdDAsIG1hdGNoJDMzWzFdKTtcbiAgICAgICAgICAgIHJldHVybiAvKiBGbXRfZm10dHlfRUJCICovW1xuICAgICAgICAgICAgICAgICAgICAvKiBGb3JtYXR0aW5nX2dlbiAqL0Jsb2NrLl9fKDE4LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBPcGVuX2JveCAqL0Jsb2NrLl9fKDEsIFsvKiBGb3JtYXQgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCQzM1swXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoJDMyWzFdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gkMzRbMF1cbiAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2gkMzRbMV1cbiAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBtYXRjaCQzNSA9IGZvcm1hdHRpbmdfZ2VuWzBdO1xuICAgICAgICAgICAgdmFyIG1hdGNoJDM2ID0gdHlwZV9mb3JtYXRfZ2VuKG1hdGNoJDM1WzBdLCBmbXR0eTApO1xuICAgICAgICAgICAgdmFyIG1hdGNoJDM3ID0gdHlwZV9mb3JtYXRfZ2VuKGZtdDAsIG1hdGNoJDM2WzFdKTtcbiAgICAgICAgICAgIHJldHVybiAvKiBGbXRfZm10dHlfRUJCICovW1xuICAgICAgICAgICAgICAgICAgICAvKiBGb3JtYXR0aW5nX2dlbiAqL0Jsb2NrLl9fKDE4LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBPcGVuX3RhZyAqL0Jsb2NrLl9fKDAsIFsvKiBGb3JtYXQgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCQzNlswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoJDM1WzFdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gkMzdbMF1cbiAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2gkMzdbMV1cbiAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgfVxuICAgICAgY2FzZSAxOSA6IFxuICAgICAgICAgIGlmICh0eXBlb2YgZm10dHkgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHRocm93IFR5cGVfbWlzbWF0Y2g7XG4gICAgICAgICAgfSBlbHNlIGlmIChmbXR0eS50YWcgPT09IDEzKSB7XG4gICAgICAgICAgICB2YXIgbWF0Y2gkMzggPSB0eXBlX2Zvcm1hdF9nZW4oZm10WzBdLCBmbXR0eVswXSk7XG4gICAgICAgICAgICByZXR1cm4gLyogRm10X2ZtdHR5X0VCQiAqL1tcbiAgICAgICAgICAgICAgICAgICAgLyogUmVhZGVyICovQmxvY2suX18oMTksIFttYXRjaCQzOFswXV0pLFxuICAgICAgICAgICAgICAgICAgICBtYXRjaCQzOFsxXVxuICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgVHlwZV9taXNtYXRjaDtcbiAgICAgICAgICB9XG4gICAgICBjYXNlIDIwIDogXG4gICAgICAgICAgaWYgKHR5cGVvZiBmbXR0eSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgdGhyb3cgVHlwZV9taXNtYXRjaDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGZtdHR5LnRhZyA9PT0gMSkge1xuICAgICAgICAgICAgdmFyIG1hdGNoJDM5ID0gdHlwZV9mb3JtYXRfZ2VuKGZtdFsyXSwgZm10dHlbMF0pO1xuICAgICAgICAgICAgcmV0dXJuIC8qIEZtdF9mbXR0eV9FQkIgKi9bXG4gICAgICAgICAgICAgICAgICAgIC8qIFNjYW5fY2hhcl9zZXQgKi9CbG9jay5fXygyMCwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgZm10WzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm10WzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gkMzlbMF1cbiAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2gkMzlbMV1cbiAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IFR5cGVfbWlzbWF0Y2g7XG4gICAgICAgICAgfVxuICAgICAgY2FzZSAyMSA6IFxuICAgICAgICAgIGlmICh0eXBlb2YgZm10dHkgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHRocm93IFR5cGVfbWlzbWF0Y2g7XG4gICAgICAgICAgfSBlbHNlIGlmIChmbXR0eS50YWcgPT09IDIpIHtcbiAgICAgICAgICAgIHZhciBtYXRjaCQ0MCA9IHR5cGVfZm9ybWF0X2dlbihmbXRbMV0sIGZtdHR5WzBdKTtcbiAgICAgICAgICAgIHJldHVybiAvKiBGbXRfZm10dHlfRUJCICovW1xuICAgICAgICAgICAgICAgICAgICAvKiBTY2FuX2dldF9jb3VudGVyICovQmxvY2suX18oMjEsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZtdFswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoJDQwWzBdXG4gICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoJDQwWzFdXG4gICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBUeXBlX21pc21hdGNoO1xuICAgICAgICAgIH1cbiAgICAgIGNhc2UgMjMgOiBcbiAgICAgICAgICB2YXIgaWduID0gZm10WzBdO1xuICAgICAgICAgIHZhciBmbXQkMSA9IGZtdFsxXTtcbiAgICAgICAgICB2YXIgZm10dHkkMSA9IGZtdHR5O1xuICAgICAgICAgIGlmICh0eXBlb2YgaWduID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICBpZiAoaWduID09PSAzKSB7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgZm10dHkkMSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgIHRocm93IFR5cGVfbWlzbWF0Y2g7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoZm10dHkkMS50YWcgPT09IDE0KSB7XG4gICAgICAgICAgICAgICAgdmFyIG1hdGNoJDQxID0gdHlwZV9mb3JtYXRfZ2VuKGZtdCQxLCBmbXR0eSQxWzBdKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogRm10X2ZtdHR5X0VCQiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIElnbm9yZWRfcGFyYW0gKi9CbG9jay5fXygyMywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIElnbm9yZWRfcmVhZGVyICovMyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCQ0MVswXVxuICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoJDQxWzFdXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlX21pc21hdGNoO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gdHlwZV9pZ25vcmVkX3BhcmFtX29uZShpZ24sIGZtdCQxLCBmbXR0eSQxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3dpdGNoIChpZ24udGFnIHwgMCkge1xuICAgICAgICAgICAgICBjYXNlIDcgOiBcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0eXBlX2lnbm9yZWRfcGFyYW1fb25lKC8qIElnbm9yZWRfZm9ybWF0X2FyZyAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWduWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZ25bMV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLCBmbXQkMSwgZm10dHkkMSk7XG4gICAgICAgICAgICAgIGNhc2UgOCA6IFxuICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoJDQyID0gdHlwZV9pZ25vcmVkX2Zvcm1hdF9zdWJzdGl0dXRpb24oaWduWzFdLCBmbXQkMSwgZm10dHkkMSk7XG4gICAgICAgICAgICAgICAgICB2YXIgbWF0Y2gkNDMgPSBtYXRjaCQ0MlsxXTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBGbXRfZm10dHlfRUJCICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBJZ25vcmVkX3BhcmFtICovQmxvY2suX18oMjMsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIElnbm9yZWRfZm9ybWF0X3N1YnN0ICovQmxvY2suX18oOCwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlnblswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCQ0MlswXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoJDQzWzBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoJDQzWzFdXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlX2lnbm9yZWRfcGFyYW1fb25lKGlnbiwgZm10JDEsIGZtdHR5JDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIGNhc2UgMjIgOiBcbiAgICAgIGNhc2UgMjQgOiBcbiAgICAgICAgICB0aHJvdyBUeXBlX21pc21hdGNoO1xuICAgICAgXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHR5cGVfaWdub3JlZF9mb3JtYXRfc3Vic3RpdHV0aW9uKHN1Yl9mbXR0eSwgZm10LCBmbXR0eSkge1xuICBpZiAodHlwZW9mIHN1Yl9mbXR0eSA9PT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiAvKiBGbXR0eV9mbXRfRUJCICovW1xuICAgICAgICAgICAgLyogRW5kX29mX2ZtdHR5ICovMCxcbiAgICAgICAgICAgIHR5cGVfZm9ybWF0X2dlbihmbXQsIGZtdHR5KVxuICAgICAgICAgIF07XG4gIH0gZWxzZSB7XG4gICAgc3dpdGNoIChzdWJfZm10dHkudGFnIHwgMCkge1xuICAgICAgY2FzZSAwIDogXG4gICAgICAgICAgaWYgKHR5cGVvZiBmbXR0eSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgdGhyb3cgVHlwZV9taXNtYXRjaDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGZtdHR5LnRhZykge1xuICAgICAgICAgICAgdGhyb3cgVHlwZV9taXNtYXRjaDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIG1hdGNoID0gdHlwZV9pZ25vcmVkX2Zvcm1hdF9zdWJzdGl0dXRpb24oc3ViX2ZtdHR5WzBdLCBmbXQsIGZtdHR5WzBdKTtcbiAgICAgICAgICAgIHJldHVybiAvKiBGbXR0eV9mbXRfRUJCICovW1xuICAgICAgICAgICAgICAgICAgICAvKiBDaGFyX3R5ICovQmxvY2suX18oMCwgW21hdGNoWzBdXSksXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoWzFdXG4gICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgIH1cbiAgICAgIGNhc2UgMSA6IFxuICAgICAgICAgIGlmICh0eXBlb2YgZm10dHkgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHRocm93IFR5cGVfbWlzbWF0Y2g7XG4gICAgICAgICAgfSBlbHNlIGlmIChmbXR0eS50YWcgPT09IDEpIHtcbiAgICAgICAgICAgIHZhciBtYXRjaCQxID0gdHlwZV9pZ25vcmVkX2Zvcm1hdF9zdWJzdGl0dXRpb24oc3ViX2ZtdHR5WzBdLCBmbXQsIGZtdHR5WzBdKTtcbiAgICAgICAgICAgIHJldHVybiAvKiBGbXR0eV9mbXRfRUJCICovW1xuICAgICAgICAgICAgICAgICAgICAvKiBTdHJpbmdfdHkgKi9CbG9jay5fXygxLCBbbWF0Y2gkMVswXV0pLFxuICAgICAgICAgICAgICAgICAgICBtYXRjaCQxWzFdXG4gICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBUeXBlX21pc21hdGNoO1xuICAgICAgICAgIH1cbiAgICAgIGNhc2UgMiA6IFxuICAgICAgICAgIGlmICh0eXBlb2YgZm10dHkgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHRocm93IFR5cGVfbWlzbWF0Y2g7XG4gICAgICAgICAgfSBlbHNlIGlmIChmbXR0eS50YWcgPT09IDIpIHtcbiAgICAgICAgICAgIHZhciBtYXRjaCQyID0gdHlwZV9pZ25vcmVkX2Zvcm1hdF9zdWJzdGl0dXRpb24oc3ViX2ZtdHR5WzBdLCBmbXQsIGZtdHR5WzBdKTtcbiAgICAgICAgICAgIHJldHVybiAvKiBGbXR0eV9mbXRfRUJCICovW1xuICAgICAgICAgICAgICAgICAgICAvKiBJbnRfdHkgKi9CbG9jay5fXygyLCBbbWF0Y2gkMlswXV0pLFxuICAgICAgICAgICAgICAgICAgICBtYXRjaCQyWzFdXG4gICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBUeXBlX21pc21hdGNoO1xuICAgICAgICAgIH1cbiAgICAgIGNhc2UgMyA6IFxuICAgICAgICAgIGlmICh0eXBlb2YgZm10dHkgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHRocm93IFR5cGVfbWlzbWF0Y2g7XG4gICAgICAgICAgfSBlbHNlIGlmIChmbXR0eS50YWcgPT09IDMpIHtcbiAgICAgICAgICAgIHZhciBtYXRjaCQzID0gdHlwZV9pZ25vcmVkX2Zvcm1hdF9zdWJzdGl0dXRpb24oc3ViX2ZtdHR5WzBdLCBmbXQsIGZtdHR5WzBdKTtcbiAgICAgICAgICAgIHJldHVybiAvKiBGbXR0eV9mbXRfRUJCICovW1xuICAgICAgICAgICAgICAgICAgICAvKiBJbnQzMl90eSAqL0Jsb2NrLl9fKDMsIFttYXRjaCQzWzBdXSksXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoJDNbMV1cbiAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IFR5cGVfbWlzbWF0Y2g7XG4gICAgICAgICAgfVxuICAgICAgY2FzZSA0IDogXG4gICAgICAgICAgaWYgKHR5cGVvZiBmbXR0eSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgdGhyb3cgVHlwZV9taXNtYXRjaDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGZtdHR5LnRhZyA9PT0gNCkge1xuICAgICAgICAgICAgdmFyIG1hdGNoJDQgPSB0eXBlX2lnbm9yZWRfZm9ybWF0X3N1YnN0aXR1dGlvbihzdWJfZm10dHlbMF0sIGZtdCwgZm10dHlbMF0pO1xuICAgICAgICAgICAgcmV0dXJuIC8qIEZtdHR5X2ZtdF9FQkIgKi9bXG4gICAgICAgICAgICAgICAgICAgIC8qIE5hdGl2ZWludF90eSAqL0Jsb2NrLl9fKDQsIFttYXRjaCQ0WzBdXSksXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoJDRbMV1cbiAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IFR5cGVfbWlzbWF0Y2g7XG4gICAgICAgICAgfVxuICAgICAgY2FzZSA1IDogXG4gICAgICAgICAgaWYgKHR5cGVvZiBmbXR0eSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgdGhyb3cgVHlwZV9taXNtYXRjaDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGZtdHR5LnRhZyA9PT0gNSkge1xuICAgICAgICAgICAgdmFyIG1hdGNoJDUgPSB0eXBlX2lnbm9yZWRfZm9ybWF0X3N1YnN0aXR1dGlvbihzdWJfZm10dHlbMF0sIGZtdCwgZm10dHlbMF0pO1xuICAgICAgICAgICAgcmV0dXJuIC8qIEZtdHR5X2ZtdF9FQkIgKi9bXG4gICAgICAgICAgICAgICAgICAgIC8qIEludDY0X3R5ICovQmxvY2suX18oNSwgW21hdGNoJDVbMF1dKSxcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2gkNVsxXVxuICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgVHlwZV9taXNtYXRjaDtcbiAgICAgICAgICB9XG4gICAgICBjYXNlIDYgOiBcbiAgICAgICAgICBpZiAodHlwZW9mIGZtdHR5ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICB0aHJvdyBUeXBlX21pc21hdGNoO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZm10dHkudGFnID09PSA2KSB7XG4gICAgICAgICAgICB2YXIgbWF0Y2gkNiA9IHR5cGVfaWdub3JlZF9mb3JtYXRfc3Vic3RpdHV0aW9uKHN1Yl9mbXR0eVswXSwgZm10LCBmbXR0eVswXSk7XG4gICAgICAgICAgICByZXR1cm4gLyogRm10dHlfZm10X0VCQiAqL1tcbiAgICAgICAgICAgICAgICAgICAgLyogRmxvYXRfdHkgKi9CbG9jay5fXyg2LCBbbWF0Y2gkNlswXV0pLFxuICAgICAgICAgICAgICAgICAgICBtYXRjaCQ2WzFdXG4gICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBUeXBlX21pc21hdGNoO1xuICAgICAgICAgIH1cbiAgICAgIGNhc2UgNyA6IFxuICAgICAgICAgIGlmICh0eXBlb2YgZm10dHkgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHRocm93IFR5cGVfbWlzbWF0Y2g7XG4gICAgICAgICAgfSBlbHNlIGlmIChmbXR0eS50YWcgPT09IDcpIHtcbiAgICAgICAgICAgIHZhciBtYXRjaCQ3ID0gdHlwZV9pZ25vcmVkX2Zvcm1hdF9zdWJzdGl0dXRpb24oc3ViX2ZtdHR5WzBdLCBmbXQsIGZtdHR5WzBdKTtcbiAgICAgICAgICAgIHJldHVybiAvKiBGbXR0eV9mbXRfRUJCICovW1xuICAgICAgICAgICAgICAgICAgICAvKiBCb29sX3R5ICovQmxvY2suX18oNywgW21hdGNoJDdbMF1dKSxcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2gkN1sxXVxuICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgVHlwZV9taXNtYXRjaDtcbiAgICAgICAgICB9XG4gICAgICBjYXNlIDggOiBcbiAgICAgICAgICBpZiAodHlwZW9mIGZtdHR5ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICB0aHJvdyBUeXBlX21pc21hdGNoO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZm10dHkudGFnID09PSA4KSB7XG4gICAgICAgICAgICB2YXIgc3ViMl9mbXR0eSRwcmltZSA9IGZtdHR5WzBdO1xuICAgICAgICAgICAgaWYgKENhbWxfb2JqLmNhbWxfbm90ZXF1YWwoLyogRm10dHlfRUJCICovW3N1Yl9mbXR0eVswXV0sIC8qIEZtdHR5X0VCQiAqL1tzdWIyX2ZtdHR5JHByaW1lXSkpIHtcbiAgICAgICAgICAgICAgdGhyb3cgVHlwZV9taXNtYXRjaDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBtYXRjaCQ4ID0gdHlwZV9pZ25vcmVkX2Zvcm1hdF9zdWJzdGl0dXRpb24oc3ViX2ZtdHR5WzFdLCBmbXQsIGZtdHR5WzFdKTtcbiAgICAgICAgICAgIHJldHVybiAvKiBGbXR0eV9mbXRfRUJCICovW1xuICAgICAgICAgICAgICAgICAgICAvKiBGb3JtYXRfYXJnX3R5ICovQmxvY2suX18oOCwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViMl9mbXR0eSRwcmltZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoJDhbMF1cbiAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2gkOFsxXVxuICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgVHlwZV9taXNtYXRjaDtcbiAgICAgICAgICB9XG4gICAgICBjYXNlIDkgOiBcbiAgICAgICAgICBpZiAodHlwZW9mIGZtdHR5ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICB0aHJvdyBUeXBlX21pc21hdGNoO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZm10dHkudGFnID09PSA5KSB7XG4gICAgICAgICAgICB2YXIgc3ViMl9mbXR0eSRwcmltZSQxID0gZm10dHlbMV07XG4gICAgICAgICAgICB2YXIgc3ViMV9mbXR0eSRwcmltZSA9IGZtdHR5WzBdO1xuICAgICAgICAgICAgaWYgKENhbWxfb2JqLmNhbWxfbm90ZXF1YWwoLyogRm10dHlfRUJCICovW0NhbWxpbnRlcm5hbEZvcm1hdEJhc2ljcy5lcmFzZV9yZWwoc3ViX2ZtdHR5WzBdKV0sIC8qIEZtdHR5X0VCQiAqL1tDYW1saW50ZXJuYWxGb3JtYXRCYXNpY3MuZXJhc2VfcmVsKHN1YjFfZm10dHkkcHJpbWUpXSkpIHtcbiAgICAgICAgICAgICAgdGhyb3cgVHlwZV9taXNtYXRjaDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChDYW1sX29iai5jYW1sX25vdGVxdWFsKC8qIEZtdHR5X0VCQiAqL1tDYW1saW50ZXJuYWxGb3JtYXRCYXNpY3MuZXJhc2VfcmVsKHN1Yl9mbXR0eVsxXSldLCAvKiBGbXR0eV9FQkIgKi9bQ2FtbGludGVybmFsRm9ybWF0QmFzaWNzLmVyYXNlX3JlbChzdWIyX2ZtdHR5JHByaW1lJDEpXSkpIHtcbiAgICAgICAgICAgICAgdGhyb3cgVHlwZV9taXNtYXRjaDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBzdWJfZm10dHkkcHJpbWUgPSB0cmFucyhzeW1tKHN1YjFfZm10dHkkcHJpbWUpLCBzdWIyX2ZtdHR5JHByaW1lJDEpO1xuICAgICAgICAgICAgdmFyIG1hdGNoJDkgPSBmbXR0eV9yZWxfZGV0KHN1Yl9mbXR0eSRwcmltZSk7XG4gICAgICAgICAgICBDdXJyeS5fMShtYXRjaCQ5WzFdLCAvKiBSZWZsICovMCk7XG4gICAgICAgICAgICBDdXJyeS5fMShtYXRjaCQ5WzNdLCAvKiBSZWZsICovMCk7XG4gICAgICAgICAgICB2YXIgbWF0Y2gkMTAgPSB0eXBlX2lnbm9yZWRfZm9ybWF0X3N1YnN0aXR1dGlvbihDYW1saW50ZXJuYWxGb3JtYXRCYXNpY3MuZXJhc2VfcmVsKHN1Yl9mbXR0eVsyXSksIGZtdCwgZm10dHlbMl0pO1xuICAgICAgICAgICAgcmV0dXJuIC8qIEZtdHR5X2ZtdF9FQkIgKi9bXG4gICAgICAgICAgICAgICAgICAgIC8qIEZvcm1hdF9zdWJzdF90eSAqL0Jsb2NrLl9fKDksIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YjFfZm10dHkkcHJpbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWIyX2ZtdHR5JHByaW1lJDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBzeW1tKG1hdGNoJDEwWzBdKVxuICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBtYXRjaCQxMFsxXVxuICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgVHlwZV9taXNtYXRjaDtcbiAgICAgICAgICB9XG4gICAgICBjYXNlIDEwIDogXG4gICAgICAgICAgaWYgKHR5cGVvZiBmbXR0eSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgdGhyb3cgVHlwZV9taXNtYXRjaDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGZtdHR5LnRhZyA9PT0gMTApIHtcbiAgICAgICAgICAgIHZhciBtYXRjaCQxMSA9IHR5cGVfaWdub3JlZF9mb3JtYXRfc3Vic3RpdHV0aW9uKHN1Yl9mbXR0eVswXSwgZm10LCBmbXR0eVswXSk7XG4gICAgICAgICAgICByZXR1cm4gLyogRm10dHlfZm10X0VCQiAqL1tcbiAgICAgICAgICAgICAgICAgICAgLyogQWxwaGFfdHkgKi9CbG9jay5fXygxMCwgW21hdGNoJDExWzBdXSksXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoJDExWzFdXG4gICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBUeXBlX21pc21hdGNoO1xuICAgICAgICAgIH1cbiAgICAgIGNhc2UgMTEgOiBcbiAgICAgICAgICBpZiAodHlwZW9mIGZtdHR5ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICB0aHJvdyBUeXBlX21pc21hdGNoO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZm10dHkudGFnID09PSAxMSkge1xuICAgICAgICAgICAgdmFyIG1hdGNoJDEyID0gdHlwZV9pZ25vcmVkX2Zvcm1hdF9zdWJzdGl0dXRpb24oc3ViX2ZtdHR5WzBdLCBmbXQsIGZtdHR5WzBdKTtcbiAgICAgICAgICAgIHJldHVybiAvKiBGbXR0eV9mbXRfRUJCICovW1xuICAgICAgICAgICAgICAgICAgICAvKiBUaGV0YV90eSAqL0Jsb2NrLl9fKDExLCBbbWF0Y2gkMTJbMF1dKSxcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2gkMTJbMV1cbiAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IFR5cGVfbWlzbWF0Y2g7XG4gICAgICAgICAgfVxuICAgICAgY2FzZSAxMiA6IFxuICAgICAgICAgIHRocm93IFR5cGVfbWlzbWF0Y2g7XG4gICAgICBjYXNlIDEzIDogXG4gICAgICAgICAgaWYgKHR5cGVvZiBmbXR0eSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgdGhyb3cgVHlwZV9taXNtYXRjaDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGZtdHR5LnRhZyA9PT0gMTMpIHtcbiAgICAgICAgICAgIHZhciBtYXRjaCQxMyA9IHR5cGVfaWdub3JlZF9mb3JtYXRfc3Vic3RpdHV0aW9uKHN1Yl9mbXR0eVswXSwgZm10LCBmbXR0eVswXSk7XG4gICAgICAgICAgICByZXR1cm4gLyogRm10dHlfZm10X0VCQiAqL1tcbiAgICAgICAgICAgICAgICAgICAgLyogUmVhZGVyX3R5ICovQmxvY2suX18oMTMsIFttYXRjaCQxM1swXV0pLFxuICAgICAgICAgICAgICAgICAgICBtYXRjaCQxM1sxXVxuICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgVHlwZV9taXNtYXRjaDtcbiAgICAgICAgICB9XG4gICAgICBjYXNlIDE0IDogXG4gICAgICAgICAgaWYgKHR5cGVvZiBmbXR0eSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgdGhyb3cgVHlwZV9taXNtYXRjaDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGZtdHR5LnRhZyA9PT0gMTQpIHtcbiAgICAgICAgICAgIHZhciBtYXRjaCQxNCA9IHR5cGVfaWdub3JlZF9mb3JtYXRfc3Vic3RpdHV0aW9uKHN1Yl9mbXR0eVswXSwgZm10LCBmbXR0eVswXSk7XG4gICAgICAgICAgICByZXR1cm4gLyogRm10dHlfZm10X0VCQiAqL1tcbiAgICAgICAgICAgICAgICAgICAgLyogSWdub3JlZF9yZWFkZXJfdHkgKi9CbG9jay5fXygxNCwgW21hdGNoJDE0WzBdXSksXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoJDE0WzFdXG4gICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBUeXBlX21pc21hdGNoO1xuICAgICAgICAgIH1cbiAgICAgIFxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB0eXBlX2Zvcm1hdChmbXQsIGZtdHR5KSB7XG4gIHZhciBtYXRjaCA9IHR5cGVfZm9ybWF0X2dlbihmbXQsIGZtdHR5KTtcbiAgaWYgKHR5cGVvZiBtYXRjaFsxXSA9PT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiBtYXRjaFswXTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBUeXBlX21pc21hdGNoO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlY2FzdChmbXQsIGZtdHR5KSB7XG4gIHJldHVybiB0eXBlX2Zvcm1hdChmbXQsIENhbWxpbnRlcm5hbEZvcm1hdEJhc2ljcy5lcmFzZV9yZWwoc3ltbShmbXR0eSkpKTtcbn1cblxuZnVuY3Rpb24gZml4X3BhZGRpbmcocGFkdHksIHdpZHRoLCBzdHIpIHtcbiAgdmFyIGxlbiA9IHN0ci5sZW5ndGg7XG4gIHZhciB3aWR0aCQxID0gUGVydmFzaXZlcy5hYnMod2lkdGgpO1xuICB2YXIgcGFkdHkkMSA9IHdpZHRoIDwgMCA/IC8qIExlZnQgKi8wIDogcGFkdHk7XG4gIGlmICh3aWR0aCQxIDw9IGxlbikge1xuICAgIHJldHVybiBzdHI7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHJlcyA9IEJ5dGVzLm1ha2Uod2lkdGgkMSwgcGFkdHkkMSA9PT0gLyogWmVyb3MgKi8yID8gLyogXCIwXCIgKi80OCA6IC8qIFwiIFwiICovMzIpO1xuICAgIHN3aXRjaCAocGFkdHkkMSkge1xuICAgICAgY2FzZSAwIDogXG4gICAgICAgICAgJCRTdHJpbmcuYmxpdChzdHIsIDAsIHJlcywgMCwgbGVuKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMSA6IFxuICAgICAgICAgICQkU3RyaW5nLmJsaXQoc3RyLCAwLCByZXMsIHdpZHRoJDEgLSBsZW4gfCAwLCBsZW4pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyIDogXG4gICAgICAgICAgaWYgKGxlbiA+IDAgJiYgKENhbWxfc3RyaW5nLmdldChzdHIsIDApID09PSAvKiBcIitcIiAqLzQzIHx8IENhbWxfc3RyaW5nLmdldChzdHIsIDApID09PSAvKiBcIi1cIiAqLzQ1IHx8IENhbWxfc3RyaW5nLmdldChzdHIsIDApID09PSAvKiBcIiBcIiAqLzMyKSkge1xuICAgICAgICAgICAgcmVzWzBdID0gQ2FtbF9zdHJpbmcuZ2V0KHN0ciwgMCk7XG4gICAgICAgICAgICAkJFN0cmluZy5ibGl0KHN0ciwgMSwgcmVzLCAod2lkdGgkMSAtIGxlbiB8IDApICsgMSB8IDAsIGxlbiAtIDEgfCAwKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGxlbiA+IDEgJiYgQ2FtbF9zdHJpbmcuZ2V0KHN0ciwgMCkgPT09IC8qIFwiMFwiICovNDggJiYgKENhbWxfc3RyaW5nLmdldChzdHIsIDEpID09PSAvKiBcInhcIiAqLzEyMCB8fCBDYW1sX3N0cmluZy5nZXQoc3RyLCAxKSA9PT0gLyogXCJYXCIgKi84OCkpIHtcbiAgICAgICAgICAgIHJlc1sxXSA9IENhbWxfc3RyaW5nLmdldChzdHIsIDEpO1xuICAgICAgICAgICAgJCRTdHJpbmcuYmxpdChzdHIsIDIsIHJlcywgKHdpZHRoJDEgLSBsZW4gfCAwKSArIDIgfCAwLCBsZW4gLSAyIHwgMCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICQkU3RyaW5nLmJsaXQoc3RyLCAwLCByZXMsIHdpZHRoJDEgLSBsZW4gfCAwLCBsZW4pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIFxuICAgIH1cbiAgICByZXR1cm4gQ2FtbF9ieXRlcy5ieXRlc190b19zdHJpbmcocmVzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaXhfaW50X3ByZWNpc2lvbihwcmVjLCBzdHIpIHtcbiAgdmFyIHByZWMkMSA9IFBlcnZhc2l2ZXMuYWJzKHByZWMpO1xuICB2YXIgbGVuID0gc3RyLmxlbmd0aDtcbiAgdmFyIGMgPSBDYW1sX3N0cmluZy5nZXQoc3RyLCAwKTtcbiAgdmFyIGV4aXQgPSAwO1xuICBpZiAoYyA+PSA1OCkge1xuICAgIGlmIChjID49IDcxKSB7XG4gICAgICBpZiAoYyA+IDEwMiB8fCBjIDwgOTcpIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGV4aXQgPSAyO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYyA+PSA2NSkge1xuICAgICAgZXhpdCA9IDI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICB9IGVsc2UgaWYgKGMgIT09IDMyKSB7XG4gICAgaWYgKGMgPj0gNDMpIHtcbiAgICAgIHN3aXRjaCAoYyAtIDQzIHwgMCkge1xuICAgICAgICBjYXNlIDAgOiBcbiAgICAgICAgY2FzZSAyIDogXG4gICAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDEgOiBcbiAgICAgICAgY2FzZSAzIDogXG4gICAgICAgIGNhc2UgNCA6IFxuICAgICAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgICAgY2FzZSA1IDogXG4gICAgICAgICAgICBpZiAoKHByZWMkMSArIDIgfCAwKSA+IGxlbiAmJiBsZW4gPiAxICYmIChDYW1sX3N0cmluZy5nZXQoc3RyLCAxKSA9PT0gLyogXCJ4XCIgKi8xMjAgfHwgQ2FtbF9zdHJpbmcuZ2V0KHN0ciwgMSkgPT09IC8qIFwiWFwiICovODgpKSB7XG4gICAgICAgICAgICAgIHZhciByZXMgPSBCeXRlcy5tYWtlKHByZWMkMSArIDIgfCAwLCAvKiBcIjBcIiAqLzQ4KTtcbiAgICAgICAgICAgICAgcmVzWzFdID0gQ2FtbF9zdHJpbmcuZ2V0KHN0ciwgMSk7XG4gICAgICAgICAgICAgICQkU3RyaW5nLmJsaXQoc3RyLCAyLCByZXMsIChwcmVjJDEgLSBsZW4gfCAwKSArIDQgfCAwLCBsZW4gLSAyIHwgMCk7XG4gICAgICAgICAgICAgIHJldHVybiBDYW1sX2J5dGVzLmJ5dGVzX3RvX3N0cmluZyhyZXMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZXhpdCA9IDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA2IDogXG4gICAgICAgIGNhc2UgNyA6IFxuICAgICAgICBjYXNlIDggOiBcbiAgICAgICAgY2FzZSA5IDogXG4gICAgICAgIGNhc2UgMTAgOiBcbiAgICAgICAgY2FzZSAxMSA6IFxuICAgICAgICBjYXNlIDEyIDogXG4gICAgICAgIGNhc2UgMTMgOiBcbiAgICAgICAgY2FzZSAxNCA6IFxuICAgICAgICAgICAgZXhpdCA9IDI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGV4aXQgPSAxO1xuICB9XG4gIHN3aXRjaCAoZXhpdCkge1xuICAgIGNhc2UgMSA6IFxuICAgICAgICBpZiAoKHByZWMkMSArIDEgfCAwKSA+IGxlbikge1xuICAgICAgICAgIHZhciByZXMkMSA9IEJ5dGVzLm1ha2UocHJlYyQxICsgMSB8IDAsIC8qIFwiMFwiICovNDgpO1xuICAgICAgICAgIHJlcyQxWzBdID0gYztcbiAgICAgICAgICAkJFN0cmluZy5ibGl0KHN0ciwgMSwgcmVzJDEsIChwcmVjJDEgLSBsZW4gfCAwKSArIDIgfCAwLCBsZW4gLSAxIHwgMCk7XG4gICAgICAgICAgcmV0dXJuIENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nKHJlcyQxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgICB9XG4gICAgY2FzZSAyIDogXG4gICAgICAgIGlmIChwcmVjJDEgPiBsZW4pIHtcbiAgICAgICAgICB2YXIgcmVzJDIgPSBCeXRlcy5tYWtlKHByZWMkMSwgLyogXCIwXCIgKi80OCk7XG4gICAgICAgICAgJCRTdHJpbmcuYmxpdChzdHIsIDAsIHJlcyQyLCBwcmVjJDEgLSBsZW4gfCAwLCBsZW4pO1xuICAgICAgICAgIHJldHVybiBDYW1sX2J5dGVzLmJ5dGVzX3RvX3N0cmluZyhyZXMkMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgICAgfVxuICAgIFxuICB9XG59XG5cbmZ1bmN0aW9uIHN0cmluZ190b19jYW1sX3N0cmluZyhzdHIpIHtcbiAgcmV0dXJuICQkU3RyaW5nLmNvbmNhdCgkJFN0cmluZy5lc2NhcGVkKHN0ciksIC8qIDo6ICovW1xuICAgICAgICAgICAgICBcIlxcXCJcIixcbiAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgXCJcXFwiXCIsXG4gICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRfb2ZfaWNvbnYoaWNvbnYpIHtcbiAgc3dpdGNoIChpY29udikge1xuICAgIGNhc2UgMCA6IFxuICAgICAgICByZXR1cm4gXCIlZFwiO1xuICAgIGNhc2UgMSA6IFxuICAgICAgICByZXR1cm4gXCIlK2RcIjtcbiAgICBjYXNlIDIgOiBcbiAgICAgICAgcmV0dXJuIFwiJSBkXCI7XG4gICAgY2FzZSAzIDogXG4gICAgICAgIHJldHVybiBcIiVpXCI7XG4gICAgY2FzZSA0IDogXG4gICAgICAgIHJldHVybiBcIiUraVwiO1xuICAgIGNhc2UgNSA6IFxuICAgICAgICByZXR1cm4gXCIlIGlcIjtcbiAgICBjYXNlIDYgOiBcbiAgICAgICAgcmV0dXJuIFwiJXhcIjtcbiAgICBjYXNlIDcgOiBcbiAgICAgICAgcmV0dXJuIFwiJSN4XCI7XG4gICAgY2FzZSA4IDogXG4gICAgICAgIHJldHVybiBcIiVYXCI7XG4gICAgY2FzZSA5IDogXG4gICAgICAgIHJldHVybiBcIiUjWFwiO1xuICAgIGNhc2UgMTAgOiBcbiAgICAgICAgcmV0dXJuIFwiJW9cIjtcbiAgICBjYXNlIDExIDogXG4gICAgICAgIHJldHVybiBcIiUjb1wiO1xuICAgIGNhc2UgMTIgOiBcbiAgICAgICAgcmV0dXJuIFwiJXVcIjtcbiAgICBcbiAgfVxufVxuXG5mdW5jdGlvbiBmb3JtYXRfb2ZfYWNvbnYoaWNvbnYsIGMpIHtcbiAgdmFyIHNlcHM7XG4gIHN3aXRjaCAoaWNvbnYpIHtcbiAgICBjYXNlIDAgOiBcbiAgICAgICAgc2VwcyA9IC8qIDo6ICovW1xuICAgICAgICAgIFwiJVwiLFxuICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgXCJkXCIsXG4gICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICBdXG4gICAgICAgIF07XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgMSA6IFxuICAgICAgICBzZXBzID0gLyogOjogKi9bXG4gICAgICAgICAgXCIlK1wiLFxuICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgXCJkXCIsXG4gICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICBdXG4gICAgICAgIF07XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgMiA6IFxuICAgICAgICBzZXBzID0gLyogOjogKi9bXG4gICAgICAgICAgXCIlIFwiLFxuICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgXCJkXCIsXG4gICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICBdXG4gICAgICAgIF07XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgMyA6IFxuICAgICAgICBzZXBzID0gLyogOjogKi9bXG4gICAgICAgICAgXCIlXCIsXG4gICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICBcImlcIixcbiAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgIF1cbiAgICAgICAgXTtcbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSA0IDogXG4gICAgICAgIHNlcHMgPSAvKiA6OiAqL1tcbiAgICAgICAgICBcIiUrXCIsXG4gICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICBcImlcIixcbiAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgIF1cbiAgICAgICAgXTtcbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSA1IDogXG4gICAgICAgIHNlcHMgPSAvKiA6OiAqL1tcbiAgICAgICAgICBcIiUgXCIsXG4gICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICBcImlcIixcbiAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgIF1cbiAgICAgICAgXTtcbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSA2IDogXG4gICAgICAgIHNlcHMgPSAvKiA6OiAqL1tcbiAgICAgICAgICBcIiVcIixcbiAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgIFwieFwiLFxuICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgXVxuICAgICAgICBdO1xuICAgICAgICBicmVhaztcbiAgICBjYXNlIDcgOiBcbiAgICAgICAgc2VwcyA9IC8qIDo6ICovW1xuICAgICAgICAgIFwiJSNcIixcbiAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgIFwieFwiLFxuICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgXVxuICAgICAgICBdO1xuICAgICAgICBicmVhaztcbiAgICBjYXNlIDggOiBcbiAgICAgICAgc2VwcyA9IC8qIDo6ICovW1xuICAgICAgICAgIFwiJVwiLFxuICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgXCJYXCIsXG4gICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICBdXG4gICAgICAgIF07XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgOSA6IFxuICAgICAgICBzZXBzID0gLyogOjogKi9bXG4gICAgICAgICAgXCIlI1wiLFxuICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgXCJYXCIsXG4gICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICBdXG4gICAgICAgIF07XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTAgOiBcbiAgICAgICAgc2VwcyA9IC8qIDo6ICovW1xuICAgICAgICAgIFwiJVwiLFxuICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgXCJvXCIsXG4gICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICBdXG4gICAgICAgIF07XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTEgOiBcbiAgICAgICAgc2VwcyA9IC8qIDo6ICovW1xuICAgICAgICAgIFwiJSNcIixcbiAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgIFwib1wiLFxuICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgXVxuICAgICAgICBdO1xuICAgICAgICBicmVhaztcbiAgICBjYXNlIDEyIDogXG4gICAgICAgIHNlcHMgPSAvKiA6OiAqL1tcbiAgICAgICAgICBcIiVcIixcbiAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgIFwidVwiLFxuICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgXVxuICAgICAgICBdO1xuICAgICAgICBicmVhaztcbiAgICBcbiAgfVxuICByZXR1cm4gJCRTdHJpbmcuY29uY2F0KENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nKEJ5dGVzLm1ha2UoMSwgYykpLCBzZXBzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0X29mX2Zjb252KGZjb252LCBwcmVjKSB7XG4gIGlmIChmY29udiA9PT0gLyogRmxvYXRfRiAqLzE1KSB7XG4gICAgcmV0dXJuIFwiJS4xMmdcIjtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcHJlYyQxID0gUGVydmFzaXZlcy5hYnMocHJlYyk7XG4gICAgdmFyIHN5bWIgPSBjaGFyX29mX2Zjb252KGZjb252KTtcbiAgICB2YXIgYnVmID0gLyogcmVjb3JkICovW1xuICAgICAgLyogaW5kICovMCxcbiAgICAgIC8qIGJ5dGVzICovQ2FtbF9ieXRlcy5jYW1sX2NyZWF0ZV9ieXRlcygxNilcbiAgICBdO1xuICAgIGJ1ZmZlcl9hZGRfY2hhcihidWYsIC8qIFwiJVwiICovMzcpO1xuICAgIGJwcmludF9mY29udl9mbGFnKGJ1ZiwgZmNvbnYpO1xuICAgIGJ1ZmZlcl9hZGRfY2hhcihidWYsIC8qIFwiLlwiICovNDYpO1xuICAgIGJ1ZmZlcl9hZGRfc3RyaW5nKGJ1ZiwgU3RyaW5nKHByZWMkMSkpO1xuICAgIGJ1ZmZlcl9hZGRfY2hhcihidWYsIHN5bWIpO1xuICAgIHJldHVybiBidWZmZXJfY29udGVudHMoYnVmKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb252ZXJ0X2ludChpY29udiwgbikge1xuICByZXR1cm4gQ2FtbF9mb3JtYXQuY2FtbF9mb3JtYXRfaW50KGZvcm1hdF9vZl9pY29udihpY29udiksIG4pO1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0X2ludDMyKGljb252LCBuKSB7XG4gIHJldHVybiBDYW1sX2Zvcm1hdC5jYW1sX2ludDMyX2Zvcm1hdChmb3JtYXRfb2ZfYWNvbnYoaWNvbnYsIC8qIFwibFwiICovMTA4KSwgbik7XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRfbmF0aXZlaW50KGljb252LCBuKSB7XG4gIHJldHVybiBDYW1sX2Zvcm1hdC5jYW1sX25hdGl2ZWludF9mb3JtYXQoZm9ybWF0X29mX2Fjb252KGljb252LCAvKiBcIm5cIiAqLzExMCksIG4pO1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0X2ludDY0KGljb252LCBuKSB7XG4gIHJldHVybiBDYW1sX2Zvcm1hdC5jYW1sX2ludDY0X2Zvcm1hdChmb3JtYXRfb2ZfYWNvbnYoaWNvbnYsIC8qIFwiTFwiICovNzYpLCBuKTtcbn1cblxuZnVuY3Rpb24gY29udmVydF9mbG9hdChmY29udiwgcHJlYywgeCkge1xuICB2YXIgcHJlYyQxID0gUGVydmFzaXZlcy5hYnMocHJlYyk7XG4gIHZhciBzdHIgPSBDYW1sX2Zvcm1hdC5jYW1sX2Zvcm1hdF9mbG9hdChmb3JtYXRfb2ZfZmNvbnYoZmNvbnYsIHByZWMkMSksIHgpO1xuICBpZiAoZmNvbnYgIT09IC8qIEZsb2F0X0YgKi8xNSkge1xuICAgIHJldHVybiBzdHI7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbiA9IHN0ci5sZW5ndGg7XG4gICAgdmFyIGlzX3ZhbGlkID0gZnVuY3Rpb24gKF9pKSB7XG4gICAgICB3aGlsZSh0cnVlKSB7XG4gICAgICAgIHZhciBpID0gX2k7XG4gICAgICAgIGlmIChpID09PSBsZW4pIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gQ2FtbF9zdHJpbmcuZ2V0KHN0ciwgaSk7XG4gICAgICAgICAgdmFyIHN3aXRjaGVyID0gbWF0Y2ggLSA0NiB8IDA7XG4gICAgICAgICAgaWYgKHN3aXRjaGVyID4gMjMgfHwgc3dpdGNoZXIgPCAwKSB7XG4gICAgICAgICAgICBpZiAoc3dpdGNoZXIgIT09IDU1KSB7XG4gICAgICAgICAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHN3aXRjaGVyID4gMjIgfHwgc3dpdGNoZXIgPCAxKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX2kgPSBpICsgMSB8IDA7XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gICAgdmFyIG1hdGNoID0gUGVydmFzaXZlcy5jbGFzc2lmeV9mbG9hdCh4KTtcbiAgICBpZiAobWF0Y2ggIT09IDMpIHtcbiAgICAgIGlmIChtYXRjaCA+PSA0KSB7XG4gICAgICAgIHJldHVybiBcIm5hblwiO1xuICAgICAgfSBlbHNlIGlmIChpc192YWxpZCgwKSkge1xuICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHN0ciArIFwiLlwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoeCA8IDAuMCkge1xuICAgICAgcmV0dXJuIFwibmVnX2luZmluaXR5XCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcImluZmluaXR5XCI7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZvcm1hdF9jYW1sX2NoYXIoYykge1xuICByZXR1cm4gJCRTdHJpbmcuY29uY2F0KENoYXIuZXNjYXBlZChjKSwgLyogOjogKi9bXG4gICAgICAgICAgICAgIFwiJ1wiLFxuICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICBcIidcIixcbiAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ19vZl9mbXR0eShmbXR0eSkge1xuICB2YXIgYnVmID0gLyogcmVjb3JkICovW1xuICAgIC8qIGluZCAqLzAsXG4gICAgLyogYnl0ZXMgKi9DYW1sX2J5dGVzLmNhbWxfY3JlYXRlX2J5dGVzKDE2KVxuICBdO1xuICBicHJpbnRfZm10dHkoYnVmLCBmbXR0eSk7XG4gIHJldHVybiBidWZmZXJfY29udGVudHMoYnVmKTtcbn1cblxuZnVuY3Rpb24gbWFrZV9wcmludGYoX2ssIG8sIF9hY2MsIF9mbXQpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBmbXQgPSBfZm10O1xuICAgIHZhciBhY2MgPSBfYWNjO1xuICAgIHZhciBrID0gX2s7XG4gICAgaWYgKHR5cGVvZiBmbXQgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMihrLCBvLCBhY2MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2l0Y2ggKGZtdC50YWcgfCAwKSB7XG4gICAgICAgIGNhc2UgMCA6IFxuICAgICAgICAgICAgdmFyIHJlc3QgPSBmbXRbMF07XG4gICAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uKGssYWNjLHJlc3Qpe1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICAgIHZhciBuZXdfYWNjID0gLyogQWNjX2RhdGFfY2hhciAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgICAgICAgIGFjYyxcbiAgICAgICAgICAgICAgICAgIGNcbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgcmV0dXJuIG1ha2VfcHJpbnRmKGssIG8sIG5ld19hY2MsIHJlc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgfShrLGFjYyxyZXN0KSk7XG4gICAgICAgIGNhc2UgMSA6IFxuICAgICAgICAgICAgdmFyIHJlc3QkMSA9IGZtdFswXTtcbiAgICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24oayxhY2MscmVzdCQxKXtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgICB2YXIgbmV3X2FjY18wMDEgPSBmb3JtYXRfY2FtbF9jaGFyKGMpO1xuICAgICAgICAgICAgICB2YXIgbmV3X2FjYyA9IC8qIEFjY19kYXRhX3N0cmluZyAqL0Jsb2NrLl9fKDQsIFtcbiAgICAgICAgICAgICAgICAgIGFjYyxcbiAgICAgICAgICAgICAgICAgIG5ld19hY2NfMDAxXG4gICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgIHJldHVybiBtYWtlX3ByaW50ZihrLCBvLCBuZXdfYWNjLCByZXN0JDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgfShrLGFjYyxyZXN0JDEpKTtcbiAgICAgICAgY2FzZSAyIDogXG4gICAgICAgICAgICByZXR1cm4gbWFrZV9zdHJpbmdfcGFkZGluZyhrLCBvLCBhY2MsIGZtdFsxXSwgZm10WzBdLCAoZnVuY3Rpb24gKHN0cikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICBjYXNlIDMgOiBcbiAgICAgICAgICAgIHJldHVybiBtYWtlX3N0cmluZ19wYWRkaW5nKGssIG8sIGFjYywgZm10WzFdLCBmbXRbMF0sIHN0cmluZ190b19jYW1sX3N0cmluZyk7XG4gICAgICAgIGNhc2UgNCA6IFxuICAgICAgICAgICAgcmV0dXJuIG1ha2VfaW50X3BhZGRpbmdfcHJlY2lzaW9uKGssIG8sIGFjYywgZm10WzNdLCBmbXRbMV0sIGZtdFsyXSwgY29udmVydF9pbnQsIGZtdFswXSk7XG4gICAgICAgIGNhc2UgNSA6IFxuICAgICAgICAgICAgcmV0dXJuIG1ha2VfaW50X3BhZGRpbmdfcHJlY2lzaW9uKGssIG8sIGFjYywgZm10WzNdLCBmbXRbMV0sIGZtdFsyXSwgY29udmVydF9pbnQzMiwgZm10WzBdKTtcbiAgICAgICAgY2FzZSA2IDogXG4gICAgICAgICAgICByZXR1cm4gbWFrZV9pbnRfcGFkZGluZ19wcmVjaXNpb24oaywgbywgYWNjLCBmbXRbM10sIGZtdFsxXSwgZm10WzJdLCBjb252ZXJ0X25hdGl2ZWludCwgZm10WzBdKTtcbiAgICAgICAgY2FzZSA3IDogXG4gICAgICAgICAgICByZXR1cm4gbWFrZV9pbnRfcGFkZGluZ19wcmVjaXNpb24oaywgbywgYWNjLCBmbXRbM10sIGZtdFsxXSwgZm10WzJdLCBjb252ZXJ0X2ludDY0LCBmbXRbMF0pO1xuICAgICAgICBjYXNlIDggOiBcbiAgICAgICAgICAgIHZhciBrJDEgPSBrO1xuICAgICAgICAgICAgdmFyIG8kMSA9IG87XG4gICAgICAgICAgICB2YXIgYWNjJDEgPSBhY2M7XG4gICAgICAgICAgICB2YXIgZm10JDEgPSBmbXRbM107XG4gICAgICAgICAgICB2YXIgcGFkID0gZm10WzFdO1xuICAgICAgICAgICAgdmFyIHByZWMgPSBmbXRbMl07XG4gICAgICAgICAgICB2YXIgZmNvbnYgPSBmbXRbMF07XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBhZCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIHByZWMgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAocHJlYyAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChmdW5jdGlvbihrJDEsbyQxLGFjYyQxLGZtdCQxLGZjb252KXtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAocCwgeCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RyID0gY29udmVydF9mbG9hdChmY29udiwgcCwgeCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtYWtlX3ByaW50ZihrJDEsIG8kMSwgLyogQWNjX2RhdGFfc3RyaW5nICovQmxvY2suX18oNCwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjYyQxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0clxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwgZm10JDEpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfShrJDEsbyQxLGFjYyQxLGZtdCQxLGZjb252KSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24oayQxLG8kMSxhY2MkMSxmbXQkMSxmY29udil7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0ciA9IGNvbnZlcnRfZmxvYXQoZmNvbnYsIDYsIHgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWFrZV9wcmludGYoayQxLCBvJDEsIC8qIEFjY19kYXRhX3N0cmluZyAqL0Jsb2NrLl9fKDQsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2MkMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksIGZtdCQxKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0oayQxLG8kMSxhY2MkMSxmbXQkMSxmY29udikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgcCA9IHByZWNbMF07XG4gICAgICAgICAgICAgICAgcmV0dXJuIChmdW5jdGlvbihrJDEsbyQxLGFjYyQxLGZtdCQxLGZjb252LHApe1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHN0ciA9IGNvbnZlcnRfZmxvYXQoZmNvbnYsIHAsIHgpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIG1ha2VfcHJpbnRmKGskMSwgbyQxLCAvKiBBY2NfZGF0YV9zdHJpbmcgKi9CbG9jay5fXyg0LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjYyQxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLCBmbXQkMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0oayQxLG8kMSxhY2MkMSxmbXQkMSxmY29udixwKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGFkLnRhZykge1xuICAgICAgICAgICAgICB2YXIgcGFkdHkgPSBwYWRbMF07XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgcHJlYyA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgIGlmIChwcmVjICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uKGskMSxvJDEsYWNjJDEsZm10JDEsZmNvbnYscGFkdHkpe1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh3LCBwLCB4KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdHIgPSBmaXhfcGFkZGluZyhwYWR0eSwgdywgY29udmVydF9mbG9hdChmY29udiwgcCwgeCkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWFrZV9wcmludGYoayQxLCBvJDEsIC8qIEFjY19kYXRhX3N0cmluZyAqL0Jsb2NrLl9fKDQsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2MkMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksIGZtdCQxKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0oayQxLG8kMSxhY2MkMSxmbXQkMSxmY29udixwYWR0eSkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uKGskMSxvJDEsYWNjJDEsZm10JDEsZmNvbnYscGFkdHkpe1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh3LCB4KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdHIgPSBjb252ZXJ0X2Zsb2F0KGZjb252LCA2LCB4KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0ciRwcmltZSA9IGZpeF9wYWRkaW5nKHBhZHR5LCB3LCBzdHIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWFrZV9wcmludGYoayQxLCBvJDEsIC8qIEFjY19kYXRhX3N0cmluZyAqL0Jsb2NrLl9fKDQsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2MkMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIkcHJpbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksIGZtdCQxKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0oayQxLG8kMSxhY2MkMSxmbXQkMSxmY29udixwYWR0eSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgcCQxID0gcHJlY1swXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uKGskMSxvJDEsYWNjJDEsZm10JDEsZmNvbnYscGFkdHkscCQxKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHcsIHgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBzdHIgPSBmaXhfcGFkZGluZyhwYWR0eSwgdywgY29udmVydF9mbG9hdChmY29udiwgcCQxLCB4KSk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbWFrZV9wcmludGYoayQxLCBvJDEsIC8qIEFjY19kYXRhX3N0cmluZyAqL0Jsb2NrLl9fKDQsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjJDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0clxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksIGZtdCQxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfShrJDEsbyQxLGFjYyQxLGZtdCQxLGZjb252LHBhZHR5LHAkMSkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgdyA9IHBhZFsxXTtcbiAgICAgICAgICAgICAgdmFyIHBhZHR5JDEgPSBwYWRbMF07XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgcHJlYyA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgIGlmIChwcmVjICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uKGskMSxvJDEsYWNjJDEsZm10JDEsZmNvbnYscGFkdHkkMSx3KXtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAocCwgeCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RyID0gZml4X3BhZGRpbmcocGFkdHkkMSwgdywgY29udmVydF9mbG9hdChmY29udiwgcCwgeCkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWFrZV9wcmludGYoayQxLCBvJDEsIC8qIEFjY19kYXRhX3N0cmluZyAqL0Jsb2NrLl9fKDQsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2MkMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksIGZtdCQxKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0oayQxLG8kMSxhY2MkMSxmbXQkMSxmY29udixwYWR0eSQxLHcpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChmdW5jdGlvbihrJDEsbyQxLGFjYyQxLGZtdCQxLGZjb252LHBhZHR5JDEsdyl7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0ciA9IGNvbnZlcnRfZmxvYXQoZmNvbnYsIDYsIHgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RyJHByaW1lID0gZml4X3BhZGRpbmcocGFkdHkkMSwgdywgc3RyKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1ha2VfcHJpbnRmKGskMSwgbyQxLCAvKiBBY2NfZGF0YV9zdHJpbmcgKi9CbG9jay5fXyg0LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjJDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyJHByaW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLCBmbXQkMSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KGskMSxvJDEsYWNjJDEsZm10JDEsZmNvbnYscGFkdHkkMSx3KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBwJDIgPSBwcmVjWzBdO1xuICAgICAgICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24oayQxLG8kMSxhY2MkMSxmbXQkMSxmY29udixwYWR0eSQxLHcscCQyKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBzdHIgPSBmaXhfcGFkZGluZyhwYWR0eSQxLCB3LCBjb252ZXJ0X2Zsb2F0KGZjb252LCBwJDIsIHgpKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBtYWtlX3ByaW50ZihrJDEsIG8kMSwgLyogQWNjX2RhdGFfc3RyaW5nICovQmxvY2suX18oNCwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2MkMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwgZm10JDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KGskMSxvJDEsYWNjJDEsZm10JDEsZmNvbnYscGFkdHkkMSx3LHAkMikpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIGNhc2UgOSA6IFxuICAgICAgICAgICAgdmFyIHJlc3QkMiA9IGZtdFswXTtcbiAgICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24oayxhY2MscmVzdCQyKXtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYikge1xuICAgICAgICAgICAgICByZXR1cm4gbWFrZV9wcmludGYoaywgbywgLyogQWNjX2RhdGFfc3RyaW5nICovQmxvY2suX18oNCwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiID8gXCJ0cnVlXCIgOiBcImZhbHNlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXSksIHJlc3QkMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB9KGssYWNjLHJlc3QkMikpO1xuICAgICAgICBjYXNlIDEwIDogXG4gICAgICAgICAgICBfZm10ID0gZm10WzBdO1xuICAgICAgICAgICAgX2FjYyA9IC8qIEFjY19mbHVzaCAqL0Jsb2NrLl9fKDcsIFthY2NdKTtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgY2FzZSAxMSA6IFxuICAgICAgICAgICAgX2ZtdCA9IGZtdFsxXTtcbiAgICAgICAgICAgIF9hY2MgPSAvKiBBY2Nfc3RyaW5nX2xpdGVyYWwgKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICAgICAgYWNjLFxuICAgICAgICAgICAgICAgIGZtdFswXVxuICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgY2FzZSAxMiA6IFxuICAgICAgICAgICAgX2ZtdCA9IGZtdFsxXTtcbiAgICAgICAgICAgIF9hY2MgPSAvKiBBY2NfY2hhcl9saXRlcmFsICovQmxvY2suX18oMywgW1xuICAgICAgICAgICAgICAgIGFjYyxcbiAgICAgICAgICAgICAgICBmbXRbMF1cbiAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIGNhc2UgMTMgOiBcbiAgICAgICAgICAgIHZhciByZXN0JDMgPSBmbXRbMl07XG4gICAgICAgICAgICB2YXIgdHkgPSBzdHJpbmdfb2ZfZm10dHkoZm10WzFdKTtcbiAgICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24oayxhY2MscmVzdCQzLHR5KXtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBtYWtlX3ByaW50ZihrLCBvLCAvKiBBY2NfZGF0YV9zdHJpbmcgKi9CbG9jay5fXyg0LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5XG4gICAgICAgICAgICAgICAgICAgICAgICAgIF0pLCByZXN0JDMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgfShrLGFjYyxyZXN0JDMsdHkpKTtcbiAgICAgICAgY2FzZSAxNCA6IFxuICAgICAgICAgICAgdmFyIHJlc3QkNCA9IGZtdFsyXTtcbiAgICAgICAgICAgIHZhciBmbXR0eSA9IGZtdFsxXTtcbiAgICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24oayxhY2MsZm10dHkscmVzdCQ0KXtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG1ha2VfcHJpbnRmKGssIG8sIGFjYywgQ2FtbGludGVybmFsRm9ybWF0QmFzaWNzLmNvbmNhdF9mbXQocmVjYXN0KHBhcmFtWzBdLCBmbXR0eSksIHJlc3QkNCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgfShrLGFjYyxmbXR0eSxyZXN0JDQpKTtcbiAgICAgICAgY2FzZSAxNSA6IFxuICAgICAgICAgICAgdmFyIHJlc3QkNSA9IGZtdFswXTtcbiAgICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24oayxhY2MscmVzdCQ1KXtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZiwgeCkge1xuICAgICAgICAgICAgICByZXR1cm4gbWFrZV9wcmludGYoaywgbywgLyogQWNjX2RlbGF5ICovQmxvY2suX18oNiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8yKGYsIG8sIHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXSksIHJlc3QkNSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB9KGssYWNjLHJlc3QkNSkpO1xuICAgICAgICBjYXNlIDE2IDogXG4gICAgICAgICAgICB2YXIgcmVzdCQ2ID0gZm10WzBdO1xuICAgICAgICAgICAgcmV0dXJuIChmdW5jdGlvbihrLGFjYyxyZXN0JDYpe1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChmKSB7XG4gICAgICAgICAgICAgIHJldHVybiBtYWtlX3ByaW50ZihrLCBvLCAvKiBBY2NfZGVsYXkgKi9CbG9jay5fXyg2LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXSksIHJlc3QkNik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB9KGssYWNjLHJlc3QkNikpO1xuICAgICAgICBjYXNlIDE3IDogXG4gICAgICAgICAgICBfZm10ID0gZm10WzFdO1xuICAgICAgICAgICAgX2FjYyA9IC8qIEFjY19mb3JtYXR0aW5nX2xpdCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgICAgICBhY2MsXG4gICAgICAgICAgICAgICAgZm10WzBdXG4gICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICBjYXNlIDE4IDogXG4gICAgICAgICAgICB2YXIgbWF0Y2ggPSBmbXRbMF07XG4gICAgICAgICAgICBpZiAobWF0Y2gudGFnKSB7XG4gICAgICAgICAgICAgIHZhciByZXN0JDcgPSBmbXRbMV07XG4gICAgICAgICAgICAgIHZhciBrJHByaW1lID0gKGZ1bmN0aW9uKGssYWNjLHJlc3QkNyl7XG4gICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBrJHByaW1lKGtvYywga2FjYykge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYWtlX3ByaW50ZihrLCBrb2MsIC8qIEFjY19mb3JtYXR0aW5nX2dlbiAqL0Jsb2NrLl9fKDEsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIEFjY19vcGVuX2JveCAqL0Jsb2NrLl9fKDEsIFtrYWNjXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwgcmVzdCQ3KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KGssYWNjLHJlc3QkNykpO1xuICAgICAgICAgICAgICBfZm10ID0gbWF0Y2hbMF1bMF07XG4gICAgICAgICAgICAgIF9hY2MgPSAvKiBFbmRfb2ZfYWNjICovMDtcbiAgICAgICAgICAgICAgX2sgPSBrJHByaW1lO1xuICAgICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgcmVzdCQ4ID0gZm10WzFdO1xuICAgICAgICAgICAgICB2YXIgayRwcmltZSQxID0gKGZ1bmN0aW9uKGssYWNjLHJlc3QkOCl7XG4gICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBrJHByaW1lJDEoa29jLCBrYWNjKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1ha2VfcHJpbnRmKGssIGtvYywgLyogQWNjX2Zvcm1hdHRpbmdfZ2VuICovQmxvY2suX18oMSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogQWNjX29wZW5fdGFnICovQmxvY2suX18oMCwgW2thY2NdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLCByZXN0JDgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0oayxhY2MscmVzdCQ4KSk7XG4gICAgICAgICAgICAgIF9mbXQgPSBtYXRjaFswXVswXTtcbiAgICAgICAgICAgICAgX2FjYyA9IC8qIEVuZF9vZl9hY2MgKi8wO1xuICAgICAgICAgICAgICBfayA9IGskcHJpbWUkMTtcbiAgICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgICAgfVxuICAgICAgICBjYXNlIDE5IDogXG4gICAgICAgICAgICB0aHJvdyBbXG4gICAgICAgICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5hc3NlcnRfZmFpbHVyZSxcbiAgICAgICAgICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICBcImNhbWxpbnRlcm5hbEZvcm1hdC5tbFwiLFxuICAgICAgICAgICAgICAgICAgICAxNDQ5LFxuICAgICAgICAgICAgICAgICAgICA0XG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgY2FzZSAyMCA6IFxuICAgICAgICAgICAgdmFyIHJlc3QkOSA9IGZtdFsyXTtcbiAgICAgICAgICAgIHZhciBuZXdfYWNjID0gLyogQWNjX2ludmFsaWRfYXJnICovQmxvY2suX18oOCwgW1xuICAgICAgICAgICAgICAgIGFjYyxcbiAgICAgICAgICAgICAgICBcIlByaW50ZjogYmFkIGNvbnZlcnNpb24gJVtcIlxuICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24oayxyZXN0JDksbmV3X2FjYyl7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgIHJldHVybiBtYWtlX3ByaW50ZihrLCBvLCBuZXdfYWNjLCByZXN0JDkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgfShrLHJlc3QkOSxuZXdfYWNjKSk7XG4gICAgICAgIGNhc2UgMjEgOiBcbiAgICAgICAgICAgIHZhciByZXN0JDEwID0gZm10WzFdO1xuICAgICAgICAgICAgcmV0dXJuIChmdW5jdGlvbihrLGFjYyxyZXN0JDEwKXtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgICB2YXIgbmV3X2FjY18wMDEgPSBDYW1sX2Zvcm1hdC5jYW1sX2Zvcm1hdF9pbnQoXCIldVwiLCBuKTtcbiAgICAgICAgICAgICAgdmFyIG5ld19hY2MgPSAvKiBBY2NfZGF0YV9zdHJpbmcgKi9CbG9jay5fXyg0LCBbXG4gICAgICAgICAgICAgICAgICBhY2MsXG4gICAgICAgICAgICAgICAgICBuZXdfYWNjXzAwMVxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICByZXR1cm4gbWFrZV9wcmludGYoaywgbywgbmV3X2FjYywgcmVzdCQxMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB9KGssYWNjLHJlc3QkMTApKTtcbiAgICAgICAgY2FzZSAyMiA6IFxuICAgICAgICAgICAgdmFyIHJlc3QkMTEgPSBmbXRbMF07XG4gICAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uKGssYWNjLHJlc3QkMTEpe1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICAgIHZhciBuZXdfYWNjID0gLyogQWNjX2RhdGFfY2hhciAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgICAgICAgIGFjYyxcbiAgICAgICAgICAgICAgICAgIGNcbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgcmV0dXJuIG1ha2VfcHJpbnRmKGssIG8sIG5ld19hY2MsIHJlc3QkMTEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgfShrLGFjYyxyZXN0JDExKSk7XG4gICAgICAgIGNhc2UgMjMgOiBcbiAgICAgICAgICAgIHZhciBrJDIgPSBrO1xuICAgICAgICAgICAgdmFyIG8kMiA9IG87XG4gICAgICAgICAgICB2YXIgYWNjJDIgPSBhY2M7XG4gICAgICAgICAgICB2YXIgaWduID0gZm10WzBdO1xuICAgICAgICAgICAgdmFyIGZtdCQyID0gZm10WzFdO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpZ24gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgaWYgKGlnbiA9PT0gMykge1xuICAgICAgICAgICAgICAgIHRocm93IFtcbiAgICAgICAgICAgICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5hc3NlcnRfZmFpbHVyZSxcbiAgICAgICAgICAgICAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY2FtbGludGVybmFsRm9ybWF0Lm1sXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAxNTE3LFxuICAgICAgICAgICAgICAgICAgICAgICAgMzlcbiAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1ha2VfaW52YWxpZF9hcmcoayQyLCBvJDIsIGFjYyQyLCBmbXQkMik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaWduLnRhZyA9PT0gOCkge1xuICAgICAgICAgICAgICByZXR1cm4gbWFrZV9mcm9tX2ZtdHR5KGskMiwgbyQyLCBhY2MkMiwgaWduWzFdLCBmbXQkMik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gbWFrZV9pbnZhbGlkX2FyZyhrJDIsIG8kMiwgYWNjJDIsIGZtdCQyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAyNCA6IFxuICAgICAgICAgICAgcmV0dXJuIG1ha2VfY3VzdG9tKGssIG8sIGFjYywgZm10WzJdLCBmbXRbMF0sIEN1cnJ5Ll8xKGZtdFsxXSwgLyogKCkgKi8wKSk7XG4gICAgICAgIFxuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gbWFrZV9mcm9tX2ZtdHR5KGssIG8sIGFjYywgZm10dHksIGZtdCkge1xuICBpZiAodHlwZW9mIGZtdHR5ID09PSBcIm51bWJlclwiKSB7XG4gICAgcmV0dXJuIG1ha2VfaW52YWxpZF9hcmcoaywgbywgYWNjLCBmbXQpO1xuICB9IGVsc2Uge1xuICAgIHN3aXRjaCAoZm10dHkudGFnIHwgMCkge1xuICAgICAgY2FzZSAwIDogXG4gICAgICAgICAgdmFyIHJlc3QgPSBmbXR0eVswXTtcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICByZXR1cm4gbWFrZV9mcm9tX2ZtdHR5KGssIG8sIGFjYywgcmVzdCwgZm10KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgY2FzZSAxIDogXG4gICAgICAgICAgdmFyIHJlc3QkMSA9IGZtdHR5WzBdO1xuICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgIHJldHVybiBtYWtlX2Zyb21fZm10dHkoaywgbywgYWNjLCByZXN0JDEsIGZtdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgIGNhc2UgMiA6IFxuICAgICAgICAgIHZhciByZXN0JDIgPSBmbXR0eVswXTtcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICByZXR1cm4gbWFrZV9mcm9tX2ZtdHR5KGssIG8sIGFjYywgcmVzdCQyLCBmbXQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICBjYXNlIDMgOiBcbiAgICAgICAgICB2YXIgcmVzdCQzID0gZm10dHlbMF07XG4gICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG1ha2VfZnJvbV9mbXR0eShrLCBvLCBhY2MsIHJlc3QkMywgZm10KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgY2FzZSA0IDogXG4gICAgICAgICAgdmFyIHJlc3QkNCA9IGZtdHR5WzBdO1xuICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgIHJldHVybiBtYWtlX2Zyb21fZm10dHkoaywgbywgYWNjLCByZXN0JDQsIGZtdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgIGNhc2UgNSA6IFxuICAgICAgICAgIHZhciByZXN0JDUgPSBmbXR0eVswXTtcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICByZXR1cm4gbWFrZV9mcm9tX2ZtdHR5KGssIG8sIGFjYywgcmVzdCQ1LCBmbXQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICBjYXNlIDYgOiBcbiAgICAgICAgICB2YXIgcmVzdCQ2ID0gZm10dHlbMF07XG4gICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG1ha2VfZnJvbV9mbXR0eShrLCBvLCBhY2MsIHJlc3QkNiwgZm10KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgY2FzZSA3IDogXG4gICAgICAgICAgdmFyIHJlc3QkNyA9IGZtdHR5WzBdO1xuICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgIHJldHVybiBtYWtlX2Zyb21fZm10dHkoaywgbywgYWNjLCByZXN0JDcsIGZtdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgIGNhc2UgOCA6IFxuICAgICAgICAgIHZhciByZXN0JDggPSBmbXR0eVsxXTtcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICByZXR1cm4gbWFrZV9mcm9tX2ZtdHR5KGssIG8sIGFjYywgcmVzdCQ4LCBmbXQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICBjYXNlIDkgOiBcbiAgICAgICAgICB2YXIgcmVzdCQ5ID0gZm10dHlbMl07XG4gICAgICAgICAgdmFyIHR5ID0gdHJhbnMoc3ltbShmbXR0eVswXSksIGZtdHR5WzFdKTtcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICByZXR1cm4gbWFrZV9mcm9tX2ZtdHR5KGssIG8sIGFjYywgQ2FtbGludGVybmFsRm9ybWF0QmFzaWNzLmNvbmNhdF9mbXR0eSh0eSwgcmVzdCQ5KSwgZm10KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgY2FzZSAxMCA6IFxuICAgICAgICAgIHZhciByZXN0JDEwID0gZm10dHlbMF07XG4gICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0sIHBhcmFtJDEpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG1ha2VfZnJvbV9mbXR0eShrLCBvLCBhY2MsIHJlc3QkMTAsIGZtdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgIGNhc2UgMTEgOiBcbiAgICAgICAgICB2YXIgcmVzdCQxMSA9IGZtdHR5WzBdO1xuICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgIHJldHVybiBtYWtlX2Zyb21fZm10dHkoaywgbywgYWNjLCByZXN0JDExLCBmbXQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICBjYXNlIDEyIDogXG4gICAgICAgICAgdmFyIHJlc3QkMTIgPSBmbXR0eVswXTtcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICByZXR1cm4gbWFrZV9mcm9tX2ZtdHR5KGssIG8sIGFjYywgcmVzdCQxMiwgZm10KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgY2FzZSAxMyA6IFxuICAgICAgICAgIHRocm93IFtcbiAgICAgICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5hc3NlcnRfZmFpbHVyZSxcbiAgICAgICAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgIFwiY2FtbGludGVybmFsRm9ybWF0Lm1sXCIsXG4gICAgICAgICAgICAgICAgICAxNTQwLFxuICAgICAgICAgICAgICAgICAgMzFcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgIF07XG4gICAgICBjYXNlIDE0IDogXG4gICAgICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmFzc2VydF9mYWlsdXJlLFxuICAgICAgICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgXCJjYW1saW50ZXJuYWxGb3JtYXQubWxcIixcbiAgICAgICAgICAgICAgICAgIDE1NDEsXG4gICAgICAgICAgICAgICAgICAzMVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgXTtcbiAgICAgIFxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtYWtlX2ludmFsaWRfYXJnKGssIG8sIGFjYywgZm10KSB7XG4gIHJldHVybiBtYWtlX3ByaW50ZihrLCBvLCAvKiBBY2NfaW52YWxpZF9hcmcgKi9CbG9jay5fXyg4LCBbXG4gICAgICAgICAgICAgICAgYWNjLFxuICAgICAgICAgICAgICAgIFwiUHJpbnRmOiBiYWQgY29udmVyc2lvbiAlX1wiXG4gICAgICAgICAgICAgIF0pLCBmbXQpO1xufVxuXG5mdW5jdGlvbiBtYWtlX3N0cmluZ19wYWRkaW5nKGssIG8sIGFjYywgZm10LCBwYWQsIHRyYW5zKSB7XG4gIGlmICh0eXBlb2YgcGFkID09PSBcIm51bWJlclwiKSB7XG4gICAgcmV0dXJuIChmdW5jdGlvbiAoeCkge1xuICAgICAgICB2YXIgbmV3X2FjY18wMDEgPSBDdXJyeS5fMSh0cmFucywgeCk7XG4gICAgICAgIHZhciBuZXdfYWNjID0gLyogQWNjX2RhdGFfc3RyaW5nICovQmxvY2suX18oNCwgW1xuICAgICAgICAgICAgYWNjLFxuICAgICAgICAgICAgbmV3X2FjY18wMDFcbiAgICAgICAgICBdKTtcbiAgICAgICAgcmV0dXJuIG1ha2VfcHJpbnRmKGssIG8sIG5ld19hY2MsIGZtdCk7XG4gICAgICB9KTtcbiAgfSBlbHNlIGlmIChwYWQudGFnKSB7XG4gICAgdmFyIHBhZHR5ID0gcGFkWzBdO1xuICAgIHJldHVybiAoZnVuY3Rpb24gKHcsIHgpIHtcbiAgICAgICAgdmFyIG5ld19hY2NfMDAxID0gZml4X3BhZGRpbmcocGFkdHksIHcsIEN1cnJ5Ll8xKHRyYW5zLCB4KSk7XG4gICAgICAgIHZhciBuZXdfYWNjID0gLyogQWNjX2RhdGFfc3RyaW5nICovQmxvY2suX18oNCwgW1xuICAgICAgICAgICAgYWNjLFxuICAgICAgICAgICAgbmV3X2FjY18wMDFcbiAgICAgICAgICBdKTtcbiAgICAgICAgcmV0dXJuIG1ha2VfcHJpbnRmKGssIG8sIG5ld19hY2MsIGZtdCk7XG4gICAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgd2lkdGggPSBwYWRbMV07XG4gICAgdmFyIHBhZHR5JDEgPSBwYWRbMF07XG4gICAgcmV0dXJuIChmdW5jdGlvbiAoeCkge1xuICAgICAgICB2YXIgbmV3X2FjY18wMDEgPSBmaXhfcGFkZGluZyhwYWR0eSQxLCB3aWR0aCwgQ3VycnkuXzEodHJhbnMsIHgpKTtcbiAgICAgICAgdmFyIG5ld19hY2MgPSAvKiBBY2NfZGF0YV9zdHJpbmcgKi9CbG9jay5fXyg0LCBbXG4gICAgICAgICAgICBhY2MsXG4gICAgICAgICAgICBuZXdfYWNjXzAwMVxuICAgICAgICAgIF0pO1xuICAgICAgICByZXR1cm4gbWFrZV9wcmludGYoaywgbywgbmV3X2FjYywgZm10KTtcbiAgICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VfaW50X3BhZGRpbmdfcHJlY2lzaW9uKGssIG8sIGFjYywgZm10LCBwYWQsIHByZWMsIHRyYW5zLCBpY29udikge1xuICBpZiAodHlwZW9mIHBhZCA9PT0gXCJudW1iZXJcIikge1xuICAgIGlmICh0eXBlb2YgcHJlYyA9PT0gXCJudW1iZXJcIikge1xuICAgICAgaWYgKHByZWMgIT09IDApIHtcbiAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocCwgeCkge1xuICAgICAgICAgICAgdmFyIHN0ciA9IGZpeF9pbnRfcHJlY2lzaW9uKHAsIEN1cnJ5Ll8yKHRyYW5zLCBpY29udiwgeCkpO1xuICAgICAgICAgICAgcmV0dXJuIG1ha2VfcHJpbnRmKGssIG8sIC8qIEFjY19kYXRhX3N0cmluZyAqL0Jsb2NrLl9fKDQsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLCBmbXQpO1xuICAgICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgdmFyIHN0ciA9IEN1cnJ5Ll8yKHRyYW5zLCBpY29udiwgeCk7XG4gICAgICAgICAgICByZXR1cm4gbWFrZV9wcmludGYoaywgbywgLyogQWNjX2RhdGFfc3RyaW5nICovQmxvY2suX18oNCwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhY2MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHN0clxuICAgICAgICAgICAgICAgICAgICAgICAgXSksIGZtdCk7XG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwID0gcHJlY1swXTtcbiAgICAgIHJldHVybiAoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICB2YXIgc3RyID0gZml4X2ludF9wcmVjaXNpb24ocCwgQ3VycnkuXzIodHJhbnMsIGljb252LCB4KSk7XG4gICAgICAgICAgcmV0dXJuIG1ha2VfcHJpbnRmKGssIG8sIC8qIEFjY19kYXRhX3N0cmluZyAqL0Jsb2NrLl9fKDQsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjYyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0clxuICAgICAgICAgICAgICAgICAgICAgIF0pLCBmbXQpO1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocGFkLnRhZykge1xuICAgIHZhciBwYWR0eSA9IHBhZFswXTtcbiAgICBpZiAodHlwZW9mIHByZWMgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIGlmIChwcmVjICE9PSAwKSB7XG4gICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHcsIHAsIHgpIHtcbiAgICAgICAgICAgIHZhciBzdHIgPSBmaXhfcGFkZGluZyhwYWR0eSwgdywgZml4X2ludF9wcmVjaXNpb24ocCwgQ3VycnkuXzIodHJhbnMsIGljb252LCB4KSkpO1xuICAgICAgICAgICAgcmV0dXJuIG1ha2VfcHJpbnRmKGssIG8sIC8qIEFjY19kYXRhX3N0cmluZyAqL0Jsb2NrLl9fKDQsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLCBmbXQpO1xuICAgICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAodywgeCkge1xuICAgICAgICAgICAgdmFyIHN0ciA9IGZpeF9wYWRkaW5nKHBhZHR5LCB3LCBDdXJyeS5fMih0cmFucywgaWNvbnYsIHgpKTtcbiAgICAgICAgICAgIHJldHVybiBtYWtlX3ByaW50ZihrLCBvLCAvKiBBY2NfZGF0YV9zdHJpbmcgKi9CbG9jay5fXyg0LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGFjYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSwgZm10KTtcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHAkMSA9IHByZWNbMF07XG4gICAgICByZXR1cm4gKGZ1bmN0aW9uICh3LCB4KSB7XG4gICAgICAgICAgdmFyIHN0ciA9IGZpeF9wYWRkaW5nKHBhZHR5LCB3LCBmaXhfaW50X3ByZWNpc2lvbihwJDEsIEN1cnJ5Ll8yKHRyYW5zLCBpY29udiwgeCkpKTtcbiAgICAgICAgICByZXR1cm4gbWFrZV9wcmludGYoaywgbywgLyogQWNjX2RhdGFfc3RyaW5nICovQmxvY2suX18oNCwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgYWNjLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyXG4gICAgICAgICAgICAgICAgICAgICAgXSksIGZtdCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgdyA9IHBhZFsxXTtcbiAgICB2YXIgcGFkdHkkMSA9IHBhZFswXTtcbiAgICBpZiAodHlwZW9mIHByZWMgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIGlmIChwcmVjICE9PSAwKSB7XG4gICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHAsIHgpIHtcbiAgICAgICAgICAgIHZhciBzdHIgPSBmaXhfcGFkZGluZyhwYWR0eSQxLCB3LCBmaXhfaW50X3ByZWNpc2lvbihwLCBDdXJyeS5fMih0cmFucywgaWNvbnYsIHgpKSk7XG4gICAgICAgICAgICByZXR1cm4gbWFrZV9wcmludGYoaywgbywgLyogQWNjX2RhdGFfc3RyaW5nICovQmxvY2suX18oNCwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhY2MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHN0clxuICAgICAgICAgICAgICAgICAgICAgICAgXSksIGZtdCk7XG4gICAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICB2YXIgc3RyID0gZml4X3BhZGRpbmcocGFkdHkkMSwgdywgQ3VycnkuXzIodHJhbnMsIGljb252LCB4KSk7XG4gICAgICAgICAgICByZXR1cm4gbWFrZV9wcmludGYoaywgbywgLyogQWNjX2RhdGFfc3RyaW5nICovQmxvY2suX18oNCwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhY2MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHN0clxuICAgICAgICAgICAgICAgICAgICAgICAgXSksIGZtdCk7XG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwJDIgPSBwcmVjWzBdO1xuICAgICAgcmV0dXJuIChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgIHZhciBzdHIgPSBmaXhfcGFkZGluZyhwYWR0eSQxLCB3LCBmaXhfaW50X3ByZWNpc2lvbihwJDIsIEN1cnJ5Ll8yKHRyYW5zLCBpY29udiwgeCkpKTtcbiAgICAgICAgICByZXR1cm4gbWFrZV9wcmludGYoaywgbywgLyogQWNjX2RhdGFfc3RyaW5nICovQmxvY2suX18oNCwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgYWNjLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyXG4gICAgICAgICAgICAgICAgICAgICAgXSksIGZtdCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtYWtlX2N1c3RvbShrLCBvLCBhY2MsIHJlc3QsIGFyaXR5LCBmKSB7XG4gIGlmIChhcml0eSkge1xuICAgIHZhciBhcml0eSQxID0gYXJpdHlbMF07XG4gICAgcmV0dXJuIChmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4gbWFrZV9jdXN0b20oaywgbywgYWNjLCByZXN0LCBhcml0eSQxLCBDdXJyeS5fMShmLCB4KSk7XG4gICAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbWFrZV9wcmludGYoaywgbywgLyogQWNjX2RhdGFfc3RyaW5nICovQmxvY2suX18oNCwgW1xuICAgICAgICAgICAgICAgICAgYWNjLFxuICAgICAgICAgICAgICAgICAgZlxuICAgICAgICAgICAgICAgIF0pLCByZXN0KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBvdXRwdXRfYWNjKG8sIF9hY2MpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBhY2MgPSBfYWNjO1xuICAgIHZhciBleGl0ID0gMDtcbiAgICBpZiAodHlwZW9mIGFjYyA9PT0gXCJudW1iZXJcIikge1xuICAgICAgcmV0dXJuIC8qICgpICovMDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpdGNoIChhY2MudGFnIHwgMCkge1xuICAgICAgICBjYXNlIDAgOiBcbiAgICAgICAgICAgIHZhciBzID0gc3RyaW5nX29mX2Zvcm1hdHRpbmdfbGl0KGFjY1sxXSk7XG4gICAgICAgICAgICBvdXRwdXRfYWNjKG8sIGFjY1swXSk7XG4gICAgICAgICAgICByZXR1cm4gUGVydmFzaXZlcy5vdXRwdXRfc3RyaW5nKG8sIHMpO1xuICAgICAgICBjYXNlIDEgOiBcbiAgICAgICAgICAgIHZhciBtYXRjaCA9IGFjY1sxXTtcbiAgICAgICAgICAgIHZhciBwID0gYWNjWzBdO1xuICAgICAgICAgICAgb3V0cHV0X2FjYyhvLCBwKTtcbiAgICAgICAgICAgIGlmIChtYXRjaC50YWcpIHtcbiAgICAgICAgICAgICAgUGVydmFzaXZlcy5vdXRwdXRfc3RyaW5nKG8sIFwiQFtcIik7XG4gICAgICAgICAgICAgIF9hY2MgPSBtYXRjaFswXTtcbiAgICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgUGVydmFzaXZlcy5vdXRwdXRfc3RyaW5nKG8sIFwiQHtcIik7XG4gICAgICAgICAgICAgIF9hY2MgPSBtYXRjaFswXTtcbiAgICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgICAgfVxuICAgICAgICBjYXNlIDIgOiBcbiAgICAgICAgY2FzZSA0IDogXG4gICAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDMgOiBcbiAgICAgICAgY2FzZSA1IDogXG4gICAgICAgICAgICBleGl0ID0gMjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDYgOiBcbiAgICAgICAgICAgIG91dHB1dF9hY2MobywgYWNjWzBdKTtcbiAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShhY2NbMV0sIG8pO1xuICAgICAgICBjYXNlIDcgOiBcbiAgICAgICAgICAgIG91dHB1dF9hY2MobywgYWNjWzBdKTtcbiAgICAgICAgICAgIHJldHVybiBDYW1sX2lvLmNhbWxfbWxfZmx1c2gobyk7XG4gICAgICAgIGNhc2UgOCA6IFxuICAgICAgICAgICAgb3V0cHV0X2FjYyhvLCBhY2NbMF0pO1xuICAgICAgICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICAgICAgICAgIGFjY1sxXVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgIFxuICAgICAgfVxuICAgIH1cbiAgICBzd2l0Y2ggKGV4aXQpIHtcbiAgICAgIGNhc2UgMSA6IFxuICAgICAgICAgIG91dHB1dF9hY2MobywgYWNjWzBdKTtcbiAgICAgICAgICByZXR1cm4gUGVydmFzaXZlcy5vdXRwdXRfc3RyaW5nKG8sIGFjY1sxXSk7XG4gICAgICBjYXNlIDIgOiBcbiAgICAgICAgICBvdXRwdXRfYWNjKG8sIGFjY1swXSk7XG4gICAgICAgICAgcmV0dXJuIENhbWxfaW8uY2FtbF9tbF9vdXRwdXRfY2hhcihvLCBhY2NbMV0pO1xuICAgICAgXG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBidWZwdXRfYWNjKGIsIF9hY2MpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBhY2MgPSBfYWNjO1xuICAgIHZhciBleGl0ID0gMDtcbiAgICBpZiAodHlwZW9mIGFjYyA9PT0gXCJudW1iZXJcIikge1xuICAgICAgcmV0dXJuIC8qICgpICovMDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpdGNoIChhY2MudGFnIHwgMCkge1xuICAgICAgICBjYXNlIDAgOiBcbiAgICAgICAgICAgIHZhciBzID0gc3RyaW5nX29mX2Zvcm1hdHRpbmdfbGl0KGFjY1sxXSk7XG4gICAgICAgICAgICBidWZwdXRfYWNjKGIsIGFjY1swXSk7XG4gICAgICAgICAgICByZXR1cm4gJCRCdWZmZXIuYWRkX3N0cmluZyhiLCBzKTtcbiAgICAgICAgY2FzZSAxIDogXG4gICAgICAgICAgICB2YXIgbWF0Y2ggPSBhY2NbMV07XG4gICAgICAgICAgICB2YXIgcCA9IGFjY1swXTtcbiAgICAgICAgICAgIGJ1ZnB1dF9hY2MoYiwgcCk7XG4gICAgICAgICAgICBpZiAobWF0Y2gudGFnKSB7XG4gICAgICAgICAgICAgICQkQnVmZmVyLmFkZF9zdHJpbmcoYiwgXCJAW1wiKTtcbiAgICAgICAgICAgICAgX2FjYyA9IG1hdGNoWzBdO1xuICAgICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAkJEJ1ZmZlci5hZGRfc3RyaW5nKGIsIFwiQHtcIik7XG4gICAgICAgICAgICAgIF9hY2MgPSBtYXRjaFswXTtcbiAgICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgICAgfVxuICAgICAgICBjYXNlIDIgOiBcbiAgICAgICAgY2FzZSA0IDogXG4gICAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDMgOiBcbiAgICAgICAgY2FzZSA1IDogXG4gICAgICAgICAgICBleGl0ID0gMjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDYgOiBcbiAgICAgICAgICAgIGJ1ZnB1dF9hY2MoYiwgYWNjWzBdKTtcbiAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShhY2NbMV0sIGIpO1xuICAgICAgICBjYXNlIDcgOiBcbiAgICAgICAgICAgIF9hY2MgPSBhY2NbMF07XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIGNhc2UgOCA6IFxuICAgICAgICAgICAgYnVmcHV0X2FjYyhiLCBhY2NbMF0pO1xuICAgICAgICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICAgICAgICAgIGFjY1sxXVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgIFxuICAgICAgfVxuICAgIH1cbiAgICBzd2l0Y2ggKGV4aXQpIHtcbiAgICAgIGNhc2UgMSA6IFxuICAgICAgICAgIGJ1ZnB1dF9hY2MoYiwgYWNjWzBdKTtcbiAgICAgICAgICByZXR1cm4gJCRCdWZmZXIuYWRkX3N0cmluZyhiLCBhY2NbMV0pO1xuICAgICAgY2FzZSAyIDogXG4gICAgICAgICAgYnVmcHV0X2FjYyhiLCBhY2NbMF0pO1xuICAgICAgICAgIHJldHVybiAkJEJ1ZmZlci5hZGRfY2hhcihiLCBhY2NbMV0pO1xuICAgICAgXG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBzdHJwdXRfYWNjKGIsIF9hY2MpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBhY2MgPSBfYWNjO1xuICAgIHZhciBleGl0ID0gMDtcbiAgICBpZiAodHlwZW9mIGFjYyA9PT0gXCJudW1iZXJcIikge1xuICAgICAgcmV0dXJuIC8qICgpICovMDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpdGNoIChhY2MudGFnIHwgMCkge1xuICAgICAgICBjYXNlIDAgOiBcbiAgICAgICAgICAgIHZhciBzID0gc3RyaW5nX29mX2Zvcm1hdHRpbmdfbGl0KGFjY1sxXSk7XG4gICAgICAgICAgICBzdHJwdXRfYWNjKGIsIGFjY1swXSk7XG4gICAgICAgICAgICByZXR1cm4gJCRCdWZmZXIuYWRkX3N0cmluZyhiLCBzKTtcbiAgICAgICAgY2FzZSAxIDogXG4gICAgICAgICAgICB2YXIgbWF0Y2ggPSBhY2NbMV07XG4gICAgICAgICAgICB2YXIgcCA9IGFjY1swXTtcbiAgICAgICAgICAgIHN0cnB1dF9hY2MoYiwgcCk7XG4gICAgICAgICAgICBpZiAobWF0Y2gudGFnKSB7XG4gICAgICAgICAgICAgICQkQnVmZmVyLmFkZF9zdHJpbmcoYiwgXCJAW1wiKTtcbiAgICAgICAgICAgICAgX2FjYyA9IG1hdGNoWzBdO1xuICAgICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAkJEJ1ZmZlci5hZGRfc3RyaW5nKGIsIFwiQHtcIik7XG4gICAgICAgICAgICAgIF9hY2MgPSBtYXRjaFswXTtcbiAgICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgICAgfVxuICAgICAgICBjYXNlIDIgOiBcbiAgICAgICAgY2FzZSA0IDogXG4gICAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDMgOiBcbiAgICAgICAgY2FzZSA1IDogXG4gICAgICAgICAgICBleGl0ID0gMjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDYgOiBcbiAgICAgICAgICAgIHN0cnB1dF9hY2MoYiwgYWNjWzBdKTtcbiAgICAgICAgICAgIHJldHVybiAkJEJ1ZmZlci5hZGRfc3RyaW5nKGIsIEN1cnJ5Ll8xKGFjY1sxXSwgLyogKCkgKi8wKSk7XG4gICAgICAgIGNhc2UgNyA6IFxuICAgICAgICAgICAgX2FjYyA9IGFjY1swXTtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgY2FzZSA4IDogXG4gICAgICAgICAgICBzdHJwdXRfYWNjKGIsIGFjY1swXSk7XG4gICAgICAgICAgICB0aHJvdyBbXG4gICAgICAgICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgICAgICAgICAgYWNjWzFdXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgXG4gICAgICB9XG4gICAgfVxuICAgIHN3aXRjaCAoZXhpdCkge1xuICAgICAgY2FzZSAxIDogXG4gICAgICAgICAgc3RycHV0X2FjYyhiLCBhY2NbMF0pO1xuICAgICAgICAgIHJldHVybiAkJEJ1ZmZlci5hZGRfc3RyaW5nKGIsIGFjY1sxXSk7XG4gICAgICBjYXNlIDIgOiBcbiAgICAgICAgICBzdHJwdXRfYWNjKGIsIGFjY1swXSk7XG4gICAgICAgICAgcmV0dXJuICQkQnVmZmVyLmFkZF9jaGFyKGIsIGFjY1sxXSk7XG4gICAgICBcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZhaWx3aXRoX21lc3NhZ2UocGFyYW0pIHtcbiAgdmFyIGJ1ZiA9ICQkQnVmZmVyLmNyZWF0ZSgyNTYpO1xuICB2YXIgayA9IGZ1bmN0aW9uIChwYXJhbSwgYWNjKSB7XG4gICAgc3RycHV0X2FjYyhidWYsIGFjYyk7XG4gICAgdmFyIHMgPSAkJEJ1ZmZlci5jb250ZW50cyhidWYpO1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5mYWlsdXJlLFxuICAgICAgICAgIHNcbiAgICAgICAgXTtcbiAgfTtcbiAgcmV0dXJuIG1ha2VfcHJpbnRmKGssIC8qICgpICovMCwgLyogRW5kX29mX2FjYyAqLzAsIHBhcmFtWzBdKTtcbn1cblxuZnVuY3Rpb24gb3Blbl9ib3hfb2Zfc3RyaW5nKHN0cikge1xuICBpZiAoc3RyID09PSBcIlwiKSB7XG4gICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIC8qIFBwX2JveCAqLzRcbiAgICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHZhciBsZW4gPSBzdHIubGVuZ3RoO1xuICAgIHZhciBpbnZhbGlkX2JveCA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8xKGZhaWx3aXRoX21lc3NhZ2UoLyogRm9ybWF0ICovW1xuICAgICAgICAgICAgICAgICAgICAgIC8qIFN0cmluZ19saXRlcmFsICovQmxvY2suX18oMTEsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpbnZhbGlkIGJveCBkZXNjcmlwdGlvbiBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogQ2FtbF9zdHJpbmcgKi9CbG9jay5fXygzLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBOb19wYWRkaW5nICovMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIEVuZF9vZl9mb3JtYXQgKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgIFwiaW52YWxpZCBib3ggZGVzY3JpcHRpb24gJVNcIlxuICAgICAgICAgICAgICAgICAgICBdKSwgc3RyKTtcbiAgICB9O1xuICAgIHZhciBwYXJzZV9zcGFjZXMgPSBmdW5jdGlvbiAoX2kpIHtcbiAgICAgIHdoaWxlKHRydWUpIHtcbiAgICAgICAgdmFyIGkgPSBfaTtcbiAgICAgICAgaWYgKGkgPT09IGxlbikge1xuICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBtYXRjaCA9IENhbWxfc3RyaW5nLmdldChzdHIsIGkpO1xuICAgICAgICAgIGlmIChtYXRjaCAhPT0gOSkge1xuICAgICAgICAgICAgaWYgKG1hdGNoICE9PSAzMikge1xuICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICAgIHZhciBwYXJzZV9sd29yZCA9IGZ1bmN0aW9uIChpLCBfaikge1xuICAgICAgd2hpbGUodHJ1ZSkge1xuICAgICAgICB2YXIgaiA9IF9qO1xuICAgICAgICBpZiAoaiA9PT0gbGVuKSB7XG4gICAgICAgICAgcmV0dXJuIGo7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gQ2FtbF9zdHJpbmcuZ2V0KHN0ciwgaik7XG4gICAgICAgICAgaWYgKG1hdGNoID4gMTIyIHx8IG1hdGNoIDwgOTcpIHtcbiAgICAgICAgICAgIHJldHVybiBqO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfaiA9IGogKyAxIHwgMDtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcbiAgICB2YXIgcGFyc2VfaW50ID0gZnVuY3Rpb24gKGksIF9qKSB7XG4gICAgICB3aGlsZSh0cnVlKSB7XG4gICAgICAgIHZhciBqID0gX2o7XG4gICAgICAgIGlmIChqID09PSBsZW4pIHtcbiAgICAgICAgICByZXR1cm4gajtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBDYW1sX3N0cmluZy5nZXQoc3RyLCBqKTtcbiAgICAgICAgICBpZiAobWF0Y2ggPj0gNDgpIHtcbiAgICAgICAgICAgIGlmIChtYXRjaCA+PSA1OCkge1xuICAgICAgICAgICAgICByZXR1cm4gajtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIF9qID0gaiArIDEgfCAwO1xuICAgICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChtYXRjaCAhPT0gNDUpIHtcbiAgICAgICAgICAgIHJldHVybiBqO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfaiA9IGogKyAxIHwgMDtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcbiAgICB2YXIgd3N0YXJ0ID0gcGFyc2Vfc3BhY2VzKDApO1xuICAgIHZhciB3ZW5kID0gcGFyc2VfbHdvcmQod3N0YXJ0LCB3c3RhcnQpO1xuICAgIHZhciBib3hfbmFtZSA9ICQkU3RyaW5nLnN1YihzdHIsIHdzdGFydCwgd2VuZCAtIHdzdGFydCB8IDApO1xuICAgIHZhciBuc3RhcnQgPSBwYXJzZV9zcGFjZXMod2VuZCk7XG4gICAgdmFyIG5lbmQgPSBwYXJzZV9pbnQobnN0YXJ0LCBuc3RhcnQpO1xuICAgIHZhciBpbmRlbnQ7XG4gICAgaWYgKG5zdGFydCA9PT0gbmVuZCkge1xuICAgICAgaW5kZW50ID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaW5kZW50ID0gQ2FtbF9mb3JtYXQuY2FtbF9pbnRfb2Zfc3RyaW5nKCQkU3RyaW5nLnN1YihzdHIsIG5zdGFydCwgbmVuZCAtIG5zdGFydCB8IDApKTtcbiAgICAgIH1cbiAgICAgIGNhdGNoIChyYXdfZXhuKXtcbiAgICAgICAgdmFyIGV4biA9IENhbWxfanNfZXhjZXB0aW9ucy5pbnRlcm5hbFRvT0NhbWxFeGNlcHRpb24ocmF3X2V4bik7XG4gICAgICAgIGlmIChleG5bMF0gPT09IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmZhaWx1cmUpIHtcbiAgICAgICAgICBpbmRlbnQgPSBpbnZhbGlkX2JveCgvKiAoKSAqLzApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IGV4bjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB2YXIgZXhwX2VuZCA9IHBhcnNlX3NwYWNlcyhuZW5kKTtcbiAgICBpZiAoZXhwX2VuZCAhPT0gbGVuKSB7XG4gICAgICBpbnZhbGlkX2JveCgvKiAoKSAqLzApO1xuICAgIH1cbiAgICB2YXIgYm94X3R5cGU7XG4gICAgc3dpdGNoIChib3hfbmFtZSkge1xuICAgICAgY2FzZSBcIlwiIDogXG4gICAgICBjYXNlIFwiYlwiIDogXG4gICAgICAgICAgYm94X3R5cGUgPSAvKiBQcF9ib3ggKi80O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImhcIiA6IFxuICAgICAgICAgIGJveF90eXBlID0gLyogUHBfaGJveCAqLzA7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiaG92XCIgOiBcbiAgICAgICAgICBib3hfdHlwZSA9IC8qIFBwX2hvdmJveCAqLzM7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiaHZcIiA6IFxuICAgICAgICAgIGJveF90eXBlID0gLyogUHBfaHZib3ggKi8yO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInZcIiA6IFxuICAgICAgICAgIGJveF90eXBlID0gLyogUHBfdmJveCAqLzE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBib3hfdHlwZSA9IGludmFsaWRfYm94KC8qICgpICovMCk7XG4gICAgfVxuICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIGluZGVudCxcbiAgICAgICAgICAgIGJveF90eXBlXG4gICAgICAgICAgXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYWtlX3BhZGRpbmdfZm10X2ViYihwYWQsIGZtdCkge1xuICBpZiAodHlwZW9mIHBhZCA9PT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiAvKiBQYWRkaW5nX2ZtdF9FQkIgKi9bXG4gICAgICAgICAgICAvKiBOb19wYWRkaW5nICovMCxcbiAgICAgICAgICAgIGZtdFxuICAgICAgICAgIF07XG4gIH0gZWxzZSBpZiAocGFkLnRhZykge1xuICAgIHJldHVybiAvKiBQYWRkaW5nX2ZtdF9FQkIgKi9bXG4gICAgICAgICAgICAvKiBBcmdfcGFkZGluZyAqL0Jsb2NrLl9fKDEsIFtwYWRbMF1dKSxcbiAgICAgICAgICAgIGZtdFxuICAgICAgICAgIF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIFBhZGRpbmdfZm10X0VCQiAqL1tcbiAgICAgICAgICAgIC8qIExpdF9wYWRkaW5nICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgICAgIHBhZFswXSxcbiAgICAgICAgICAgICAgICBwYWRbMV1cbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBmbXRcbiAgICAgICAgICBdO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VfcHJlY2lzaW9uX2ZtdF9lYmIocHJlYywgZm10KSB7XG4gIGlmICh0eXBlb2YgcHJlYyA9PT0gXCJudW1iZXJcIikge1xuICAgIGlmIChwcmVjICE9PSAwKSB7XG4gICAgICByZXR1cm4gLyogUHJlY2lzaW9uX2ZtdF9FQkIgKi9bXG4gICAgICAgICAgICAgIC8qIEFyZ19wcmVjaXNpb24gKi8xLFxuICAgICAgICAgICAgICBmbXRcbiAgICAgICAgICAgIF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBQcmVjaXNpb25fZm10X0VCQiAqL1tcbiAgICAgICAgICAgICAgLyogTm9fcHJlY2lzaW9uICovMCxcbiAgICAgICAgICAgICAgZm10XG4gICAgICAgICAgICBdO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogUHJlY2lzaW9uX2ZtdF9FQkIgKi9bXG4gICAgICAgICAgICAvKiBMaXRfcHJlY2lzaW9uICovW3ByZWNbMF1dLFxuICAgICAgICAgICAgZm10XG4gICAgICAgICAgXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYWtlX3BhZHByZWNfZm10X2ViYihwYWQsIHByZWMsIGZtdCkge1xuICB2YXIgbWF0Y2ggPSBtYWtlX3ByZWNpc2lvbl9mbXRfZWJiKHByZWMsIGZtdCk7XG4gIHZhciBmbXQkcHJpbWUgPSBtYXRjaFsxXTtcbiAgdmFyIHByZWMkMSA9IG1hdGNoWzBdO1xuICBpZiAodHlwZW9mIHBhZCA9PT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiAvKiBQYWRwcmVjX2ZtdF9FQkIgKi9bXG4gICAgICAgICAgICAvKiBOb19wYWRkaW5nICovMCxcbiAgICAgICAgICAgIHByZWMkMSxcbiAgICAgICAgICAgIGZtdCRwcmltZVxuICAgICAgICAgIF07XG4gIH0gZWxzZSBpZiAocGFkLnRhZykge1xuICAgIHJldHVybiAvKiBQYWRwcmVjX2ZtdF9FQkIgKi9bXG4gICAgICAgICAgICAvKiBBcmdfcGFkZGluZyAqL0Jsb2NrLl9fKDEsIFtwYWRbMF1dKSxcbiAgICAgICAgICAgIHByZWMkMSxcbiAgICAgICAgICAgIGZtdCRwcmltZVxuICAgICAgICAgIF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIFBhZHByZWNfZm10X0VCQiAqL1tcbiAgICAgICAgICAgIC8qIExpdF9wYWRkaW5nICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgICAgIHBhZFswXSxcbiAgICAgICAgICAgICAgICBwYWRbMV1cbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBwcmVjJDEsXG4gICAgICAgICAgICBmbXQkcHJpbWVcbiAgICAgICAgICBdO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZtdF9lYmJfb2Zfc3RyaW5nKGxlZ2FjeV9iZWhhdmlvciwgc3RyKSB7XG4gIHZhciBsZWdhY3lfYmVoYXZpb3IkMSA9IGxlZ2FjeV9iZWhhdmlvciAhPT0gdW5kZWZpbmVkID8gbGVnYWN5X2JlaGF2aW9yIDogdHJ1ZTtcbiAgdmFyIGludmFsaWRfZm9ybWF0X21lc3NhZ2UgPSBmdW5jdGlvbiAoc3RyX2luZCwgbXNnKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8zKGZhaWx3aXRoX21lc3NhZ2UoLyogRm9ybWF0ICovW1xuICAgICAgICAgICAgICAgICAgICAvKiBTdHJpbmdfbGl0ZXJhbCAqL0Jsb2NrLl9fKDExLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBcImludmFsaWQgZm9ybWF0IFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogQ2FtbF9zdHJpbmcgKi9CbG9jay5fXygzLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogTm9fcGFkZGluZyAqLzAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogU3RyaW5nX2xpdGVyYWwgKi9CbG9jay5fXygxMSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIjogYXQgY2hhcmFjdGVyIG51bWJlciBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogSW50ICovQmxvY2suX18oNCwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogSW50X2QgKi8wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogTm9fcGFkZGluZyAqLzAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBOb19wcmVjaXNpb24gKi8wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogU3RyaW5nX2xpdGVyYWwgKi9CbG9jay5fXygxMSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiLCBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBTdHJpbmcgKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIE5vX3BhZGRpbmcgKi8wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBFbmRfb2ZfZm9ybWF0ICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgXCJpbnZhbGlkIGZvcm1hdCAlUzogYXQgY2hhcmFjdGVyIG51bWJlciAlZCwgJXNcIlxuICAgICAgICAgICAgICAgICAgXSksIHN0ciwgc3RyX2luZCwgbXNnKTtcbiAgfTtcbiAgdmFyIGludmFsaWRfZm9ybWF0X3dpdGhvdXQgPSBmdW5jdGlvbiAoc3RyX2luZCwgYywgcykge1xuICAgIHJldHVybiBDdXJyeS5fNChmYWlsd2l0aF9tZXNzYWdlKC8qIEZvcm1hdCAqL1tcbiAgICAgICAgICAgICAgICAgICAgLyogU3RyaW5nX2xpdGVyYWwgKi9CbG9jay5fXygxMSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJpbnZhbGlkIGZvcm1hdCBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIENhbWxfc3RyaW5nICovQmxvY2suX18oMywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIE5vX3BhZGRpbmcgKi8wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFN0cmluZ19saXRlcmFsICovQmxvY2suX18oMTEsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCI6IGF0IGNoYXJhY3RlciBudW1iZXIgXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIEludCAqL0Jsb2NrLl9fKDQsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIEludF9kICovMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIE5vX3BhZGRpbmcgKi8wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogTm9fcHJlY2lzaW9uICovMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFN0cmluZ19saXRlcmFsICovQmxvY2suX18oMTEsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiwgJ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIENoYXIgKi9CbG9jay5fXygwLCBbLyogU3RyaW5nX2xpdGVyYWwgKi9CbG9jay5fXygxMSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCInIHdpdGhvdXQgXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBTdHJpbmcgKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogTm9fcGFkZGluZyAqLzAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogRW5kX29mX2Zvcm1hdCAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKV0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIFwiaW52YWxpZCBmb3JtYXQgJVM6IGF0IGNoYXJhY3RlciBudW1iZXIgJWQsICclYycgd2l0aG91dCAlc1wiXG4gICAgICAgICAgICAgICAgICBdKSwgc3RyLCBzdHJfaW5kLCBjLCBzKTtcbiAgfTtcbiAgdmFyIGV4cGVjdGVkX2NoYXJhY3RlciA9IGZ1bmN0aW9uIChzdHJfaW5kLCBleHBlY3RlZCwgcmVhZCkge1xuICAgIHJldHVybiBDdXJyeS5fNChmYWlsd2l0aF9tZXNzYWdlKC8qIEZvcm1hdCAqL1tcbiAgICAgICAgICAgICAgICAgICAgLyogU3RyaW5nX2xpdGVyYWwgKi9CbG9jay5fXygxMSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJpbnZhbGlkIGZvcm1hdCBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIENhbWxfc3RyaW5nICovQmxvY2suX18oMywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIE5vX3BhZGRpbmcgKi8wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFN0cmluZ19saXRlcmFsICovQmxvY2suX18oMTEsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCI6IGF0IGNoYXJhY3RlciBudW1iZXIgXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIEludCAqL0Jsb2NrLl9fKDQsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIEludF9kICovMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIE5vX3BhZGRpbmcgKi8wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogTm9fcHJlY2lzaW9uICovMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFN0cmluZ19saXRlcmFsICovQmxvY2suX18oMTEsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiwgXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogU3RyaW5nICovQmxvY2suX18oMiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBOb19wYWRkaW5nICovMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogU3RyaW5nX2xpdGVyYWwgKi9CbG9jay5fXygxMSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgZXhwZWN0ZWQsIHJlYWQgXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBDYW1sX2NoYXIgKi9CbG9jay5fXygxLCBbLyogRW5kX29mX2Zvcm1hdCAqLzBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBcImludmFsaWQgZm9ybWF0ICVTOiBhdCBjaGFyYWN0ZXIgbnVtYmVyICVkLCAlcyBleHBlY3RlZCwgcmVhZCAlQ1wiXG4gICAgICAgICAgICAgICAgICBdKSwgc3RyLCBzdHJfaW5kLCBleHBlY3RlZCwgcmVhZCk7XG4gIH07XG4gIHZhciBjb21wdXRlX2ludF9jb252ID0gZnVuY3Rpb24gKHBjdF9pbmQsIHN0cl9pbmQsIF9wbHVzLCBfc2hhcnAsIF9zcGFjZSwgc3ltYikge1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgIHZhciBzcGFjZSA9IF9zcGFjZTtcbiAgICAgIHZhciBzaGFycCA9IF9zaGFycDtcbiAgICAgIHZhciBwbHVzID0gX3BsdXM7XG4gICAgICB2YXIgZXhpdCA9IDA7XG4gICAgICB2YXIgZXhpdCQxID0gMDtcbiAgICAgIGlmIChwbHVzKSB7XG4gICAgICAgIGlmIChzaGFycCkge1xuICAgICAgICAgIGV4aXQkMSA9IDI7XG4gICAgICAgIH0gZWxzZSBpZiAoc3BhY2UpIHtcbiAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgfSBlbHNlIGlmIChzeW1iICE9PSAxMDApIHtcbiAgICAgICAgICBpZiAoc3ltYiAhPT0gMTA1KSB7XG4gICAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIC8qIEludF9waSAqLzQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAvKiBJbnRfcGQgKi8xO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHNoYXJwKSB7XG4gICAgICAgIGlmIChzcGFjZSkge1xuICAgICAgICAgIGV4aXQkMSA9IDI7XG4gICAgICAgIH0gZWxzZSBpZiAoc3ltYiAhPT0gODgpIHtcbiAgICAgICAgICBpZiAoc3ltYiAhPT0gMTExKSB7XG4gICAgICAgICAgICBpZiAoc3ltYiAhPT0gMTIwKSB7XG4gICAgICAgICAgICAgIGV4aXQkMSA9IDI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gLyogSW50X0N4ICovNztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIC8qIEludF9DbyAqLzExO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gLyogSW50X0NYICovOTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzcGFjZSkge1xuICAgICAgICBpZiAoc3ltYiAhPT0gMTAwKSB7XG4gICAgICAgICAgaWYgKHN5bWIgIT09IDEwNSkge1xuICAgICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAvKiBJbnRfc2kgKi81O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gLyogSW50X3NkICovMjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpdGNoIChzeW1iKSB7XG4gICAgICAgICAgY2FzZSA4OCA6IFxuICAgICAgICAgICAgICByZXR1cm4gLyogSW50X1ggKi84O1xuICAgICAgICAgIGNhc2UgMTAwIDogXG4gICAgICAgICAgICAgIHJldHVybiAvKiBJbnRfZCAqLzA7XG4gICAgICAgICAgY2FzZSAxMDUgOiBcbiAgICAgICAgICAgICAgcmV0dXJuIC8qIEludF9pICovMztcbiAgICAgICAgICBjYXNlIDExMSA6IFxuICAgICAgICAgICAgICByZXR1cm4gLyogSW50X28gKi8xMDtcbiAgICAgICAgICBjYXNlIDExNyA6IFxuICAgICAgICAgICAgICByZXR1cm4gLyogSW50X3UgKi8xMjtcbiAgICAgICAgICBjYXNlIDg5IDogXG4gICAgICAgICAgY2FzZSA5MCA6IFxuICAgICAgICAgIGNhc2UgOTEgOiBcbiAgICAgICAgICBjYXNlIDkyIDogXG4gICAgICAgICAgY2FzZSA5MyA6IFxuICAgICAgICAgIGNhc2UgOTQgOiBcbiAgICAgICAgICBjYXNlIDk1IDogXG4gICAgICAgICAgY2FzZSA5NiA6IFxuICAgICAgICAgIGNhc2UgOTcgOiBcbiAgICAgICAgICBjYXNlIDk4IDogXG4gICAgICAgICAgY2FzZSA5OSA6IFxuICAgICAgICAgIGNhc2UgMTAxIDogXG4gICAgICAgICAgY2FzZSAxMDIgOiBcbiAgICAgICAgICBjYXNlIDEwMyA6IFxuICAgICAgICAgIGNhc2UgMTA0IDogXG4gICAgICAgICAgY2FzZSAxMDYgOiBcbiAgICAgICAgICBjYXNlIDEwNyA6IFxuICAgICAgICAgIGNhc2UgMTA4IDogXG4gICAgICAgICAgY2FzZSAxMDkgOiBcbiAgICAgICAgICBjYXNlIDExMCA6IFxuICAgICAgICAgIGNhc2UgMTEyIDogXG4gICAgICAgICAgY2FzZSAxMTMgOiBcbiAgICAgICAgICBjYXNlIDExNCA6IFxuICAgICAgICAgIGNhc2UgMTE1IDogXG4gICAgICAgICAgY2FzZSAxMTYgOiBcbiAgICAgICAgICBjYXNlIDExOCA6IFxuICAgICAgICAgIGNhc2UgMTE5IDogXG4gICAgICAgICAgICAgIGV4aXQgPSAxO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDEyMCA6IFxuICAgICAgICAgICAgICByZXR1cm4gLyogSW50X3ggKi82O1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGV4aXQkMSA9PT0gMikge1xuICAgICAgICB2YXIgZXhpdCQyID0gMDtcbiAgICAgICAgc3dpdGNoIChzeW1iKSB7XG4gICAgICAgICAgY2FzZSA4OCA6IFxuICAgICAgICAgICAgICBpZiAobGVnYWN5X2JlaGF2aW9yJDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogSW50X0NYICovOTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDExMSA6IFxuICAgICAgICAgICAgICBpZiAobGVnYWN5X2JlaGF2aW9yJDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogSW50X0NvICovMTE7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAxMDAgOiBcbiAgICAgICAgICBjYXNlIDEwNSA6IFxuICAgICAgICAgIGNhc2UgMTE3IDogXG4gICAgICAgICAgICAgIGV4aXQkMiA9IDM7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgODkgOiBcbiAgICAgICAgICBjYXNlIDkwIDogXG4gICAgICAgICAgY2FzZSA5MSA6IFxuICAgICAgICAgIGNhc2UgOTIgOiBcbiAgICAgICAgICBjYXNlIDkzIDogXG4gICAgICAgICAgY2FzZSA5NCA6IFxuICAgICAgICAgIGNhc2UgOTUgOiBcbiAgICAgICAgICBjYXNlIDk2IDogXG4gICAgICAgICAgY2FzZSA5NyA6IFxuICAgICAgICAgIGNhc2UgOTggOiBcbiAgICAgICAgICBjYXNlIDk5IDogXG4gICAgICAgICAgY2FzZSAxMDEgOiBcbiAgICAgICAgICBjYXNlIDEwMiA6IFxuICAgICAgICAgIGNhc2UgMTAzIDogXG4gICAgICAgICAgY2FzZSAxMDQgOiBcbiAgICAgICAgICBjYXNlIDEwNiA6IFxuICAgICAgICAgIGNhc2UgMTA3IDogXG4gICAgICAgICAgY2FzZSAxMDggOiBcbiAgICAgICAgICBjYXNlIDEwOSA6IFxuICAgICAgICAgIGNhc2UgMTEwIDogXG4gICAgICAgICAgY2FzZSAxMTIgOiBcbiAgICAgICAgICBjYXNlIDExMyA6IFxuICAgICAgICAgIGNhc2UgMTE0IDogXG4gICAgICAgICAgY2FzZSAxMTUgOiBcbiAgICAgICAgICBjYXNlIDExNiA6IFxuICAgICAgICAgIGNhc2UgMTE4IDogXG4gICAgICAgICAgY2FzZSAxMTkgOiBcbiAgICAgICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMTIwIDogXG4gICAgICAgICAgICAgIGlmIChsZWdhY3lfYmVoYXZpb3IkMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiBJbnRfQ3ggKi83O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGV4aXQgPSAxO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXhpdCQyID09PSAzKSB7XG4gICAgICAgICAgaWYgKGxlZ2FjeV9iZWhhdmlvciQxKSB7XG4gICAgICAgICAgICBfc2hhcnAgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGluY29tcGF0aWJsZV9mbGFnKHBjdF9pbmQsIHN0cl9pbmQsIHN5bWIsIFwiJyMnXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgIH1cbiAgICAgIGlmIChleGl0ID09PSAxKSB7XG4gICAgICAgIGlmIChwbHVzKSB7XG4gICAgICAgICAgaWYgKHNwYWNlKSB7XG4gICAgICAgICAgICBpZiAobGVnYWN5X2JlaGF2aW9yJDEpIHtcbiAgICAgICAgICAgICAgX3NwYWNlID0gZmFsc2U7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiBpbmNvbXBhdGlibGVfZmxhZyhwY3RfaW5kLCBzdHJfaW5kLCAvKiBcIiBcIiAqLzMyLCBcIicrJ1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGxlZ2FjeV9iZWhhdmlvciQxKSB7XG4gICAgICAgICAgICBfcGx1cyA9IGZhbHNlO1xuICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaW5jb21wYXRpYmxlX2ZsYWcocGN0X2luZCwgc3RyX2luZCwgc3ltYiwgXCInKydcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHNwYWNlKSB7XG4gICAgICAgICAgaWYgKGxlZ2FjeV9iZWhhdmlvciQxKSB7XG4gICAgICAgICAgICBfc3BhY2UgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGluY29tcGF0aWJsZV9mbGFnKHBjdF9pbmQsIHN0cl9pbmQsIHN5bWIsIFwiJyAnXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBbXG4gICAgICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuYXNzZXJ0X2ZhaWx1cmUsXG4gICAgICAgICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICBcImNhbWxpbnRlcm5hbEZvcm1hdC5tbFwiLFxuICAgICAgICAgICAgICAgICAgMjcxOSxcbiAgICAgICAgICAgICAgICAgIDI4XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICB9O1xuICB9O1xuICB2YXIgaW5jb21wYXRpYmxlX2ZsYWcgPSBmdW5jdGlvbiAocGN0X2luZCwgc3RyX2luZCwgc3ltYiwgb3B0aW9uKSB7XG4gICAgdmFyIHN1YmZtdCA9ICQkU3RyaW5nLnN1YihzdHIsIHBjdF9pbmQsIHN0cl9pbmQgLSBwY3RfaW5kIHwgMCk7XG4gICAgcmV0dXJuIEN1cnJ5Ll81KGZhaWx3aXRoX21lc3NhZ2UoLyogRm9ybWF0ICovW1xuICAgICAgICAgICAgICAgICAgICAvKiBTdHJpbmdfbGl0ZXJhbCAqL0Jsb2NrLl9fKDExLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBcImludmFsaWQgZm9ybWF0IFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogQ2FtbF9zdHJpbmcgKi9CbG9jay5fXygzLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogTm9fcGFkZGluZyAqLzAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogU3RyaW5nX2xpdGVyYWwgKi9CbG9jay5fXygxMSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIjogYXQgY2hhcmFjdGVyIG51bWJlciBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogSW50ICovQmxvY2suX18oNCwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogSW50X2QgKi8wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogTm9fcGFkZGluZyAqLzAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBOb19wcmVjaXNpb24gKi8wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogU3RyaW5nX2xpdGVyYWwgKi9CbG9jay5fXygxMSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiLCBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBTdHJpbmcgKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIE5vX3BhZGRpbmcgKi8wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBTdHJpbmdfbGl0ZXJhbCAqL0Jsb2NrLl9fKDExLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiBpcyBpbmNvbXBhdGlibGUgd2l0aCAnXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBDaGFyICovQmxvY2suX18oMCwgWy8qIFN0cmluZ19saXRlcmFsICovQmxvY2suX18oMTEsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCInIGluIHN1Yi1mb3JtYXQgXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIENhbWxfc3RyaW5nICovQmxvY2suX18oMywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogTm9fcGFkZGluZyAqLzAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBFbmRfb2ZfZm9ybWF0ICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKV0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIFwiaW52YWxpZCBmb3JtYXQgJVM6IGF0IGNoYXJhY3RlciBudW1iZXIgJWQsICVzIGlzIGluY29tcGF0aWJsZSB3aXRoICclYycgaW4gc3ViLWZvcm1hdCAlU1wiXG4gICAgICAgICAgICAgICAgICBdKSwgc3RyLCBwY3RfaW5kLCBvcHRpb24sIHN5bWIsIHN1YmZtdCk7XG4gIH07XG4gIHZhciBwYXJzZV9wb3NpdGl2ZSA9IGZ1bmN0aW9uIChfc3RyX2luZCwgZW5kX2luZCwgX2FjYykge1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgIHZhciBhY2MgPSBfYWNjO1xuICAgICAgdmFyIHN0cl9pbmQgPSBfc3RyX2luZDtcbiAgICAgIGlmIChzdHJfaW5kID09PSBlbmRfaW5kKSB7XG4gICAgICAgIGludmFsaWRfZm9ybWF0X21lc3NhZ2UoZW5kX2luZCwgXCJ1bmV4cGVjdGVkIGVuZCBvZiBmb3JtYXRcIik7XG4gICAgICB9XG4gICAgICB2YXIgYyA9IENhbWxfc3RyaW5nLmdldChzdHIsIHN0cl9pbmQpO1xuICAgICAgaWYgKGMgPiA1NyB8fCBjIDwgNDgpIHtcbiAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgIHN0cl9pbmQsXG4gICAgICAgICAgICAgICAgYWNjXG4gICAgICAgICAgICAgIF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbmV3X2FjYyA9IENhbWxfaW50MzIuaW11bChhY2MsIDEwKSArIChjIC0gLyogXCIwXCIgKi80OCB8IDApIHwgMDtcbiAgICAgICAgX2FjYyA9IG5ld19hY2M7XG4gICAgICAgIF9zdHJfaW5kID0gc3RyX2luZCArIDEgfCAwO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbiAgdmFyIHBhcnNlX2FmdGVyX3ByZWNpc2lvbiA9IGZ1bmN0aW9uIChwY3RfaW5kLCBzdHJfaW5kLCBlbmRfaW5kLCBtaW51cywgcGx1cywgc2hhcnAsIHNwYWNlLCBpZ24sIHBhZCwgcHJlYykge1xuICAgIGlmIChzdHJfaW5kID09PSBlbmRfaW5kKSB7XG4gICAgICBpbnZhbGlkX2Zvcm1hdF9tZXNzYWdlKGVuZF9pbmQsIFwidW5leHBlY3RlZCBlbmQgb2YgZm9ybWF0XCIpO1xuICAgIH1cbiAgICB2YXIgcGFyc2VfY29udiA9IGZ1bmN0aW9uIChwYWRwcmVjKSB7XG4gICAgICByZXR1cm4gcGFyc2VfY29udmVyc2lvbihwY3RfaW5kLCBzdHJfaW5kICsgMSB8IDAsIGVuZF9pbmQsIHBsdXMsIHNoYXJwLCBzcGFjZSwgaWduLCBwYWQsIHByZWMsIHBhZHByZWMsIENhbWxfc3RyaW5nLmdldChzdHIsIHN0cl9pbmQpKTtcbiAgICB9O1xuICAgIGlmICh0eXBlb2YgcGFkID09PSBcIm51bWJlclwiKSB7XG4gICAgICB2YXIgZXhpdCA9IDA7XG4gICAgICBpZiAodHlwZW9mIHByZWMgPT09IFwibnVtYmVyXCIgJiYgcHJlYyA9PT0gMCkge1xuICAgICAgICByZXR1cm4gcGFyc2VfY29udigvKiBOb19wYWRkaW5nICovMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBleGl0ID0gMTtcbiAgICAgIH1cbiAgICAgIGlmIChleGl0ID09PSAxKSB7XG4gICAgICAgIGlmIChtaW51cykge1xuICAgICAgICAgIGlmICh0eXBlb2YgcHJlYyA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlX2NvbnYoLyogQXJnX3BhZGRpbmcgKi9CbG9jay5fXygxLCBbLyogTGVmdCAqLzBdKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZV9jb252KC8qIExpdF9wYWRkaW5nICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBMZWZ0ICovMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlY1swXVxuICAgICAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcHJlYyA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgIHJldHVybiBwYXJzZV9jb252KC8qIEFyZ19wYWRkaW5nICovQmxvY2suX18oMSwgWy8qIFJpZ2h0ICovMV0pKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VfY29udigvKiBMaXRfcGFkZGluZyAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIFJpZ2h0ICovMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZWNbMF1cbiAgICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcGFyc2VfY29udihwYWQpO1xuICAgIH1cbiAgfTtcbiAgdmFyIHBhcnNlX2FmdGVyX3BhZGRpbmcgPSBmdW5jdGlvbiAocGN0X2luZCwgc3RyX2luZCwgZW5kX2luZCwgbWludXMsIHBsdXMsIHNoYXJwLCBzcGFjZSwgaWduLCBwYWQpIHtcbiAgICBpZiAoc3RyX2luZCA9PT0gZW5kX2luZCkge1xuICAgICAgaW52YWxpZF9mb3JtYXRfbWVzc2FnZShlbmRfaW5kLCBcInVuZXhwZWN0ZWQgZW5kIG9mIGZvcm1hdFwiKTtcbiAgICB9XG4gICAgdmFyIHN5bWIgPSBDYW1sX3N0cmluZy5nZXQoc3RyLCBzdHJfaW5kKTtcbiAgICBpZiAoc3ltYiAhPT0gNDYpIHtcbiAgICAgIHJldHVybiBwYXJzZV9jb252ZXJzaW9uKHBjdF9pbmQsIHN0cl9pbmQgKyAxIHwgMCwgZW5kX2luZCwgcGx1cywgc2hhcnAsIHNwYWNlLCBpZ24sIHBhZCwgLyogTm9fcHJlY2lzaW9uICovMCwgcGFkLCBzeW1iKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHBjdF9pbmQkMSA9IHBjdF9pbmQ7XG4gICAgICB2YXIgc3RyX2luZCQxID0gc3RyX2luZCArIDEgfCAwO1xuICAgICAgdmFyIGVuZF9pbmQkMSA9IGVuZF9pbmQ7XG4gICAgICB2YXIgbWludXMkMSA9IG1pbnVzO1xuICAgICAgdmFyIHBsdXMkMSA9IHBsdXM7XG4gICAgICB2YXIgc2hhcnAkMSA9IHNoYXJwO1xuICAgICAgdmFyIHNwYWNlJDEgPSBzcGFjZTtcbiAgICAgIHZhciBpZ24kMSA9IGlnbjtcbiAgICAgIHZhciBwYWQkMSA9IHBhZDtcbiAgICAgIGlmIChzdHJfaW5kJDEgPT09IGVuZF9pbmQkMSkge1xuICAgICAgICBpbnZhbGlkX2Zvcm1hdF9tZXNzYWdlKGVuZF9pbmQkMSwgXCJ1bmV4cGVjdGVkIGVuZCBvZiBmb3JtYXRcIik7XG4gICAgICB9XG4gICAgICB2YXIgcGFyc2VfbGl0ZXJhbCA9IGZ1bmN0aW9uIChtaW51cywgc3RyX2luZCkge1xuICAgICAgICB2YXIgbWF0Y2ggPSBwYXJzZV9wb3NpdGl2ZShzdHJfaW5kLCBlbmRfaW5kJDEsIDApO1xuICAgICAgICByZXR1cm4gcGFyc2VfYWZ0ZXJfcHJlY2lzaW9uKHBjdF9pbmQkMSwgbWF0Y2hbMF0sIGVuZF9pbmQkMSwgbWludXMsIHBsdXMkMSwgc2hhcnAkMSwgc3BhY2UkMSwgaWduJDEsIHBhZCQxLCAvKiBMaXRfcHJlY2lzaW9uICovW21hdGNoWzFdXSk7XG4gICAgICB9O1xuICAgICAgdmFyIHN5bWIkMSA9IENhbWxfc3RyaW5nLmdldChzdHIsIHN0cl9pbmQkMSk7XG4gICAgICB2YXIgZXhpdCA9IDA7XG4gICAgICB2YXIgZXhpdCQxID0gMDtcbiAgICAgIGlmIChzeW1iJDEgPj0gNDgpIHtcbiAgICAgICAgaWYgKHN5bWIkMSA+PSA1OCkge1xuICAgICAgICAgIGV4aXQgPSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBwYXJzZV9saXRlcmFsKG1pbnVzJDEsIHN0cl9pbmQkMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc3ltYiQxID49IDQyKSB7XG4gICAgICAgIHN3aXRjaCAoc3ltYiQxIC0gNDIgfCAwKSB7XG4gICAgICAgICAgY2FzZSAwIDogXG4gICAgICAgICAgICAgIHJldHVybiBwYXJzZV9hZnRlcl9wcmVjaXNpb24ocGN0X2luZCQxLCBzdHJfaW5kJDEgKyAxIHwgMCwgZW5kX2luZCQxLCBtaW51cyQxLCBwbHVzJDEsIHNoYXJwJDEsIHNwYWNlJDEsIGlnbiQxLCBwYWQkMSwgLyogQXJnX3ByZWNpc2lvbiAqLzEpO1xuICAgICAgICAgIGNhc2UgMSA6IFxuICAgICAgICAgIGNhc2UgMyA6IFxuICAgICAgICAgICAgICBleGl0JDEgPSAyO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDIgOiBcbiAgICAgICAgICBjYXNlIDQgOiBcbiAgICAgICAgICBjYXNlIDUgOiBcbiAgICAgICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBleGl0ID0gMTtcbiAgICAgIH1cbiAgICAgIGlmIChleGl0JDEgPT09IDIpIHtcbiAgICAgICAgaWYgKGxlZ2FjeV9iZWhhdmlvciQxKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlX2xpdGVyYWwobWludXMkMSB8fCBzeW1iJDEgPT09IC8qIFwiLVwiICovNDUsIHN0cl9pbmQkMSArIDEgfCAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGV4aXQgPT09IDEpIHtcbiAgICAgICAgaWYgKGxlZ2FjeV9iZWhhdmlvciQxKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlX2FmdGVyX3ByZWNpc2lvbihwY3RfaW5kJDEsIHN0cl9pbmQkMSwgZW5kX2luZCQxLCBtaW51cyQxLCBwbHVzJDEsIHNoYXJwJDEsIHNwYWNlJDEsIGlnbiQxLCBwYWQkMSwgLyogTGl0X3ByZWNpc2lvbiAqL1swXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGludmFsaWRfZm9ybWF0X3dpdGhvdXQoc3RyX2luZCQxIC0gMSB8IDAsIC8qIFwiLlwiICovNDYsIFwicHJlY2lzaW9uXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICB9XG4gIH07XG4gIHZhciBwYXJzZV9saXRlcmFsID0gZnVuY3Rpb24gKGxpdF9zdGFydCwgX3N0cl9pbmQsIGVuZF9pbmQpIHtcbiAgICB3aGlsZSh0cnVlKSB7XG4gICAgICB2YXIgc3RyX2luZCA9IF9zdHJfaW5kO1xuICAgICAgaWYgKHN0cl9pbmQgPT09IGVuZF9pbmQpIHtcbiAgICAgICAgcmV0dXJuIGFkZF9saXRlcmFsKGxpdF9zdGFydCwgc3RyX2luZCwgLyogRW5kX29mX2Zvcm1hdCAqLzApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG1hdGNoID0gQ2FtbF9zdHJpbmcuZ2V0KHN0ciwgc3RyX2luZCk7XG4gICAgICAgIGlmIChtYXRjaCAhPT0gMzcpIHtcbiAgICAgICAgICBpZiAobWF0Y2ggIT09IDY0KSB7XG4gICAgICAgICAgICBfc3RyX2luZCA9IHN0cl9pbmQgKyAxIHwgMDtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIG1hdGNoJDEgPSBwYXJzZV9hZnRlcl9hdChzdHJfaW5kICsgMSB8IDAsIGVuZF9pbmQpO1xuICAgICAgICAgICAgcmV0dXJuIGFkZF9saXRlcmFsKGxpdF9zdGFydCwgc3RyX2luZCwgbWF0Y2gkMVswXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBtYXRjaCQyID0gcGFyc2VfZm9ybWF0KHN0cl9pbmQsIGVuZF9pbmQpO1xuICAgICAgICAgIHJldHVybiBhZGRfbGl0ZXJhbChsaXRfc3RhcnQsIHN0cl9pbmQsIG1hdGNoJDJbMF0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbiAgdmFyIHBhcnNlX2Zvcm1hdCA9IGZ1bmN0aW9uIChwY3RfaW5kLCBlbmRfaW5kKSB7XG4gICAgdmFyIHBjdF9pbmQkMSA9IHBjdF9pbmQ7XG4gICAgdmFyIHN0cl9pbmQgPSBwY3RfaW5kICsgMSB8IDA7XG4gICAgdmFyIGVuZF9pbmQkMSA9IGVuZF9pbmQ7XG4gICAgaWYgKHN0cl9pbmQgPT09IGVuZF9pbmQkMSkge1xuICAgICAgaW52YWxpZF9mb3JtYXRfbWVzc2FnZShlbmRfaW5kJDEsIFwidW5leHBlY3RlZCBlbmQgb2YgZm9ybWF0XCIpO1xuICAgIH1cbiAgICB2YXIgbWF0Y2ggPSBDYW1sX3N0cmluZy5nZXQoc3RyLCBzdHJfaW5kKTtcbiAgICBpZiAobWF0Y2ggIT09IDk1KSB7XG4gICAgICByZXR1cm4gcGFyc2VfZmxhZ3MocGN0X2luZCQxLCBzdHJfaW5kLCBlbmRfaW5kJDEsIGZhbHNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHBhcnNlX2ZsYWdzKHBjdF9pbmQkMSwgc3RyX2luZCArIDEgfCAwLCBlbmRfaW5kJDEsIHRydWUpO1xuICAgIH1cbiAgfTtcbiAgdmFyIHBhcnNlX2FmdGVyX2F0ID0gZnVuY3Rpb24gKHN0cl9pbmQsIGVuZF9pbmQpIHtcbiAgICBpZiAoc3RyX2luZCA9PT0gZW5kX2luZCkge1xuICAgICAgcmV0dXJuIC8qIEZtdF9FQkIgKi9bLyogQ2hhcl9saXRlcmFsICovQmxvY2suX18oMTIsIFtcbiAgICAgICAgICAgICAgICAgIC8qIFwiQFwiICovNjQsXG4gICAgICAgICAgICAgICAgICAvKiBFbmRfb2ZfZm9ybWF0ICovMFxuICAgICAgICAgICAgICAgIF0pXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGMgPSBDYW1sX3N0cmluZy5nZXQoc3RyLCBzdHJfaW5kKTtcbiAgICAgIHZhciBleGl0ID0gMDtcbiAgICAgIGlmIChjID49IDY1KSB7XG4gICAgICAgIGlmIChjID49IDk0KSB7XG4gICAgICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgICAgICBjYXNlIDEyMyA6IFxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZV90YWcodHJ1ZSwgc3RyX2luZCArIDEgfCAwLCBlbmRfaW5kKTtcbiAgICAgICAgICAgIGNhc2UgMTI0IDogXG4gICAgICAgICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDEyNSA6IFxuICAgICAgICAgICAgICAgIHZhciBiZWdfaW5kID0gc3RyX2luZCArIDEgfCAwO1xuICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IHBhcnNlX2xpdGVyYWwoYmVnX2luZCwgYmVnX2luZCwgZW5kX2luZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIEZtdF9FQkIgKi9bLyogRm9ybWF0dGluZ19saXQgKi9CbG9jay5fXygxNywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIENsb3NlX3RhZyAqLzEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hbMF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgXSldO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGMgPj0gOTEpIHtcbiAgICAgICAgICBzd2l0Y2ggKGMgLSA5MSB8IDApIHtcbiAgICAgICAgICAgIGNhc2UgMCA6IFxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZV90YWcoZmFsc2UsIHN0cl9pbmQgKyAxIHwgMCwgZW5kX2luZCk7XG4gICAgICAgICAgICBjYXNlIDEgOiBcbiAgICAgICAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMiA6IFxuICAgICAgICAgICAgICAgIHZhciBiZWdfaW5kJDEgPSBzdHJfaW5kICsgMSB8IDA7XG4gICAgICAgICAgICAgICAgdmFyIG1hdGNoJDEgPSBwYXJzZV9saXRlcmFsKGJlZ19pbmQkMSwgYmVnX2luZCQxLCBlbmRfaW5kKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogRm10X0VCQiAqL1svKiBGb3JtYXR0aW5nX2xpdCAqL0Jsb2NrLl9fKDE3LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogQ2xvc2VfYm94ICovMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCQxWzBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF0pXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjICE9PSAxMCkge1xuICAgICAgICBpZiAoYyA+PSAzMikge1xuICAgICAgICAgIHN3aXRjaCAoYyAtIDMyIHwgMCkge1xuICAgICAgICAgICAgY2FzZSAwIDogXG4gICAgICAgICAgICAgICAgdmFyIGJlZ19pbmQkMiA9IHN0cl9pbmQgKyAxIHwgMDtcbiAgICAgICAgICAgICAgICB2YXIgbWF0Y2gkMiA9IHBhcnNlX2xpdGVyYWwoYmVnX2luZCQyLCBiZWdfaW5kJDIsIGVuZF9pbmQpO1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiBGbXRfRUJCICovWy8qIEZvcm1hdHRpbmdfbGl0ICovQmxvY2suX18oMTcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBCcmVhayAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJAIFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCQyWzBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF0pXTtcbiAgICAgICAgICAgIGNhc2UgNSA6IFxuICAgICAgICAgICAgICAgIGlmICgoc3RyX2luZCArIDEgfCAwKSA8IGVuZF9pbmQgJiYgQ2FtbF9zdHJpbmcuZ2V0KHN0ciwgc3RyX2luZCArIDEgfCAwKSA9PT0gLyogXCIlXCIgKi8zNykge1xuICAgICAgICAgICAgICAgICAgdmFyIGJlZ19pbmQkMyA9IHN0cl9pbmQgKyAyIHwgMDtcbiAgICAgICAgICAgICAgICAgIHZhciBtYXRjaCQzID0gcGFyc2VfbGl0ZXJhbChiZWdfaW5kJDMsIGJlZ19pbmQkMywgZW5kX2luZCk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gLyogRm10X0VCQiAqL1svKiBGb3JtYXR0aW5nX2xpdCAqL0Jsb2NrLl9fKDE3LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBFc2NhcGVkX3BlcmNlbnQgKi82LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gkM1swXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoJDQgPSBwYXJzZV9saXRlcmFsKHN0cl9pbmQsIHN0cl9pbmQsIGVuZF9pbmQpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIEZtdF9FQkIgKi9bLyogQ2hhcl9saXRlcmFsICovQmxvY2suX18oMTIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFwiQFwiICovNjQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCQ0WzBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgMTIgOiBcbiAgICAgICAgICAgICAgICB2YXIgYmVnX2luZCQ0ID0gc3RyX2luZCArIDEgfCAwO1xuICAgICAgICAgICAgICAgIHZhciBtYXRjaCQ1ID0gcGFyc2VfbGl0ZXJhbChiZWdfaW5kJDQsIGJlZ19pbmQkNCwgZW5kX2luZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIEZtdF9FQkIgKi9bLyogRm9ybWF0dGluZ19saXQgKi9CbG9jay5fXygxNywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIEJyZWFrICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkAsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoJDVbMF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgXSldO1xuICAgICAgICAgICAgY2FzZSAxNCA6IFxuICAgICAgICAgICAgICAgIHZhciBiZWdfaW5kJDUgPSBzdHJfaW5kICsgMSB8IDA7XG4gICAgICAgICAgICAgICAgdmFyIG1hdGNoJDYgPSBwYXJzZV9saXRlcmFsKGJlZ19pbmQkNSwgYmVnX2luZCQ1LCBlbmRfaW5kKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogRm10X0VCQiAqL1svKiBGb3JtYXR0aW5nX2xpdCAqL0Jsb2NrLl9fKDE3LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogRmx1c2hfbmV3bGluZSAqLzQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gkNlswXVxuICAgICAgICAgICAgICAgICAgICAgICAgICBdKV07XG4gICAgICAgICAgICBjYXNlIDI3IDogXG4gICAgICAgICAgICAgICAgdmFyIHN0cl9pbmQkMSA9IHN0cl9pbmQgKyAxIHwgMDtcbiAgICAgICAgICAgICAgICB2YXIgZW5kX2luZCQxID0gZW5kX2luZDtcbiAgICAgICAgICAgICAgICB2YXIgbWF0Y2gkNztcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgaWYgKHN0cl9pbmQkMSA9PT0gZW5kX2luZCQxIHx8IENhbWxfc3RyaW5nLmdldChzdHIsIHN0cl9pbmQkMSkgIT09IC8qIFwiPFwiICovNjApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMubm90X2ZvdW5kO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgdmFyIHN0cl9pbmRfMSA9IHBhcnNlX3NwYWNlcyhzdHJfaW5kJDEgKyAxIHwgMCwgZW5kX2luZCQxKTtcbiAgICAgICAgICAgICAgICAgIHZhciBtYXRjaCQ4ID0gQ2FtbF9zdHJpbmcuZ2V0KHN0ciwgc3RyX2luZF8xKTtcbiAgICAgICAgICAgICAgICAgIHZhciBleGl0JDEgPSAwO1xuICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoJDggPj0gNDgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoJDggPj0gNTgpIHtcbiAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5ub3RfZm91bmQ7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgZXhpdCQxID0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaCQ4ICE9PSA0NSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5ub3RfZm91bmQ7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBleGl0JDEgPSAxO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKGV4aXQkMSA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2gkOSA9IHBhcnNlX2ludGVnZXIoc3RyX2luZF8xLCBlbmRfaW5kJDEpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSBtYXRjaCQ5WzFdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RyX2luZF8zID0gcGFyc2Vfc3BhY2VzKG1hdGNoJDlbMF0sIGVuZF9pbmQkMSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaCQxMCA9IENhbWxfc3RyaW5nLmdldChzdHIsIHN0cl9pbmRfMyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzd2l0Y2hlciA9IG1hdGNoJDEwIC0gNDUgfCAwO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3dpdGNoZXIgPiAxMiB8fCBzd2l0Y2hlciA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoc3dpdGNoZXIgIT09IDE3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5ub3RfZm91bmQ7XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzID0gJCRTdHJpbmcuc3ViKHN0ciwgc3RyX2luZCQxIC0gMiB8IDAsIChzdHJfaW5kXzMgLSBzdHJfaW5kJDEgfCAwKSArIDMgfCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoJDcgPSAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyX2luZF8zICsgMSB8IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIEJyZWFrICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzd2l0Y2hlciA9PT0gMiB8fCBzd2l0Y2hlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgIHRocm93IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLm5vdF9mb3VuZDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2gkMTEgPSBwYXJzZV9pbnRlZ2VyKHN0cl9pbmRfMywgZW5kX2luZCQxKTtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RyX2luZF81ID0gcGFyc2Vfc3BhY2VzKG1hdGNoJDExWzBdLCBlbmRfaW5kJDEpO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChDYW1sX3N0cmluZy5nZXQoc3RyLCBzdHJfaW5kXzUpICE9PSAvKiBcIj5cIiAqLzYyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5ub3RfZm91bmQ7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIHZhciBzJDEgPSAkJFN0cmluZy5zdWIoc3RyLCBzdHJfaW5kJDEgLSAyIHwgMCwgKHN0cl9pbmRfNSAtIHN0cl9pbmQkMSB8IDApICsgMyB8IDApO1xuICAgICAgICAgICAgICAgICAgICAgIG1hdGNoJDcgPSAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cl9pbmRfNSArIDEgfCAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogQnJlYWsgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcyQxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoJDExWzFdXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChyYXdfZXhuKXtcbiAgICAgICAgICAgICAgICAgIHZhciBleG4gPSBDYW1sX2pzX2V4Y2VwdGlvbnMuaW50ZXJuYWxUb09DYW1sRXhjZXB0aW9uKHJhd19leG4pO1xuICAgICAgICAgICAgICAgICAgaWYgKGV4biA9PT0gQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMubm90X2ZvdW5kIHx8IGV4blswXSA9PT0gQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuZmFpbHVyZSkge1xuICAgICAgICAgICAgICAgICAgICBtYXRjaCQ3ID0gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgc3RyX2luZCQxLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIEJyZWFrICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcIkA7XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBleG47XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBuZXh0X2luZCA9IG1hdGNoJDdbMF07XG4gICAgICAgICAgICAgICAgdmFyIG1hdGNoJDEyID0gcGFyc2VfbGl0ZXJhbChuZXh0X2luZCwgbmV4dF9pbmQsIGVuZF9pbmQkMSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIEZtdF9FQkIgKi9bLyogRm9ybWF0dGluZ19saXQgKi9CbG9jay5fXygxNywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoJDdbMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gkMTJbMF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgXSldO1xuICAgICAgICAgICAgY2FzZSAyOCA6IFxuICAgICAgICAgICAgICAgIHZhciBzdHJfaW5kJDIgPSBzdHJfaW5kICsgMSB8IDA7XG4gICAgICAgICAgICAgICAgdmFyIGVuZF9pbmQkMiA9IGVuZF9pbmQ7XG4gICAgICAgICAgICAgICAgdmFyIG1hdGNoJDEzO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICB2YXIgc3RyX2luZF8xJDEgPSBwYXJzZV9zcGFjZXMoc3RyX2luZCQyLCBlbmRfaW5kJDIpO1xuICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoJDE0ID0gQ2FtbF9zdHJpbmcuZ2V0KHN0ciwgc3RyX2luZF8xJDEpO1xuICAgICAgICAgICAgICAgICAgdmFyIGV4aXQkMiA9IDA7XG4gICAgICAgICAgICAgICAgICBpZiAobWF0Y2gkMTQgPj0gNDgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoJDE0ID49IDU4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgbWF0Y2gkMTMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgZXhpdCQyID0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaCQxNCAhPT0gNDUpIHtcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2gkMTMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBleGl0JDIgPSAxO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKGV4aXQkMiA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2gkMTUgPSBwYXJzZV9pbnRlZ2VyKHN0cl9pbmRfMSQxLCBlbmRfaW5kJDIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RyX2luZF8zJDEgPSBwYXJzZV9zcGFjZXMobWF0Y2gkMTVbMF0sIGVuZF9pbmQkMik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChDYW1sX3N0cmluZy5nZXQoc3RyLCBzdHJfaW5kXzMkMSkgIT09IC8qIFwiPlwiICovNjIpIHtcbiAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5ub3RfZm91bmQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIHMkMiA9ICQkU3RyaW5nLnN1YihzdHIsIHN0cl9pbmQkMiAtIDIgfCAwLCAoc3RyX2luZF8zJDEgLSBzdHJfaW5kJDIgfCAwKSArIDMgfCAwKTtcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2gkMTMgPSAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICBzdHJfaW5kXzMkMSArIDEgfCAwLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIE1hZ2ljX3NpemUgKi9CbG9jay5fXygxLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHMkMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gkMTVbMV1cbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKHJhd19leG4kMSl7XG4gICAgICAgICAgICAgICAgICB2YXIgZXhuJDEgPSBDYW1sX2pzX2V4Y2VwdGlvbnMuaW50ZXJuYWxUb09DYW1sRXhjZXB0aW9uKHJhd19leG4kMSk7XG4gICAgICAgICAgICAgICAgICBpZiAoZXhuJDEgPT09IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLm5vdF9mb3VuZCB8fCBleG4kMVswXSA9PT0gQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuZmFpbHVyZSkge1xuICAgICAgICAgICAgICAgICAgICBtYXRjaCQxMyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGV4biQxO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobWF0Y2gkMTMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoJDE2ID0gbWF0Y2gkMTM7XG4gICAgICAgICAgICAgICAgICB2YXIgbmV4dF9pbmQkMSA9IG1hdGNoJDE2WzBdO1xuICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoJDE3ID0gcGFyc2VfbGl0ZXJhbChuZXh0X2luZCQxLCBuZXh0X2luZCQxLCBlbmRfaW5kJDIpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIEZtdF9FQkIgKi9bLyogRm9ybWF0dGluZ19saXQgKi9CbG9jay5fXygxNywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gkMTZbMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCQxN1swXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoJDE4ID0gcGFyc2VfbGl0ZXJhbChzdHJfaW5kJDIsIHN0cl9pbmQkMiwgZW5kX2luZCQyKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBGbXRfRUJCICovWy8qIEZvcm1hdHRpbmdfbGl0ICovQmxvY2suX18oMTcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFNjYW5faW5kaWMgKi9CbG9jay5fXygyLCBbLyogXCI8XCIgKi82MF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gkMThbMF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAxIDogXG4gICAgICAgICAgICBjYXNlIDIgOiBcbiAgICAgICAgICAgIGNhc2UgMyA6IFxuICAgICAgICAgICAgY2FzZSA0IDogXG4gICAgICAgICAgICBjYXNlIDYgOiBcbiAgICAgICAgICAgIGNhc2UgNyA6IFxuICAgICAgICAgICAgY2FzZSA4IDogXG4gICAgICAgICAgICBjYXNlIDkgOiBcbiAgICAgICAgICAgIGNhc2UgMTAgOiBcbiAgICAgICAgICAgIGNhc2UgMTEgOiBcbiAgICAgICAgICAgIGNhc2UgMTMgOiBcbiAgICAgICAgICAgIGNhc2UgMTUgOiBcbiAgICAgICAgICAgIGNhc2UgMTYgOiBcbiAgICAgICAgICAgIGNhc2UgMTcgOiBcbiAgICAgICAgICAgIGNhc2UgMTggOiBcbiAgICAgICAgICAgIGNhc2UgMTkgOiBcbiAgICAgICAgICAgIGNhc2UgMjAgOiBcbiAgICAgICAgICAgIGNhc2UgMjEgOiBcbiAgICAgICAgICAgIGNhc2UgMjIgOiBcbiAgICAgICAgICAgIGNhc2UgMjMgOiBcbiAgICAgICAgICAgIGNhc2UgMjQgOiBcbiAgICAgICAgICAgIGNhc2UgMjUgOiBcbiAgICAgICAgICAgIGNhc2UgMjYgOiBcbiAgICAgICAgICAgIGNhc2UgMjkgOiBcbiAgICAgICAgICAgIGNhc2UgMzAgOiBcbiAgICAgICAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMzEgOiBcbiAgICAgICAgICAgICAgICB2YXIgYmVnX2luZCQ2ID0gc3RyX2luZCArIDEgfCAwO1xuICAgICAgICAgICAgICAgIHZhciBtYXRjaCQxOSA9IHBhcnNlX2xpdGVyYWwoYmVnX2luZCQ2LCBiZWdfaW5kJDYsIGVuZF9pbmQpO1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiBGbXRfRUJCICovWy8qIEZvcm1hdHRpbmdfbGl0ICovQmxvY2suX18oMTcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBGRmx1c2ggKi8yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoJDE5WzBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF0pXTtcbiAgICAgICAgICAgIGNhc2UgMzIgOiBcbiAgICAgICAgICAgICAgICB2YXIgYmVnX2luZCQ3ID0gc3RyX2luZCArIDEgfCAwO1xuICAgICAgICAgICAgICAgIHZhciBtYXRjaCQyMCA9IHBhcnNlX2xpdGVyYWwoYmVnX2luZCQ3LCBiZWdfaW5kJDcsIGVuZF9pbmQpO1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiBGbXRfRUJCICovWy8qIEZvcm1hdHRpbmdfbGl0ICovQmxvY2suX18oMTcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBFc2NhcGVkX2F0ICovNSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCQyMFswXVxuICAgICAgICAgICAgICAgICAgICAgICAgICBdKV07XG4gICAgICAgICAgICBcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBiZWdfaW5kJDggPSBzdHJfaW5kICsgMSB8IDA7XG4gICAgICAgIHZhciBtYXRjaCQyMSA9IHBhcnNlX2xpdGVyYWwoYmVnX2luZCQ4LCBiZWdfaW5kJDgsIGVuZF9pbmQpO1xuICAgICAgICByZXR1cm4gLyogRm10X0VCQiAqL1svKiBGb3JtYXR0aW5nX2xpdCAqL0Jsb2NrLl9fKDE3LCBbXG4gICAgICAgICAgICAgICAgICAgIC8qIEZvcmNlX25ld2xpbmUgKi8zLFxuICAgICAgICAgICAgICAgICAgICBtYXRjaCQyMVswXVxuICAgICAgICAgICAgICAgICAgXSldO1xuICAgICAgfVxuICAgICAgaWYgKGV4aXQgPT09IDEpIHtcbiAgICAgICAgdmFyIGJlZ19pbmQkOSA9IHN0cl9pbmQgKyAxIHwgMDtcbiAgICAgICAgdmFyIG1hdGNoJDIyID0gcGFyc2VfbGl0ZXJhbChiZWdfaW5kJDksIGJlZ19pbmQkOSwgZW5kX2luZCk7XG4gICAgICAgIHJldHVybiAvKiBGbXRfRUJCICovWy8qIEZvcm1hdHRpbmdfbGl0ICovQmxvY2suX18oMTcsIFtcbiAgICAgICAgICAgICAgICAgICAgLyogU2Nhbl9pbmRpYyAqL0Jsb2NrLl9fKDIsIFtjXSksXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoJDIyWzBdXG4gICAgICAgICAgICAgICAgICBdKV07XG4gICAgICB9XG4gICAgICBcbiAgICB9XG4gIH07XG4gIHZhciBhZGRfbGl0ZXJhbCA9IGZ1bmN0aW9uIChsaXRfc3RhcnQsIHN0cl9pbmQsIGZtdCkge1xuICAgIHZhciBzaXplID0gc3RyX2luZCAtIGxpdF9zdGFydCB8IDA7XG4gICAgaWYgKHNpemUgIT09IDApIHtcbiAgICAgIGlmIChzaXplICE9PSAxKSB7XG4gICAgICAgIHJldHVybiAvKiBGbXRfRUJCICovWy8qIFN0cmluZ19saXRlcmFsICovQmxvY2suX18oMTEsIFtcbiAgICAgICAgICAgICAgICAgICAgJCRTdHJpbmcuc3ViKHN0ciwgbGl0X3N0YXJ0LCBzaXplKSxcbiAgICAgICAgICAgICAgICAgICAgZm10XG4gICAgICAgICAgICAgICAgICBdKV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gLyogRm10X0VCQiAqL1svKiBDaGFyX2xpdGVyYWwgKi9CbG9jay5fXygxMiwgW1xuICAgICAgICAgICAgICAgICAgICBDYW1sX3N0cmluZy5nZXQoc3RyLCBsaXRfc3RhcnQpLFxuICAgICAgICAgICAgICAgICAgICBmbXRcbiAgICAgICAgICAgICAgICAgIF0pXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIEZtdF9FQkIgKi9bZm10XTtcbiAgICB9XG4gIH07XG4gIHZhciBwYXJzZV9zcGFjZXMgPSBmdW5jdGlvbiAoX3N0cl9pbmQsIGVuZF9pbmQpIHtcbiAgICB3aGlsZSh0cnVlKSB7XG4gICAgICB2YXIgc3RyX2luZCA9IF9zdHJfaW5kO1xuICAgICAgaWYgKHN0cl9pbmQgPT09IGVuZF9pbmQpIHtcbiAgICAgICAgaW52YWxpZF9mb3JtYXRfbWVzc2FnZShlbmRfaW5kLCBcInVuZXhwZWN0ZWQgZW5kIG9mIGZvcm1hdFwiKTtcbiAgICAgIH1cbiAgICAgIGlmIChDYW1sX3N0cmluZy5nZXQoc3RyLCBzdHJfaW5kKSA9PT0gLyogXCIgXCIgKi8zMikge1xuICAgICAgICBfc3RyX2luZCA9IHN0cl9pbmQgKyAxIHwgMDtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHN0cl9pbmQ7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbiAgdmFyIHBhcnNlX2ludGVnZXIgPSBmdW5jdGlvbiAoc3RyX2luZCwgZW5kX2luZCkge1xuICAgIGlmIChzdHJfaW5kID09PSBlbmRfaW5kKSB7XG4gICAgICBpbnZhbGlkX2Zvcm1hdF9tZXNzYWdlKGVuZF9pbmQsIFwidW5leHBlY3RlZCBlbmQgb2YgZm9ybWF0XCIpO1xuICAgIH1cbiAgICB2YXIgbWF0Y2ggPSBDYW1sX3N0cmluZy5nZXQoc3RyLCBzdHJfaW5kKTtcbiAgICBpZiAobWF0Y2ggPj0gNDgpIHtcbiAgICAgIGlmIChtYXRjaCA+PSA1OCkge1xuICAgICAgICB0aHJvdyBbXG4gICAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmFzc2VydF9mYWlsdXJlLFxuICAgICAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICBcImNhbWxpbnRlcm5hbEZvcm1hdC5tbFwiLFxuICAgICAgICAgICAgICAgIDI2MjQsXG4gICAgICAgICAgICAgICAgMTFcbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBwYXJzZV9wb3NpdGl2ZShzdHJfaW5kLCBlbmRfaW5kLCAwKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG1hdGNoICE9PSA0NSkge1xuICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuYXNzZXJ0X2ZhaWx1cmUsXG4gICAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgXCJjYW1saW50ZXJuYWxGb3JtYXQubWxcIixcbiAgICAgICAgICAgICAgMjYyNCxcbiAgICAgICAgICAgICAgMTFcbiAgICAgICAgICAgIF1cbiAgICAgICAgICBdO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoKHN0cl9pbmQgKyAxIHwgMCkgPT09IGVuZF9pbmQpIHtcbiAgICAgICAgaW52YWxpZF9mb3JtYXRfbWVzc2FnZShlbmRfaW5kLCBcInVuZXhwZWN0ZWQgZW5kIG9mIGZvcm1hdFwiKTtcbiAgICAgIH1cbiAgICAgIHZhciBjID0gQ2FtbF9zdHJpbmcuZ2V0KHN0ciwgc3RyX2luZCArIDEgfCAwKTtcbiAgICAgIGlmIChjID4gNTcgfHwgYyA8IDQ4KSB7XG4gICAgICAgIHJldHVybiBleHBlY3RlZF9jaGFyYWN0ZXIoc3RyX2luZCArIDEgfCAwLCBcImRpZ2l0XCIsIGMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG1hdGNoJDEgPSBwYXJzZV9wb3NpdGl2ZShzdHJfaW5kICsgMSB8IDAsIGVuZF9pbmQsIDApO1xuICAgICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgbWF0Y2gkMVswXSxcbiAgICAgICAgICAgICAgICAtbWF0Y2gkMVsxXSB8IDBcbiAgICAgICAgICAgICAgXTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHZhciBjb21wdXRlX2Zsb2F0X2NvbnYgPSBmdW5jdGlvbiAocGN0X2luZCwgc3RyX2luZCwgX3BsdXMsIF9zcGFjZSwgc3ltYikge1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgIHZhciBzcGFjZSA9IF9zcGFjZTtcbiAgICAgIHZhciBwbHVzID0gX3BsdXM7XG4gICAgICBpZiAocGx1cykge1xuICAgICAgICBpZiAoc3BhY2UpIHtcbiAgICAgICAgICBpZiAobGVnYWN5X2JlaGF2aW9yJDEpIHtcbiAgICAgICAgICAgIF9zcGFjZSA9IGZhbHNlO1xuICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaW5jb21wYXRpYmxlX2ZsYWcocGN0X2luZCwgc3RyX2luZCwgLyogXCIgXCIgKi8zMiwgXCInKydcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBleGl0ID0gMDtcbiAgICAgICAgICBpZiAoc3ltYiA+PSA3Mikge1xuICAgICAgICAgICAgc3dpdGNoIChzeW1iKSB7XG4gICAgICAgICAgICAgIGNhc2UgMTAxIDogXG4gICAgICAgICAgICAgICAgICByZXR1cm4gLyogRmxvYXRfcGUgKi80O1xuICAgICAgICAgICAgICBjYXNlIDEwMiA6IFxuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIEZsb2F0X3BmICovMTtcbiAgICAgICAgICAgICAgY2FzZSAxMDMgOiBcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBGbG9hdF9wZyAqLzEwO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGV4aXQgPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoc3ltYiA+PSA2OSkge1xuICAgICAgICAgICAgc3dpdGNoIChzeW1iIC0gNjkgfCAwKSB7XG4gICAgICAgICAgICAgIGNhc2UgMCA6IFxuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIEZsb2F0X3BFICovNztcbiAgICAgICAgICAgICAgY2FzZSAxIDogXG4gICAgICAgICAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDIgOiBcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBGbG9hdF9wRyAqLzEzO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChleGl0ID09PSAxKSB7XG4gICAgICAgICAgICBpZiAobGVnYWN5X2JlaGF2aW9yJDEpIHtcbiAgICAgICAgICAgICAgX3BsdXMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGluY29tcGF0aWJsZV9mbGFnKHBjdF9pbmQsIHN0cl9pbmQsIHN5bWIsIFwiJysnXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzcGFjZSkge1xuICAgICAgICB2YXIgZXhpdCQxID0gMDtcbiAgICAgICAgaWYgKHN5bWIgPj0gNzIpIHtcbiAgICAgICAgICBzd2l0Y2ggKHN5bWIpIHtcbiAgICAgICAgICAgIGNhc2UgMTAxIDogXG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIEZsb2F0X3NlICovNTtcbiAgICAgICAgICAgIGNhc2UgMTAyIDogXG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIEZsb2F0X3NmICovMjtcbiAgICAgICAgICAgIGNhc2UgMTAzIDogXG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIEZsb2F0X3NnICovMTE7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBleGl0JDEgPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChzeW1iID49IDY5KSB7XG4gICAgICAgICAgc3dpdGNoIChzeW1iIC0gNjkgfCAwKSB7XG4gICAgICAgICAgICBjYXNlIDAgOiBcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogRmxvYXRfc0UgKi84O1xuICAgICAgICAgICAgY2FzZSAxIDogXG4gICAgICAgICAgICAgICAgZXhpdCQxID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMiA6IFxuICAgICAgICAgICAgICAgIHJldHVybiAvKiBGbG9hdF9zRyAqLzE0O1xuICAgICAgICAgICAgXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGV4aXQkMSA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV4aXQkMSA9PT0gMSkge1xuICAgICAgICAgIGlmIChsZWdhY3lfYmVoYXZpb3IkMSkge1xuICAgICAgICAgICAgX3NwYWNlID0gZmFsc2U7XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpbmNvbXBhdGlibGVfZmxhZyhwY3RfaW5kLCBzdHJfaW5kLCBzeW1iLCBcIicgJ1wiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICB9IGVsc2UgaWYgKHN5bWIgPj0gNzIpIHtcbiAgICAgICAgc3dpdGNoIChzeW1iKSB7XG4gICAgICAgICAgY2FzZSAxMDEgOiBcbiAgICAgICAgICAgICAgcmV0dXJuIC8qIEZsb2F0X2UgKi8zO1xuICAgICAgICAgIGNhc2UgMTAyIDogXG4gICAgICAgICAgICAgIHJldHVybiAvKiBGbG9hdF9mICovMDtcbiAgICAgICAgICBjYXNlIDEwMyA6IFxuICAgICAgICAgICAgICByZXR1cm4gLyogRmxvYXRfZyAqLzk7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IFtcbiAgICAgICAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmFzc2VydF9mYWlsdXJlLFxuICAgICAgICAgICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAgIFwiY2FtbGludGVybmFsRm9ybWF0Lm1sXCIsXG4gICAgICAgICAgICAgICAgICAgIDI3NDcsXG4gICAgICAgICAgICAgICAgICAgIDI1XG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzeW1iID49IDY5KSB7XG4gICAgICAgIHN3aXRjaCAoc3ltYiAtIDY5IHwgMCkge1xuICAgICAgICAgIGNhc2UgMCA6IFxuICAgICAgICAgICAgICByZXR1cm4gLyogRmxvYXRfRSAqLzY7XG4gICAgICAgICAgY2FzZSAxIDogXG4gICAgICAgICAgICAgIHJldHVybiAvKiBGbG9hdF9GICovMTU7XG4gICAgICAgICAgY2FzZSAyIDogXG4gICAgICAgICAgICAgIHJldHVybiAvKiBGbG9hdF9HICovMTI7XG4gICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IFtcbiAgICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuYXNzZXJ0X2ZhaWx1cmUsXG4gICAgICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgIFwiY2FtbGludGVybmFsRm9ybWF0Lm1sXCIsXG4gICAgICAgICAgICAgICAgMjc0NyxcbiAgICAgICAgICAgICAgICAyNVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdO1xuICAgICAgfVxuICAgIH07XG4gIH07XG4gIHZhciBzZWFyY2hfc3ViZm9ybWF0X2VuZCA9IGZ1bmN0aW9uIChfc3RyX2luZCwgZW5kX2luZCwgYykge1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgIHZhciBzdHJfaW5kID0gX3N0cl9pbmQ7XG4gICAgICBpZiAoc3RyX2luZCA9PT0gZW5kX2luZCkge1xuICAgICAgICBDdXJyeS5fMyhmYWlsd2l0aF9tZXNzYWdlKC8qIEZvcm1hdCAqL1tcbiAgICAgICAgICAgICAgICAgIC8qIFN0cmluZ19saXRlcmFsICovQmxvY2suX18oMTEsIFtcbiAgICAgICAgICAgICAgICAgICAgICBcImludmFsaWQgZm9ybWF0IFwiLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIENhbWxfc3RyaW5nICovQmxvY2suX18oMywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBOb19wYWRkaW5nICovMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogU3RyaW5nX2xpdGVyYWwgKi9CbG9jay5fXygxMSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCI6IHVuY2xvc2VkIHN1Yi1mb3JtYXQsIGV4cGVjdGVkIFxcXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIENoYXJfbGl0ZXJhbCAqL0Jsb2NrLl9fKDEyLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogXCIlXCIgKi8zNyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBDaGFyICovQmxvY2suX18oMCwgWy8qIFN0cmluZ19saXRlcmFsICovQmxvY2suX18oMTEsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxcIiBhdCBjaGFyYWN0ZXIgbnVtYmVyIFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogSW50ICovQmxvY2suX18oNCwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIEludF9kICovMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBOb19wYWRkaW5nICovMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBOb19wcmVjaXNpb24gKi8wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIEVuZF9vZl9mb3JtYXQgKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSldKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgIFwiaW52YWxpZCBmb3JtYXQgJVM6IHVuY2xvc2VkIHN1Yi1mb3JtYXQsIGV4cGVjdGVkIFxcXCIlJSVjXFxcIiBhdCBjaGFyYWN0ZXIgbnVtYmVyICVkXCJcbiAgICAgICAgICAgICAgICBdKSwgc3RyLCBjLCBlbmRfaW5kKTtcbiAgICAgIH1cbiAgICAgIHZhciBtYXRjaCA9IENhbWxfc3RyaW5nLmdldChzdHIsIHN0cl9pbmQpO1xuICAgICAgaWYgKG1hdGNoICE9PSAzNykge1xuICAgICAgICBfc3RyX2luZCA9IHN0cl9pbmQgKyAxIHwgMDtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKChzdHJfaW5kICsgMSB8IDApID09PSBlbmRfaW5kKSB7XG4gICAgICAgICAgaW52YWxpZF9mb3JtYXRfbWVzc2FnZShlbmRfaW5kLCBcInVuZXhwZWN0ZWQgZW5kIG9mIGZvcm1hdFwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQ2FtbF9zdHJpbmcuZ2V0KHN0ciwgc3RyX2luZCArIDEgfCAwKSA9PT0gYykge1xuICAgICAgICAgIHJldHVybiBzdHJfaW5kO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBtYXRjaCQxID0gQ2FtbF9zdHJpbmcuZ2V0KHN0ciwgc3RyX2luZCArIDEgfCAwKTtcbiAgICAgICAgICB2YXIgZXhpdCA9IDA7XG4gICAgICAgICAgaWYgKG1hdGNoJDEgPj0gOTUpIHtcbiAgICAgICAgICAgIGlmIChtYXRjaCQxID49IDEyMykge1xuICAgICAgICAgICAgICBpZiAobWF0Y2gkMSA+PSAxMjYpIHtcbiAgICAgICAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG1hdGNoJDEgLSAxMjMgfCAwKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDAgOiBcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgc3ViX2VuZCA9IHNlYXJjaF9zdWJmb3JtYXRfZW5kKHN0cl9pbmQgKyAyIHwgMCwgZW5kX2luZCwgLyogXCJ9XCIgKi8xMjUpO1xuICAgICAgICAgICAgICAgICAgICAgIF9zdHJfaW5kID0gc3ViX2VuZCArIDIgfCAwO1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMSA6IFxuICAgICAgICAgICAgICAgICAgICAgIGV4aXQgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgY2FzZSAyIDogXG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4cGVjdGVkX2NoYXJhY3RlcihzdHJfaW5kICsgMSB8IDAsIFwiY2hhcmFjdGVyICcpJ1wiLCAvKiBcIn1cIiAqLzEyNSk7XG4gICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2gkMSA+PSA5Nikge1xuICAgICAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmICgoc3RyX2luZCArIDIgfCAwKSA9PT0gZW5kX2luZCkge1xuICAgICAgICAgICAgICAgIGludmFsaWRfZm9ybWF0X21lc3NhZ2UoZW5kX2luZCwgXCJ1bmV4cGVjdGVkIGVuZCBvZiBmb3JtYXRcIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdmFyIG1hdGNoJDIgPSBDYW1sX3N0cmluZy5nZXQoc3RyLCBzdHJfaW5kICsgMiB8IDApO1xuICAgICAgICAgICAgICBpZiAobWF0Y2gkMiAhPT0gNDApIHtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2gkMiAhPT0gMTIzKSB7XG4gICAgICAgICAgICAgICAgICBfc3RyX2luZCA9IHN0cl9pbmQgKyAzIHwgMDtcbiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdmFyIHN1Yl9lbmQkMSA9IHNlYXJjaF9zdWJmb3JtYXRfZW5kKHN0cl9pbmQgKyAzIHwgMCwgZW5kX2luZCwgLyogXCJ9XCIgKi8xMjUpO1xuICAgICAgICAgICAgICAgICAgX3N0cl9pbmQgPSBzdWJfZW5kJDEgKyAyIHwgMDtcbiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHN1Yl9lbmQkMiA9IHNlYXJjaF9zdWJmb3JtYXRfZW5kKHN0cl9pbmQgKyAzIHwgMCwgZW5kX2luZCwgLyogXCIpXCIgKi80MSk7XG4gICAgICAgICAgICAgICAgX3N0cl9pbmQgPSBzdWJfZW5kJDIgKyAyIHwgMDtcbiAgICAgICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoJDEgIT09IDQwKSB7XG4gICAgICAgICAgICBpZiAobWF0Y2gkMSAhPT0gNDEpIHtcbiAgICAgICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gZXhwZWN0ZWRfY2hhcmFjdGVyKHN0cl9pbmQgKyAxIHwgMCwgXCJjaGFyYWN0ZXIgJ30nXCIsIC8qIFwiKVwiICovNDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgc3ViX2VuZCQzID0gc2VhcmNoX3N1YmZvcm1hdF9lbmQoc3RyX2luZCArIDIgfCAwLCBlbmRfaW5kLCAvKiBcIilcIiAqLzQxKTtcbiAgICAgICAgICAgIF9zdHJfaW5kID0gc3ViX2VuZCQzICsgMiB8IDA7XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChleGl0ID09PSAxKSB7XG4gICAgICAgICAgICBfc3RyX2luZCA9IHN0cl9pbmQgKyAyIHwgMDtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9O1xuICB2YXIgcGFyc2VfY29udmVyc2lvbiA9IGZ1bmN0aW9uIChwY3RfaW5kLCBzdHJfaW5kLCBlbmRfaW5kLCBwbHVzLCBzaGFycCwgc3BhY2UsIGlnbiwgcGFkLCBwcmVjLCBwYWRwcmVjLCBzeW1iKSB7XG4gICAgdmFyIHBsdXNfdXNlZCA9IGZhbHNlO1xuICAgIHZhciBzaGFycF91c2VkID0gZmFsc2U7XG4gICAgdmFyIHNwYWNlX3VzZWQgPSBmYWxzZTtcbiAgICB2YXIgaWduX3VzZWQgPSAvKiByZWNvcmQgKi9bLyogY29udGVudHMgKi9mYWxzZV07XG4gICAgdmFyIHBhZF91c2VkID0gZmFsc2U7XG4gICAgdmFyIHByZWNfdXNlZCA9IC8qIHJlY29yZCAqL1svKiBjb250ZW50cyAqL2ZhbHNlXTtcbiAgICB2YXIgY2hlY2tfbm9fMCA9IGZ1bmN0aW9uIChzeW1iLCBwYWQpIHtcbiAgICAgIGlmICh0eXBlb2YgcGFkID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiBwYWQ7XG4gICAgICB9IGVsc2UgaWYgKHBhZC50YWcpIHtcbiAgICAgICAgaWYgKHBhZFswXSA+PSAyKSB7XG4gICAgICAgICAgaWYgKGxlZ2FjeV9iZWhhdmlvciQxKSB7XG4gICAgICAgICAgICByZXR1cm4gLyogQXJnX3BhZGRpbmcgKi9CbG9jay5fXygxLCBbLyogUmlnaHQgKi8xXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpbmNvbXBhdGlibGVfZmxhZyhwY3RfaW5kLCBzdHJfaW5kLCBzeW1iLCBcIjBcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBwYWQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocGFkWzBdID49IDIpIHtcbiAgICAgICAgaWYgKGxlZ2FjeV9iZWhhdmlvciQxKSB7XG4gICAgICAgICAgcmV0dXJuIC8qIExpdF9wYWRkaW5nICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgICAgICAgICAvKiBSaWdodCAqLzEsXG4gICAgICAgICAgICAgICAgICAgIHBhZFsxXVxuICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGluY29tcGF0aWJsZV9mbGFnKHBjdF9pbmQsIHN0cl9pbmQsIHN5bWIsIFwiMFwiKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHBhZDtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBvcHRfb2ZfcGFkID0gZnVuY3Rpb24gKGMsIHBhZCkge1xuICAgICAgaWYgKHR5cGVvZiBwYWQgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSBpZiAocGFkLnRhZykge1xuICAgICAgICByZXR1cm4gaW5jb21wYXRpYmxlX2ZsYWcocGN0X2luZCwgc3RyX2luZCwgYywgXCInKidcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2l0Y2ggKHBhZFswXSkge1xuICAgICAgICAgIGNhc2UgMCA6IFxuICAgICAgICAgICAgICBpZiAobGVnYWN5X2JlaGF2aW9yJDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFkWzFdO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbmNvbXBhdGlibGVfZmxhZyhwY3RfaW5kLCBzdHJfaW5kLCBjLCBcIictJ1wiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgMSA6IFxuICAgICAgICAgICAgICByZXR1cm4gcGFkWzFdO1xuICAgICAgICAgIGNhc2UgMiA6IFxuICAgICAgICAgICAgICBpZiAobGVnYWN5X2JlaGF2aW9yJDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFkWzFdO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbmNvbXBhdGlibGVfZmxhZyhwY3RfaW5kLCBzdHJfaW5kLCBjLCBcIicwJ1wiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgZ2V0X3ByZWNfb3B0ID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICBwcmVjX3VzZWRbMF0gPSB0cnVlO1xuICAgICAgaWYgKHR5cGVvZiBwcmVjID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIGlmIChwcmVjICE9PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIGluY29tcGF0aWJsZV9mbGFnKHBjdF9pbmQsIHN0cl9pbmQsIC8qIFwiX1wiICovOTUsIFwiJyonXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBwcmVjWzBdO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIGZtdF9yZXN1bHQ7XG4gICAgdmFyIGV4aXQgPSAwO1xuICAgIHZhciBleGl0JDEgPSAwO1xuICAgIHZhciBleGl0JDIgPSAwO1xuICAgIGlmIChzeW1iID49IDEyNCkge1xuICAgICAgZXhpdCQxID0gNjtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpdGNoIChzeW1iKSB7XG4gICAgICAgIGNhc2UgMzMgOiBcbiAgICAgICAgICAgIHZhciBtYXRjaCA9IHBhcnNlX2xpdGVyYWwoc3RyX2luZCwgc3RyX2luZCwgZW5kX2luZCk7XG4gICAgICAgICAgICBmbXRfcmVzdWx0ID0gLyogRm10X0VCQiAqL1svKiBGbHVzaCAqL0Jsb2NrLl9fKDEwLCBbbWF0Y2hbMF1dKV07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA0MCA6IFxuICAgICAgICAgICAgdmFyIHN1Yl9lbmQgPSBzZWFyY2hfc3ViZm9ybWF0X2VuZChzdHJfaW5kLCBlbmRfaW5kLCAvKiBcIilcIiAqLzQxKTtcbiAgICAgICAgICAgIHZhciBiZWdfaW5kID0gc3ViX2VuZCArIDIgfCAwO1xuICAgICAgICAgICAgdmFyIG1hdGNoJDEgPSBwYXJzZV9saXRlcmFsKGJlZ19pbmQsIGJlZ19pbmQsIGVuZF9pbmQpO1xuICAgICAgICAgICAgdmFyIGZtdF9yZXN0ID0gbWF0Y2gkMVswXTtcbiAgICAgICAgICAgIHZhciBtYXRjaCQyID0gcGFyc2VfbGl0ZXJhbChzdHJfaW5kLCBzdHJfaW5kLCBzdWJfZW5kKTtcbiAgICAgICAgICAgIHZhciBzdWJfZm10dHkgPSBmbXR0eV9vZl9mbXQobWF0Y2gkMlswXSk7XG4gICAgICAgICAgICBpZiAoaWduX3VzZWRbMF0gPSB0cnVlLCBpZ24pIHtcbiAgICAgICAgICAgICAgcGFkX3VzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICB2YXIgaWdub3JlZF8wMDAgPSBvcHRfb2ZfcGFkKC8qIFwiX1wiICovOTUsIHBhZCk7XG4gICAgICAgICAgICAgIHZhciBpZ25vcmVkID0gLyogSWdub3JlZF9mb3JtYXRfc3Vic3QgKi9CbG9jay5fXyg4LCBbXG4gICAgICAgICAgICAgICAgICBpZ25vcmVkXzAwMCxcbiAgICAgICAgICAgICAgICAgIHN1Yl9mbXR0eVxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICBmbXRfcmVzdWx0ID0gLyogRm10X0VCQiAqL1svKiBJZ25vcmVkX3BhcmFtICovQmxvY2suX18oMjMsIFtcbiAgICAgICAgICAgICAgICAgICAgaWdub3JlZCxcbiAgICAgICAgICAgICAgICAgICAgZm10X3Jlc3RcbiAgICAgICAgICAgICAgICAgIF0pXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBhZF91c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgZm10X3Jlc3VsdCA9IC8qIEZtdF9FQkIgKi9bLyogRm9ybWF0X3N1YnN0ICovQmxvY2suX18oMTQsIFtcbiAgICAgICAgICAgICAgICAgICAgb3B0X29mX3BhZCgvKiBcIihcIiAqLzQwLCBwYWQpLFxuICAgICAgICAgICAgICAgICAgICBzdWJfZm10dHksXG4gICAgICAgICAgICAgICAgICAgIGZtdF9yZXN0XG4gICAgICAgICAgICAgICAgICBdKV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA0NCA6IFxuICAgICAgICAgICAgZm10X3Jlc3VsdCA9IHBhcnNlX2xpdGVyYWwoc3RyX2luZCwgc3RyX2luZCwgZW5kX2luZCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzNyA6IFxuICAgICAgICBjYXNlIDY0IDogXG4gICAgICAgICAgICBleGl0JDEgPSA0O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNjcgOiBcbiAgICAgICAgICAgIHZhciBtYXRjaCQzID0gcGFyc2VfbGl0ZXJhbChzdHJfaW5kLCBzdHJfaW5kLCBlbmRfaW5kKTtcbiAgICAgICAgICAgIHZhciBmbXRfcmVzdCQxID0gbWF0Y2gkM1swXTtcbiAgICAgICAgICAgIGZtdF9yZXN1bHQgPSAoaWduX3VzZWRbMF0gPSB0cnVlLCBpZ24pID8gLyogRm10X0VCQiAqL1svKiBJZ25vcmVkX3BhcmFtICovQmxvY2suX18oMjMsIFtcbiAgICAgICAgICAgICAgICAgICAgLyogSWdub3JlZF9jYW1sX2NoYXIgKi8xLFxuICAgICAgICAgICAgICAgICAgICBmbXRfcmVzdCQxXG4gICAgICAgICAgICAgICAgICBdKV0gOiAvKiBGbXRfRUJCICovWy8qIENhbWxfY2hhciAqL0Jsb2NrLl9fKDEsIFtmbXRfcmVzdCQxXSldO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNzggOiBcbiAgICAgICAgICAgIHZhciBtYXRjaCQ0ID0gcGFyc2VfbGl0ZXJhbChzdHJfaW5kLCBzdHJfaW5kLCBlbmRfaW5kKTtcbiAgICAgICAgICAgIHZhciBmbXRfcmVzdCQyID0gbWF0Y2gkNFswXTtcbiAgICAgICAgICAgIGlmIChpZ25fdXNlZFswXSA9IHRydWUsIGlnbikge1xuICAgICAgICAgICAgICB2YXIgaWdub3JlZCQxID0gLyogSWdub3JlZF9zY2FuX2dldF9jb3VudGVyICovQmxvY2suX18oMTAsIFsvKiBUb2tlbl9jb3VudGVyICovMl0pO1xuICAgICAgICAgICAgICBmbXRfcmVzdWx0ID0gLyogRm10X0VCQiAqL1svKiBJZ25vcmVkX3BhcmFtICovQmxvY2suX18oMjMsIFtcbiAgICAgICAgICAgICAgICAgICAgaWdub3JlZCQxLFxuICAgICAgICAgICAgICAgICAgICBmbXRfcmVzdCQyXG4gICAgICAgICAgICAgICAgICBdKV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBmbXRfcmVzdWx0ID0gLyogRm10X0VCQiAqL1svKiBTY2FuX2dldF9jb3VudGVyICovQmxvY2suX18oMjEsIFtcbiAgICAgICAgICAgICAgICAgICAgLyogVG9rZW5fY291bnRlciAqLzIsXG4gICAgICAgICAgICAgICAgICAgIGZtdF9yZXN0JDJcbiAgICAgICAgICAgICAgICAgIF0pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDgzIDogXG4gICAgICAgICAgICBwYWRfdXNlZCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgcGFkJDEgPSBjaGVja19ub18wKHN5bWIsIHBhZHByZWMpO1xuICAgICAgICAgICAgdmFyIG1hdGNoJDUgPSBwYXJzZV9saXRlcmFsKHN0cl9pbmQsIHN0cl9pbmQsIGVuZF9pbmQpO1xuICAgICAgICAgICAgdmFyIGZtdF9yZXN0JDMgPSBtYXRjaCQ1WzBdO1xuICAgICAgICAgICAgaWYgKGlnbl91c2VkWzBdID0gdHJ1ZSwgaWduKSB7XG4gICAgICAgICAgICAgIHBhZF91c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgdmFyIGlnbm9yZWQkMiA9IC8qIElnbm9yZWRfY2FtbF9zdHJpbmcgKi9CbG9jay5fXygxLCBbb3B0X29mX3BhZCgvKiBcIl9cIiAqLzk1LCBwYWRwcmVjKV0pO1xuICAgICAgICAgICAgICBmbXRfcmVzdWx0ID0gLyogRm10X0VCQiAqL1svKiBJZ25vcmVkX3BhcmFtICovQmxvY2suX18oMjMsIFtcbiAgICAgICAgICAgICAgICAgICAgaWdub3JlZCQyLFxuICAgICAgICAgICAgICAgICAgICBmbXRfcmVzdCQzXG4gICAgICAgICAgICAgICAgICBdKV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgbWF0Y2gkNiA9IG1ha2VfcGFkZGluZ19mbXRfZWJiKHBhZCQxLCBmbXRfcmVzdCQzKTtcbiAgICAgICAgICAgICAgZm10X3Jlc3VsdCA9IC8qIEZtdF9FQkIgKi9bLyogQ2FtbF9zdHJpbmcgKi9CbG9jay5fXygzLCBbXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoJDZbMF0sXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoJDZbMV1cbiAgICAgICAgICAgICAgICAgIF0pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDkxIDogXG4gICAgICAgICAgICB2YXIgbWF0Y2gkNyA9IHBhcnNlX2NoYXJfc2V0KHN0cl9pbmQsIGVuZF9pbmQpO1xuICAgICAgICAgICAgdmFyIGNoYXJfc2V0ID0gbWF0Y2gkN1sxXTtcbiAgICAgICAgICAgIHZhciBuZXh0X2luZCA9IG1hdGNoJDdbMF07XG4gICAgICAgICAgICB2YXIgbWF0Y2gkOCA9IHBhcnNlX2xpdGVyYWwobmV4dF9pbmQsIG5leHRfaW5kLCBlbmRfaW5kKTtcbiAgICAgICAgICAgIHZhciBmbXRfcmVzdCQ0ID0gbWF0Y2gkOFswXTtcbiAgICAgICAgICAgIGlmIChpZ25fdXNlZFswXSA9IHRydWUsIGlnbikge1xuICAgICAgICAgICAgICBwYWRfdXNlZCA9IHRydWU7XG4gICAgICAgICAgICAgIHZhciBpZ25vcmVkXzAwMCQxID0gb3B0X29mX3BhZCgvKiBcIl9cIiAqLzk1LCBwYWQpO1xuICAgICAgICAgICAgICB2YXIgaWdub3JlZCQzID0gLyogSWdub3JlZF9zY2FuX2NoYXJfc2V0ICovQmxvY2suX18oOSwgW1xuICAgICAgICAgICAgICAgICAgaWdub3JlZF8wMDAkMSxcbiAgICAgICAgICAgICAgICAgIGNoYXJfc2V0XG4gICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgIGZtdF9yZXN1bHQgPSAvKiBGbXRfRUJCICovWy8qIElnbm9yZWRfcGFyYW0gKi9CbG9jay5fXygyMywgW1xuICAgICAgICAgICAgICAgICAgICBpZ25vcmVkJDMsXG4gICAgICAgICAgICAgICAgICAgIGZtdF9yZXN0JDRcbiAgICAgICAgICAgICAgICAgIF0pXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBhZF91c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgZm10X3Jlc3VsdCA9IC8qIEZtdF9FQkIgKi9bLyogU2Nhbl9jaGFyX3NldCAqL0Jsb2NrLl9fKDIwLCBbXG4gICAgICAgICAgICAgICAgICAgIG9wdF9vZl9wYWQoLyogXCJbXCIgKi85MSwgcGFkKSxcbiAgICAgICAgICAgICAgICAgICAgY2hhcl9zZXQsXG4gICAgICAgICAgICAgICAgICAgIGZtdF9yZXN0JDRcbiAgICAgICAgICAgICAgICAgIF0pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDMyIDogXG4gICAgICAgIGNhc2UgMzUgOiBcbiAgICAgICAgY2FzZSA0MyA6IFxuICAgICAgICBjYXNlIDQ1IDogXG4gICAgICAgIGNhc2UgOTUgOiBcbiAgICAgICAgICAgIGV4aXQkMSA9IDU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA5NyA6IFxuICAgICAgICAgICAgdmFyIG1hdGNoJDkgPSBwYXJzZV9saXRlcmFsKHN0cl9pbmQsIHN0cl9pbmQsIGVuZF9pbmQpO1xuICAgICAgICAgICAgZm10X3Jlc3VsdCA9IC8qIEZtdF9FQkIgKi9bLyogQWxwaGEgKi9CbG9jay5fXygxNSwgW21hdGNoJDlbMF1dKV07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA2NiA6IFxuICAgICAgICBjYXNlIDk4IDogXG4gICAgICAgICAgICBleGl0JDEgPSAzO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgOTkgOiBcbiAgICAgICAgICAgIHZhciBjaGFyX2Zvcm1hdCA9IGZ1bmN0aW9uIChmbXRfcmVzdCkge1xuICAgICAgICAgICAgICBpZiAoaWduX3VzZWRbMF0gPSB0cnVlLCBpZ24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogRm10X0VCQiAqL1svKiBJZ25vcmVkX3BhcmFtICovQmxvY2suX18oMjMsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBJZ25vcmVkX2NoYXIgKi8wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZtdF9yZXN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgIF0pXTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogRm10X0VCQiAqL1svKiBDaGFyICovQmxvY2suX18oMCwgW2ZtdF9yZXN0XSldO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIHNjYW5fZm9ybWF0ID0gZnVuY3Rpb24gKGZtdF9yZXN0KSB7XG4gICAgICAgICAgICAgIGlmIChpZ25fdXNlZFswXSA9IHRydWUsIGlnbikge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiBGbXRfRUJCICovWy8qIElnbm9yZWRfcGFyYW0gKi9CbG9jay5fXygyMywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIElnbm9yZWRfc2Nhbl9uZXh0X2NoYXIgKi80LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZtdF9yZXN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgIF0pXTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogRm10X0VCQiAqL1svKiBTY2FuX25leHRfY2hhciAqL0Jsb2NrLl9fKDIyLCBbZm10X3Jlc3RdKV07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgbWF0Y2gkMTAgPSBwYXJzZV9saXRlcmFsKHN0cl9pbmQsIHN0cl9pbmQsIGVuZF9pbmQpO1xuICAgICAgICAgICAgdmFyIGZtdF9yZXN0JDUgPSBtYXRjaCQxMFswXTtcbiAgICAgICAgICAgIHBhZF91c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBtYXRjaCQxMSA9IG9wdF9vZl9wYWQoLyogXCJjXCIgKi85OSwgcGFkKTtcbiAgICAgICAgICAgIGZtdF9yZXN1bHQgPSBtYXRjaCQxMSAhPT0gdW5kZWZpbmVkID8gKFxuICAgICAgICAgICAgICAgIG1hdGNoJDExICE9PSAwID8gKFxuICAgICAgICAgICAgICAgICAgICBsZWdhY3lfYmVoYXZpb3IkMSA/IGNoYXJfZm9ybWF0KGZtdF9yZXN0JDUpIDogaW52YWxpZF9mb3JtYXRfbWVzc2FnZShzdHJfaW5kLCBcIm5vbi16ZXJvIHdpZHRocyBhcmUgdW5zdXBwb3J0ZWQgZm9yICVjIGNvbnZlcnNpb25zXCIpXG4gICAgICAgICAgICAgICAgICApIDogc2Nhbl9mb3JtYXQoZm10X3Jlc3QkNSlcbiAgICAgICAgICAgICAgKSA6IGNoYXJfZm9ybWF0KGZtdF9yZXN0JDUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNjkgOiBcbiAgICAgICAgY2FzZSA3MCA6IFxuICAgICAgICBjYXNlIDcxIDogXG4gICAgICAgIGNhc2UgMTAxIDogXG4gICAgICAgIGNhc2UgMTAyIDogXG4gICAgICAgIGNhc2UgMTAzIDogXG4gICAgICAgICAgICBleGl0JDEgPSAyO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNzYgOiBcbiAgICAgICAgY2FzZSAxMDggOiBcbiAgICAgICAgY2FzZSAxMTAgOiBcbiAgICAgICAgICAgIGV4aXQkMiA9IDg7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMTQgOiBcbiAgICAgICAgICAgIHZhciBtYXRjaCQxMiA9IHBhcnNlX2xpdGVyYWwoc3RyX2luZCwgc3RyX2luZCwgZW5kX2luZCk7XG4gICAgICAgICAgICB2YXIgZm10X3Jlc3QkNiA9IG1hdGNoJDEyWzBdO1xuICAgICAgICAgICAgZm10X3Jlc3VsdCA9IChpZ25fdXNlZFswXSA9IHRydWUsIGlnbikgPyAvKiBGbXRfRUJCICovWy8qIElnbm9yZWRfcGFyYW0gKi9CbG9jay5fXygyMywgW1xuICAgICAgICAgICAgICAgICAgICAvKiBJZ25vcmVkX3JlYWRlciAqLzMsXG4gICAgICAgICAgICAgICAgICAgIGZtdF9yZXN0JDZcbiAgICAgICAgICAgICAgICAgIF0pXSA6IC8qIEZtdF9FQkIgKi9bLyogUmVhZGVyICovQmxvY2suX18oMTksIFtmbXRfcmVzdCQ2XSldO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTE1IDogXG4gICAgICAgICAgICBwYWRfdXNlZCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgcGFkJDIgPSBjaGVja19ub18wKHN5bWIsIHBhZHByZWMpO1xuICAgICAgICAgICAgdmFyIG1hdGNoJDEzID0gcGFyc2VfbGl0ZXJhbChzdHJfaW5kLCBzdHJfaW5kLCBlbmRfaW5kKTtcbiAgICAgICAgICAgIHZhciBmbXRfcmVzdCQ3ID0gbWF0Y2gkMTNbMF07XG4gICAgICAgICAgICBpZiAoaWduX3VzZWRbMF0gPSB0cnVlLCBpZ24pIHtcbiAgICAgICAgICAgICAgcGFkX3VzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICB2YXIgaWdub3JlZCQ0ID0gLyogSWdub3JlZF9zdHJpbmcgKi9CbG9jay5fXygwLCBbb3B0X29mX3BhZCgvKiBcIl9cIiAqLzk1LCBwYWRwcmVjKV0pO1xuICAgICAgICAgICAgICBmbXRfcmVzdWx0ID0gLyogRm10X0VCQiAqL1svKiBJZ25vcmVkX3BhcmFtICovQmxvY2suX18oMjMsIFtcbiAgICAgICAgICAgICAgICAgICAgaWdub3JlZCQ0LFxuICAgICAgICAgICAgICAgICAgICBmbXRfcmVzdCQ3XG4gICAgICAgICAgICAgICAgICBdKV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgbWF0Y2gkMTQgPSBtYWtlX3BhZGRpbmdfZm10X2ViYihwYWQkMiwgZm10X3Jlc3QkNyk7XG4gICAgICAgICAgICAgIGZtdF9yZXN1bHQgPSAvKiBGbXRfRUJCICovWy8qIFN0cmluZyAqL0Jsb2NrLl9fKDIsIFtcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2gkMTRbMF0sXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoJDE0WzFdXG4gICAgICAgICAgICAgICAgICBdKV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMTYgOiBcbiAgICAgICAgICAgIHZhciBtYXRjaCQxNSA9IHBhcnNlX2xpdGVyYWwoc3RyX2luZCwgc3RyX2luZCwgZW5kX2luZCk7XG4gICAgICAgICAgICBmbXRfcmVzdWx0ID0gLyogRm10X0VCQiAqL1svKiBUaGV0YSAqL0Jsb2NrLl9fKDE2LCBbbWF0Y2gkMTVbMF1dKV07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA4OCA6IFxuICAgICAgICBjYXNlIDEwMCA6IFxuICAgICAgICBjYXNlIDEwNSA6IFxuICAgICAgICBjYXNlIDExMSA6IFxuICAgICAgICBjYXNlIDExNyA6IFxuICAgICAgICBjYXNlIDEyMCA6IFxuICAgICAgICAgICAgZXhpdCQyID0gNztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDAgOiBcbiAgICAgICAgY2FzZSAxIDogXG4gICAgICAgIGNhc2UgMiA6IFxuICAgICAgICBjYXNlIDMgOiBcbiAgICAgICAgY2FzZSA0IDogXG4gICAgICAgIGNhc2UgNSA6IFxuICAgICAgICBjYXNlIDYgOiBcbiAgICAgICAgY2FzZSA3IDogXG4gICAgICAgIGNhc2UgOCA6IFxuICAgICAgICBjYXNlIDkgOiBcbiAgICAgICAgY2FzZSAxMCA6IFxuICAgICAgICBjYXNlIDExIDogXG4gICAgICAgIGNhc2UgMTIgOiBcbiAgICAgICAgY2FzZSAxMyA6IFxuICAgICAgICBjYXNlIDE0IDogXG4gICAgICAgIGNhc2UgMTUgOiBcbiAgICAgICAgY2FzZSAxNiA6IFxuICAgICAgICBjYXNlIDE3IDogXG4gICAgICAgIGNhc2UgMTggOiBcbiAgICAgICAgY2FzZSAxOSA6IFxuICAgICAgICBjYXNlIDIwIDogXG4gICAgICAgIGNhc2UgMjEgOiBcbiAgICAgICAgY2FzZSAyMiA6IFxuICAgICAgICBjYXNlIDIzIDogXG4gICAgICAgIGNhc2UgMjQgOiBcbiAgICAgICAgY2FzZSAyNSA6IFxuICAgICAgICBjYXNlIDI2IDogXG4gICAgICAgIGNhc2UgMjcgOiBcbiAgICAgICAgY2FzZSAyOCA6IFxuICAgICAgICBjYXNlIDI5IDogXG4gICAgICAgIGNhc2UgMzAgOiBcbiAgICAgICAgY2FzZSAzMSA6IFxuICAgICAgICBjYXNlIDM0IDogXG4gICAgICAgIGNhc2UgMzYgOiBcbiAgICAgICAgY2FzZSAzOCA6IFxuICAgICAgICBjYXNlIDM5IDogXG4gICAgICAgIGNhc2UgNDEgOiBcbiAgICAgICAgY2FzZSA0MiA6IFxuICAgICAgICBjYXNlIDQ2IDogXG4gICAgICAgIGNhc2UgNDcgOiBcbiAgICAgICAgY2FzZSA0OCA6IFxuICAgICAgICBjYXNlIDQ5IDogXG4gICAgICAgIGNhc2UgNTAgOiBcbiAgICAgICAgY2FzZSA1MSA6IFxuICAgICAgICBjYXNlIDUyIDogXG4gICAgICAgIGNhc2UgNTMgOiBcbiAgICAgICAgY2FzZSA1NCA6IFxuICAgICAgICBjYXNlIDU1IDogXG4gICAgICAgIGNhc2UgNTYgOiBcbiAgICAgICAgY2FzZSA1NyA6IFxuICAgICAgICBjYXNlIDU4IDogXG4gICAgICAgIGNhc2UgNTkgOiBcbiAgICAgICAgY2FzZSA2MCA6IFxuICAgICAgICBjYXNlIDYxIDogXG4gICAgICAgIGNhc2UgNjIgOiBcbiAgICAgICAgY2FzZSA2MyA6IFxuICAgICAgICBjYXNlIDY1IDogXG4gICAgICAgIGNhc2UgNjggOiBcbiAgICAgICAgY2FzZSA3MiA6IFxuICAgICAgICBjYXNlIDczIDogXG4gICAgICAgIGNhc2UgNzQgOiBcbiAgICAgICAgY2FzZSA3NSA6IFxuICAgICAgICBjYXNlIDc3IDogXG4gICAgICAgIGNhc2UgNzkgOiBcbiAgICAgICAgY2FzZSA4MCA6IFxuICAgICAgICBjYXNlIDgxIDogXG4gICAgICAgIGNhc2UgODIgOiBcbiAgICAgICAgY2FzZSA4NCA6IFxuICAgICAgICBjYXNlIDg1IDogXG4gICAgICAgIGNhc2UgODYgOiBcbiAgICAgICAgY2FzZSA4NyA6IFxuICAgICAgICBjYXNlIDg5IDogXG4gICAgICAgIGNhc2UgOTAgOiBcbiAgICAgICAgY2FzZSA5MiA6IFxuICAgICAgICBjYXNlIDkzIDogXG4gICAgICAgIGNhc2UgOTQgOiBcbiAgICAgICAgY2FzZSA5NiA6IFxuICAgICAgICBjYXNlIDEwNCA6IFxuICAgICAgICBjYXNlIDEwNiA6IFxuICAgICAgICBjYXNlIDEwNyA6IFxuICAgICAgICBjYXNlIDEwOSA6IFxuICAgICAgICBjYXNlIDExMiA6IFxuICAgICAgICBjYXNlIDExMyA6IFxuICAgICAgICBjYXNlIDExOCA6IFxuICAgICAgICBjYXNlIDExOSA6IFxuICAgICAgICBjYXNlIDEyMSA6IFxuICAgICAgICBjYXNlIDEyMiA6IFxuICAgICAgICAgICAgZXhpdCQxID0gNjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDEyMyA6IFxuICAgICAgICAgICAgdmFyIHN1Yl9lbmQkMSA9IHNlYXJjaF9zdWJmb3JtYXRfZW5kKHN0cl9pbmQsIGVuZF9pbmQsIC8qIFwifVwiICovMTI1KTtcbiAgICAgICAgICAgIHZhciBtYXRjaCQxNiA9IHBhcnNlX2xpdGVyYWwoc3RyX2luZCwgc3RyX2luZCwgc3ViX2VuZCQxKTtcbiAgICAgICAgICAgIHZhciBiZWdfaW5kJDEgPSBzdWJfZW5kJDEgKyAyIHwgMDtcbiAgICAgICAgICAgIHZhciBtYXRjaCQxNyA9IHBhcnNlX2xpdGVyYWwoYmVnX2luZCQxLCBiZWdfaW5kJDEsIGVuZF9pbmQpO1xuICAgICAgICAgICAgdmFyIGZtdF9yZXN0JDggPSBtYXRjaCQxN1swXTtcbiAgICAgICAgICAgIHZhciBzdWJfZm10dHkkMSA9IGZtdHR5X29mX2ZtdChtYXRjaCQxNlswXSk7XG4gICAgICAgICAgICBpZiAoaWduX3VzZWRbMF0gPSB0cnVlLCBpZ24pIHtcbiAgICAgICAgICAgICAgcGFkX3VzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICB2YXIgaWdub3JlZF8wMDAkMiA9IG9wdF9vZl9wYWQoLyogXCJfXCIgKi85NSwgcGFkKTtcbiAgICAgICAgICAgICAgdmFyIGlnbm9yZWQkNSA9IC8qIElnbm9yZWRfZm9ybWF0X2FyZyAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgIGlnbm9yZWRfMDAwJDIsXG4gICAgICAgICAgICAgICAgICBzdWJfZm10dHkkMVxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICBmbXRfcmVzdWx0ID0gLyogRm10X0VCQiAqL1svKiBJZ25vcmVkX3BhcmFtICovQmxvY2suX18oMjMsIFtcbiAgICAgICAgICAgICAgICAgICAgaWdub3JlZCQ1LFxuICAgICAgICAgICAgICAgICAgICBmbXRfcmVzdCQ4XG4gICAgICAgICAgICAgICAgICBdKV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwYWRfdXNlZCA9IHRydWU7XG4gICAgICAgICAgICAgIGZtdF9yZXN1bHQgPSAvKiBGbXRfRUJCICovWy8qIEZvcm1hdF9hcmcgKi9CbG9jay5fXygxMywgW1xuICAgICAgICAgICAgICAgICAgICBvcHRfb2ZfcGFkKC8qIFwie1wiICovMTIzLCBwYWQpLFxuICAgICAgICAgICAgICAgICAgICBzdWJfZm10dHkkMSxcbiAgICAgICAgICAgICAgICAgICAgZm10X3Jlc3QkOFxuICAgICAgICAgICAgICAgICAgXSldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIFxuICAgICAgfVxuICAgIH1cbiAgICBzd2l0Y2ggKGV4aXQkMikge1xuICAgICAgY2FzZSA3IDogXG4gICAgICAgICAgcGx1c191c2VkID0gdHJ1ZTtcbiAgICAgICAgICBzaGFycF91c2VkID0gdHJ1ZTtcbiAgICAgICAgICBzcGFjZV91c2VkID0gdHJ1ZTtcbiAgICAgICAgICB2YXIgaWNvbnYgPSBjb21wdXRlX2ludF9jb252KHBjdF9pbmQsIHN0cl9pbmQsIHBsdXMsIHNoYXJwLCBzcGFjZSwgc3ltYik7XG4gICAgICAgICAgdmFyIG1hdGNoJDE4ID0gcGFyc2VfbGl0ZXJhbChzdHJfaW5kLCBzdHJfaW5kLCBlbmRfaW5kKTtcbiAgICAgICAgICB2YXIgZm10X3Jlc3QkOSA9IG1hdGNoJDE4WzBdO1xuICAgICAgICAgIGlmIChpZ25fdXNlZFswXSA9IHRydWUsIGlnbikge1xuICAgICAgICAgICAgcGFkX3VzZWQgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIGlnbm9yZWRfMDAxID0gb3B0X29mX3BhZCgvKiBcIl9cIiAqLzk1LCBwYWQpO1xuICAgICAgICAgICAgdmFyIGlnbm9yZWQkNiA9IC8qIElnbm9yZWRfaW50ICovQmxvY2suX18oMiwgW1xuICAgICAgICAgICAgICAgIGljb252LFxuICAgICAgICAgICAgICAgIGlnbm9yZWRfMDAxXG4gICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgZm10X3Jlc3VsdCA9IC8qIEZtdF9FQkIgKi9bLyogSWdub3JlZF9wYXJhbSAqL0Jsb2NrLl9fKDIzLCBbXG4gICAgICAgICAgICAgICAgICBpZ25vcmVkJDYsXG4gICAgICAgICAgICAgICAgICBmbXRfcmVzdCQ5XG4gICAgICAgICAgICAgICAgXSldO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYWRfdXNlZCA9IHRydWU7XG4gICAgICAgICAgICBwcmVjX3VzZWRbMF0gPSB0cnVlO1xuICAgICAgICAgICAgdmFyIHBhZCQzO1xuICAgICAgICAgICAgdmFyIGV4aXQkMyA9IDA7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHByZWMgPT09IFwibnVtYmVyXCIgJiYgcHJlYyA9PT0gMCkge1xuICAgICAgICAgICAgICBwYWQkMyA9IHBhZDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGV4aXQkMyA9IDk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXhpdCQzID09PSA5KSB7XG4gICAgICAgICAgICAgIHBhZCQzID0gdHlwZW9mIHBhZCA9PT0gXCJudW1iZXJcIiA/IC8qIE5vX3BhZGRpbmcgKi8wIDogKFxuICAgICAgICAgICAgICAgICAgcGFkLnRhZyA/IChcbiAgICAgICAgICAgICAgICAgICAgICBwYWRbMF0gPj0gMiA/IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbGVnYWN5X2JlaGF2aW9yJDEgPyAvKiBBcmdfcGFkZGluZyAqL0Jsb2NrLl9fKDEsIFsvKiBSaWdodCAqLzFdKSA6IGluY29tcGF0aWJsZV9mbGFnKHBjdF9pbmQsIHN0cl9pbmQsIC8qIFwiMFwiICovNDgsIFwicHJlY2lzaW9uXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICApIDogcGFkXG4gICAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgICAgcGFkWzBdID49IDIgPyAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGxlZ2FjeV9iZWhhdmlvciQxID8gLyogTGl0X3BhZGRpbmcgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFJpZ2h0ICovMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkWzFdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSA6IGluY29tcGF0aWJsZV9mbGFnKHBjdF9pbmQsIHN0cl9pbmQsIC8qIFwiMFwiICovNDgsIFwicHJlY2lzaW9uXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICApIDogcGFkXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG1hdGNoJDE5ID0gbWFrZV9wYWRwcmVjX2ZtdF9lYmIocGFkJDMsIChwcmVjX3VzZWRbMF0gPSB0cnVlLCBwcmVjKSwgZm10X3Jlc3QkOSk7XG4gICAgICAgICAgICBmbXRfcmVzdWx0ID0gLyogRm10X0VCQiAqL1svKiBJbnQgKi9CbG9jay5fXyg0LCBbXG4gICAgICAgICAgICAgICAgICBpY29udixcbiAgICAgICAgICAgICAgICAgIG1hdGNoJDE5WzBdLFxuICAgICAgICAgICAgICAgICAgbWF0Y2gkMTlbMV0sXG4gICAgICAgICAgICAgICAgICBtYXRjaCQxOVsyXVxuICAgICAgICAgICAgICAgIF0pXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDggOiBcbiAgICAgICAgICBpZiAoc3RyX2luZCA9PT0gZW5kX2luZCB8fCAhaXNfaW50X2Jhc2UoQ2FtbF9zdHJpbmcuZ2V0KHN0ciwgc3RyX2luZCkpKSB7XG4gICAgICAgICAgICB2YXIgbWF0Y2gkMjAgPSBwYXJzZV9saXRlcmFsKHN0cl9pbmQsIHN0cl9pbmQsIGVuZF9pbmQpO1xuICAgICAgICAgICAgdmFyIGZtdF9yZXN0JDEwID0gbWF0Y2gkMjBbMF07XG4gICAgICAgICAgICB2YXIgY291bnRlciA9IGNvdW50ZXJfb2ZfY2hhcihzeW1iKTtcbiAgICAgICAgICAgIGlmIChpZ25fdXNlZFswXSA9IHRydWUsIGlnbikge1xuICAgICAgICAgICAgICB2YXIgaWdub3JlZCQ3ID0gLyogSWdub3JlZF9zY2FuX2dldF9jb3VudGVyICovQmxvY2suX18oMTAsIFtjb3VudGVyXSk7XG4gICAgICAgICAgICAgIGZtdF9yZXN1bHQgPSAvKiBGbXRfRUJCICovWy8qIElnbm9yZWRfcGFyYW0gKi9CbG9jay5fXygyMywgW1xuICAgICAgICAgICAgICAgICAgICBpZ25vcmVkJDcsXG4gICAgICAgICAgICAgICAgICAgIGZtdF9yZXN0JDEwXG4gICAgICAgICAgICAgICAgICBdKV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBmbXRfcmVzdWx0ID0gLyogRm10X0VCQiAqL1svKiBTY2FuX2dldF9jb3VudGVyICovQmxvY2suX18oMjEsIFtcbiAgICAgICAgICAgICAgICAgICAgY291bnRlcixcbiAgICAgICAgICAgICAgICAgICAgZm10X3Jlc3QkMTBcbiAgICAgICAgICAgICAgICAgIF0pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXhpdCQxID0gNjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBcbiAgICB9XG4gICAgc3dpdGNoIChleGl0JDEpIHtcbiAgICAgIGNhc2UgMiA6IFxuICAgICAgICAgIHBsdXNfdXNlZCA9IHRydWU7XG4gICAgICAgICAgc3BhY2VfdXNlZCA9IHRydWU7XG4gICAgICAgICAgdmFyIGZjb252ID0gY29tcHV0ZV9mbG9hdF9jb252KHBjdF9pbmQsIHN0cl9pbmQsIHBsdXMsIHNwYWNlLCBzeW1iKTtcbiAgICAgICAgICB2YXIgbWF0Y2gkMjEgPSBwYXJzZV9saXRlcmFsKHN0cl9pbmQsIHN0cl9pbmQsIGVuZF9pbmQpO1xuICAgICAgICAgIHZhciBmbXRfcmVzdCQxMSA9IG1hdGNoJDIxWzBdO1xuICAgICAgICAgIGlmIChpZ25fdXNlZFswXSA9IHRydWUsIGlnbikge1xuICAgICAgICAgICAgcGFkX3VzZWQgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIGlnbm9yZWRfMDAwJDMgPSBvcHRfb2ZfcGFkKC8qIFwiX1wiICovOTUsIHBhZCk7XG4gICAgICAgICAgICB2YXIgaWdub3JlZF8wMDEkMSA9IGdldF9wcmVjX29wdCgvKiAoKSAqLzApO1xuICAgICAgICAgICAgdmFyIGlnbm9yZWQkOCA9IC8qIElnbm9yZWRfZmxvYXQgKi9CbG9jay5fXyg2LCBbXG4gICAgICAgICAgICAgICAgaWdub3JlZF8wMDAkMyxcbiAgICAgICAgICAgICAgICBpZ25vcmVkXzAwMSQxXG4gICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgZm10X3Jlc3VsdCA9IC8qIEZtdF9FQkIgKi9bLyogSWdub3JlZF9wYXJhbSAqL0Jsb2NrLl9fKDIzLCBbXG4gICAgICAgICAgICAgICAgICBpZ25vcmVkJDgsXG4gICAgICAgICAgICAgICAgICBmbXRfcmVzdCQxMVxuICAgICAgICAgICAgICAgIF0pXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFkX3VzZWQgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIG1hdGNoJDIyID0gbWFrZV9wYWRwcmVjX2ZtdF9lYmIocGFkLCAocHJlY191c2VkWzBdID0gdHJ1ZSwgcHJlYyksIGZtdF9yZXN0JDExKTtcbiAgICAgICAgICAgIGZtdF9yZXN1bHQgPSAvKiBGbXRfRUJCICovWy8qIEZsb2F0ICovQmxvY2suX18oOCwgW1xuICAgICAgICAgICAgICAgICAgZmNvbnYsXG4gICAgICAgICAgICAgICAgICBtYXRjaCQyMlswXSxcbiAgICAgICAgICAgICAgICAgIG1hdGNoJDIyWzFdLFxuICAgICAgICAgICAgICAgICAgbWF0Y2gkMjJbMl1cbiAgICAgICAgICAgICAgICBdKV07XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzIDogXG4gICAgICAgICAgdmFyIG1hdGNoJDIzID0gcGFyc2VfbGl0ZXJhbChzdHJfaW5kLCBzdHJfaW5kLCBlbmRfaW5kKTtcbiAgICAgICAgICB2YXIgZm10X3Jlc3QkMTIgPSBtYXRjaCQyM1swXTtcbiAgICAgICAgICBmbXRfcmVzdWx0ID0gKGlnbl91c2VkWzBdID0gdHJ1ZSwgaWduKSA/IC8qIEZtdF9FQkIgKi9bLyogSWdub3JlZF9wYXJhbSAqL0Jsb2NrLl9fKDIzLCBbXG4gICAgICAgICAgICAgICAgICAvKiBJZ25vcmVkX2Jvb2wgKi8yLFxuICAgICAgICAgICAgICAgICAgZm10X3Jlc3QkMTJcbiAgICAgICAgICAgICAgICBdKV0gOiAvKiBGbXRfRUJCICovWy8qIEJvb2wgKi9CbG9jay5fXyg5LCBbZm10X3Jlc3QkMTJdKV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDQgOiBcbiAgICAgICAgICB2YXIgbWF0Y2gkMjQgPSBwYXJzZV9saXRlcmFsKHN0cl9pbmQsIHN0cl9pbmQsIGVuZF9pbmQpO1xuICAgICAgICAgIGZtdF9yZXN1bHQgPSAvKiBGbXRfRUJCICovWy8qIENoYXJfbGl0ZXJhbCAqL0Jsb2NrLl9fKDEyLCBbXG4gICAgICAgICAgICAgICAgc3ltYixcbiAgICAgICAgICAgICAgICBtYXRjaCQyNFswXVxuICAgICAgICAgICAgICBdKV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDUgOiBcbiAgICAgICAgICBmbXRfcmVzdWx0ID0gQ3VycnkuXzMoZmFpbHdpdGhfbWVzc2FnZSgvKiBGb3JtYXQgKi9bXG4gICAgICAgICAgICAgICAgICAgIC8qIFN0cmluZ19saXRlcmFsICovQmxvY2suX18oMTEsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiaW52YWxpZCBmb3JtYXQgXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBDYW1sX3N0cmluZyAqL0Jsb2NrLl9fKDMsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBOb19wYWRkaW5nICovMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBTdHJpbmdfbGl0ZXJhbCAqL0Jsb2NrLl9fKDExLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiOiBhdCBjaGFyYWN0ZXIgbnVtYmVyIFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBJbnQgKi9CbG9jay5fXyg0LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBJbnRfZCAqLzAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBOb19wYWRkaW5nICovMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIE5vX3ByZWNpc2lvbiAqLzAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBTdHJpbmdfbGl0ZXJhbCAqL0Jsb2NrLl9fKDExLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIsIGZsYWcgXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogQ2FtbF9jaGFyICovQmxvY2suX18oMSwgWy8qIFN0cmluZ19saXRlcmFsICovQmxvY2suX18oMTEsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiIGlzIG9ubHkgYWxsb3dlZCBhZnRlciB0aGUgJ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogQ2hhcl9saXRlcmFsICovQmxvY2suX18oMTIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBcIiVcIiAqLzM3LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFN0cmluZ19saXRlcmFsICovQmxvY2suX18oMTEsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCInLCBiZWZvcmUgcGFkZGluZyBhbmQgcHJlY2lzaW9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIEVuZF9vZl9mb3JtYXQgKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgXCJpbnZhbGlkIGZvcm1hdCAlUzogYXQgY2hhcmFjdGVyIG51bWJlciAlZCwgZmxhZyAlQyBpcyBvbmx5IGFsbG93ZWQgYWZ0ZXIgdGhlICclJScsIGJlZm9yZSBwYWRkaW5nIGFuZCBwcmVjaXNpb25cIlxuICAgICAgICAgICAgICAgICAgXSksIHN0ciwgcGN0X2luZCwgc3ltYik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDYgOiBcbiAgICAgICAgICBpZiAoc3ltYiA+PSAxMDgpIHtcbiAgICAgICAgICAgIGlmIChzeW1iID49IDExMSkge1xuICAgICAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHN3aXRjaCAoc3ltYiAtIDEwOCB8IDApIHtcbiAgICAgICAgICAgICAgICBjYXNlIDAgOiBcbiAgICAgICAgICAgICAgICAgICAgcGx1c191c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgc2hhcnBfdXNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHNwYWNlX3VzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaWNvbnYkMSA9IGNvbXB1dGVfaW50X2NvbnYocGN0X2luZCwgc3RyX2luZCArIDEgfCAwLCBwbHVzLCBzaGFycCwgc3BhY2UsIENhbWxfc3RyaW5nLmdldChzdHIsIHN0cl9pbmQpKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJlZ19pbmQkMiA9IHN0cl9pbmQgKyAxIHwgMDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoJDI1ID0gcGFyc2VfbGl0ZXJhbChiZWdfaW5kJDIsIGJlZ19pbmQkMiwgZW5kX2luZCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmbXRfcmVzdCQxMyA9IG1hdGNoJDI1WzBdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaWduX3VzZWRbMF0gPSB0cnVlLCBpZ24pIHtcbiAgICAgICAgICAgICAgICAgICAgICBwYWRfdXNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGlnbm9yZWRfMDAxJDIgPSBvcHRfb2ZfcGFkKC8qIFwiX1wiICovOTUsIHBhZCk7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGlnbm9yZWQkOSA9IC8qIElnbm9yZWRfaW50MzIgKi9CbG9jay5fXygzLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGljb252JDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlnbm9yZWRfMDAxJDJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICAgIGZtdF9yZXN1bHQgPSAvKiBGbXRfRUJCICovWy8qIElnbm9yZWRfcGFyYW0gKi9CbG9jay5fXygyMywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlnbm9yZWQkOSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbXRfcmVzdCQxM1xuICAgICAgICAgICAgICAgICAgICAgICAgICBdKV07XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgcGFkX3VzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaCQyNiA9IG1ha2VfcGFkcHJlY19mbXRfZWJiKHBhZCwgKHByZWNfdXNlZFswXSA9IHRydWUsIHByZWMpLCBmbXRfcmVzdCQxMyk7XG4gICAgICAgICAgICAgICAgICAgICAgZm10X3Jlc3VsdCA9IC8qIEZtdF9FQkIgKi9bLyogSW50MzIgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbnYkMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCQyNlswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCQyNlsxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCQyNlsyXVxuICAgICAgICAgICAgICAgICAgICAgICAgICBdKV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxIDogXG4gICAgICAgICAgICAgICAgICAgIGV4aXQgPSAxO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDIgOiBcbiAgICAgICAgICAgICAgICAgICAgcGx1c191c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgc2hhcnBfdXNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHNwYWNlX3VzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaWNvbnYkMiA9IGNvbXB1dGVfaW50X2NvbnYocGN0X2luZCwgc3RyX2luZCArIDEgfCAwLCBwbHVzLCBzaGFycCwgc3BhY2UsIENhbWxfc3RyaW5nLmdldChzdHIsIHN0cl9pbmQpKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJlZ19pbmQkMyA9IHN0cl9pbmQgKyAxIHwgMDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoJDI3ID0gcGFyc2VfbGl0ZXJhbChiZWdfaW5kJDMsIGJlZ19pbmQkMywgZW5kX2luZCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmbXRfcmVzdCQxNCA9IG1hdGNoJDI3WzBdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaWduX3VzZWRbMF0gPSB0cnVlLCBpZ24pIHtcbiAgICAgICAgICAgICAgICAgICAgICBwYWRfdXNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGlnbm9yZWRfMDAxJDMgPSBvcHRfb2ZfcGFkKC8qIFwiX1wiICovOTUsIHBhZCk7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGlnbm9yZWQkMTAgPSAvKiBJZ25vcmVkX25hdGl2ZWludCAqL0Jsb2NrLl9fKDQsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbnYkMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWdub3JlZF8wMDEkM1xuICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgZm10X3Jlc3VsdCA9IC8qIEZtdF9FQkIgKi9bLyogSWdub3JlZF9wYXJhbSAqL0Jsb2NrLl9fKDIzLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWdub3JlZCQxMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbXRfcmVzdCQxNFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdKV07XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgcGFkX3VzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaCQyOCA9IG1ha2VfcGFkcHJlY19mbXRfZWJiKHBhZCwgKHByZWNfdXNlZFswXSA9IHRydWUsIHByZWMpLCBmbXRfcmVzdCQxNCk7XG4gICAgICAgICAgICAgICAgICAgICAgZm10X3Jlc3VsdCA9IC8qIEZtdF9FQkIgKi9bLyogTmF0aXZlaW50ICovQmxvY2suX18oNiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb252JDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gkMjhbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gkMjhbMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gkMjhbMl1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgXSldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChzeW1iICE9PSA3Nikge1xuICAgICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBsdXNfdXNlZCA9IHRydWU7XG4gICAgICAgICAgICBzaGFycF91c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHNwYWNlX3VzZWQgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIGljb252JDMgPSBjb21wdXRlX2ludF9jb252KHBjdF9pbmQsIHN0cl9pbmQgKyAxIHwgMCwgcGx1cywgc2hhcnAsIHNwYWNlLCBDYW1sX3N0cmluZy5nZXQoc3RyLCBzdHJfaW5kKSk7XG4gICAgICAgICAgICB2YXIgYmVnX2luZCQ0ID0gc3RyX2luZCArIDEgfCAwO1xuICAgICAgICAgICAgdmFyIG1hdGNoJDI5ID0gcGFyc2VfbGl0ZXJhbChiZWdfaW5kJDQsIGJlZ19pbmQkNCwgZW5kX2luZCk7XG4gICAgICAgICAgICB2YXIgZm10X3Jlc3QkMTUgPSBtYXRjaCQyOVswXTtcbiAgICAgICAgICAgIGlmIChpZ25fdXNlZFswXSA9IHRydWUsIGlnbikge1xuICAgICAgICAgICAgICBwYWRfdXNlZCA9IHRydWU7XG4gICAgICAgICAgICAgIHZhciBpZ25vcmVkXzAwMSQ0ID0gb3B0X29mX3BhZCgvKiBcIl9cIiAqLzk1LCBwYWQpO1xuICAgICAgICAgICAgICB2YXIgaWdub3JlZCQxMSA9IC8qIElnbm9yZWRfaW50NjQgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICBpY29udiQzLFxuICAgICAgICAgICAgICAgICAgaWdub3JlZF8wMDEkNFxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICBmbXRfcmVzdWx0ID0gLyogRm10X0VCQiAqL1svKiBJZ25vcmVkX3BhcmFtICovQmxvY2suX18oMjMsIFtcbiAgICAgICAgICAgICAgICAgICAgaWdub3JlZCQxMSxcbiAgICAgICAgICAgICAgICAgICAgZm10X3Jlc3QkMTVcbiAgICAgICAgICAgICAgICAgIF0pXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBhZF91c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgdmFyIG1hdGNoJDMwID0gbWFrZV9wYWRwcmVjX2ZtdF9lYmIocGFkLCAocHJlY191c2VkWzBdID0gdHJ1ZSwgcHJlYyksIGZtdF9yZXN0JDE1KTtcbiAgICAgICAgICAgICAgZm10X3Jlc3VsdCA9IC8qIEZtdF9FQkIgKi9bLyogSW50NjQgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAgICAgICAgIGljb252JDMsXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoJDMwWzBdLFxuICAgICAgICAgICAgICAgICAgICBtYXRjaCQzMFsxXSxcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2gkMzBbMl1cbiAgICAgICAgICAgICAgICAgIF0pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBcbiAgICB9XG4gICAgaWYgKGV4aXQgPT09IDEpIHtcbiAgICAgIGZtdF9yZXN1bHQgPSBDdXJyeS5fMyhmYWlsd2l0aF9tZXNzYWdlKC8qIEZvcm1hdCAqL1tcbiAgICAgICAgICAgICAgICAvKiBTdHJpbmdfbGl0ZXJhbCAqL0Jsb2NrLl9fKDExLCBbXG4gICAgICAgICAgICAgICAgICAgIFwiaW52YWxpZCBmb3JtYXQgXCIsXG4gICAgICAgICAgICAgICAgICAgIC8qIENhbWxfc3RyaW5nICovQmxvY2suX18oMywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgLyogTm9fcGFkZGluZyAqLzAsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBTdHJpbmdfbGl0ZXJhbCAqL0Jsb2NrLl9fKDExLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCI6IGF0IGNoYXJhY3RlciBudW1iZXIgXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogSW50ICovQmxvY2suX18oNCwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBJbnRfZCAqLzAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIE5vX3BhZGRpbmcgKi8wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBOb19wcmVjaXNpb24gKi8wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBTdHJpbmdfbGl0ZXJhbCAqL0Jsb2NrLl9fKDExLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiwgaW52YWxpZCBjb252ZXJzaW9uIFxcXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIENoYXJfbGl0ZXJhbCAqL0Jsb2NrLl9fKDEyLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogXCIlXCIgKi8zNyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBDaGFyICovQmxvY2suX18oMCwgWy8qIENoYXJfbGl0ZXJhbCAqL0Jsb2NrLl9fKDEyLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBcIlxcXCJcIiAqLzM0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogRW5kX29mX2Zvcm1hdCAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKV0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIFwiaW52YWxpZCBmb3JtYXQgJVM6IGF0IGNoYXJhY3RlciBudW1iZXIgJWQsIGludmFsaWQgY29udmVyc2lvbiBcXFwiJSUlY1xcXCJcIlxuICAgICAgICAgICAgICBdKSwgc3RyLCBzdHJfaW5kIC0gMSB8IDAsIHN5bWIpO1xuICAgIH1cbiAgICBpZiAoIWxlZ2FjeV9iZWhhdmlvciQxKSB7XG4gICAgICBpZiAoIXBsdXNfdXNlZCAmJiBwbHVzKSB7XG4gICAgICAgIGluY29tcGF0aWJsZV9mbGFnKHBjdF9pbmQsIHN0cl9pbmQsIHN5bWIsIFwiJysnXCIpO1xuICAgICAgfVxuICAgICAgaWYgKCFzaGFycF91c2VkICYmIHNoYXJwKSB7XG4gICAgICAgIGluY29tcGF0aWJsZV9mbGFnKHBjdF9pbmQsIHN0cl9pbmQsIHN5bWIsIFwiJyMnXCIpO1xuICAgICAgfVxuICAgICAgaWYgKCFzcGFjZV91c2VkICYmIHNwYWNlKSB7XG4gICAgICAgIGluY29tcGF0aWJsZV9mbGFnKHBjdF9pbmQsIHN0cl9pbmQsIHN5bWIsIFwiJyAnXCIpO1xuICAgICAgfVxuICAgICAgaWYgKCFwYWRfdXNlZCAmJiBDYW1sX29iai5jYW1sX25vdGVxdWFsKC8qIFBhZGRpbmdfRUJCICovW3BhZF0sIC8qIFBhZGRpbmdfRUJCICovWy8qIE5vX3BhZGRpbmcgKi8wXSkpIHtcbiAgICAgICAgaW5jb21wYXRpYmxlX2ZsYWcocGN0X2luZCwgc3RyX2luZCwgc3ltYiwgXCJgcGFkZGluZydcIik7XG4gICAgICB9XG4gICAgICBpZiAoIXByZWNfdXNlZFswXSAmJiBDYW1sX29iai5jYW1sX25vdGVxdWFsKC8qIFByZWNpc2lvbl9FQkIgKi9bcHJlY10sIC8qIFByZWNpc2lvbl9FQkIgKi9bLyogTm9fcHJlY2lzaW9uICovMF0pKSB7XG4gICAgICAgIGluY29tcGF0aWJsZV9mbGFnKHBjdF9pbmQsIHN0cl9pbmQsIGlnbiA/IC8qIFwiX1wiICovOTUgOiBzeW1iLCBcImBwcmVjaXNpb24nXCIpO1xuICAgICAgfVxuICAgICAgaWYgKGlnbiAmJiBwbHVzKSB7XG4gICAgICAgIGluY29tcGF0aWJsZV9mbGFnKHBjdF9pbmQsIHN0cl9pbmQsIC8qIFwiX1wiICovOTUsIFwiJysnXCIpO1xuICAgICAgfVxuICAgICAgXG4gICAgfVxuICAgIGlmICghaWduX3VzZWRbMF0gJiYgaWduKSB7XG4gICAgICB2YXIgZXhpdCQ0ID0gMDtcbiAgICAgIGlmIChzeW1iID49IDM4KSB7XG4gICAgICAgIGlmIChzeW1iICE9PSA0NCkge1xuICAgICAgICAgIGlmIChzeW1iICE9PSA2NCkge1xuICAgICAgICAgICAgZXhpdCQ0ID0gMTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFsZWdhY3lfYmVoYXZpb3IkMSkge1xuICAgICAgICAgICAgZXhpdCQ0ID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgIH0gZWxzZSBpZiAoIWxlZ2FjeV9iZWhhdmlvciQxKSB7XG4gICAgICAgICAgZXhpdCQ0ID0gMTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgIH0gZWxzZSBpZiAoc3ltYiAhPT0gMzMpIHtcbiAgICAgICAgaWYgKHN5bWIgPj0gMzcpIHtcbiAgICAgICAgICBpZiAoIWxlZ2FjeV9iZWhhdmlvciQxKSB7XG4gICAgICAgICAgICBleGl0JDQgPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBleGl0JDQgPSAxO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFsZWdhY3lfYmVoYXZpb3IkMSkge1xuICAgICAgICBleGl0JDQgPSAxO1xuICAgICAgfVxuICAgICAgaWYgKGV4aXQkNCA9PT0gMSkge1xuICAgICAgICBpbmNvbXBhdGlibGVfZmxhZyhwY3RfaW5kLCBzdHJfaW5kLCBzeW1iLCBcIidfJ1wiKTtcbiAgICAgIH1cbiAgICAgIFxuICAgIH1cbiAgICByZXR1cm4gZm10X3Jlc3VsdDtcbiAgfTtcbiAgdmFyIHBhcnNlX2ZsYWdzID0gZnVuY3Rpb24gKHBjdF9pbmQsIHN0cl9pbmQsIGVuZF9pbmQsIGlnbikge1xuICAgIHZhciB6ZXJvID0gLyogcmVjb3JkICovWy8qIGNvbnRlbnRzICovZmFsc2VdO1xuICAgIHZhciBtaW51cyA9IC8qIHJlY29yZCAqL1svKiBjb250ZW50cyAqL2ZhbHNlXTtcbiAgICB2YXIgcGx1cyA9IC8qIHJlY29yZCAqL1svKiBjb250ZW50cyAqL2ZhbHNlXTtcbiAgICB2YXIgc3BhY2UgPSAvKiByZWNvcmQgKi9bLyogY29udGVudHMgKi9mYWxzZV07XG4gICAgdmFyIHNoYXJwID0gLyogcmVjb3JkICovWy8qIGNvbnRlbnRzICovZmFsc2VdO1xuICAgIHZhciBzZXRfZmxhZyA9IGZ1bmN0aW9uIChzdHJfaW5kLCBmbGFnKSB7XG4gICAgICBpZiAoZmxhZ1swXSAmJiAhbGVnYWN5X2JlaGF2aW9yJDEpIHtcbiAgICAgICAgQ3VycnkuXzMoZmFpbHdpdGhfbWVzc2FnZSgvKiBGb3JtYXQgKi9bXG4gICAgICAgICAgICAgICAgICAvKiBTdHJpbmdfbGl0ZXJhbCAqL0Jsb2NrLl9fKDExLCBbXG4gICAgICAgICAgICAgICAgICAgICAgXCJpbnZhbGlkIGZvcm1hdCBcIixcbiAgICAgICAgICAgICAgICAgICAgICAvKiBDYW1sX3N0cmluZyAqL0Jsb2NrLl9fKDMsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogTm9fcGFkZGluZyAqLzAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFN0cmluZ19saXRlcmFsICovQmxvY2suX18oMTEsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiOiBhdCBjaGFyYWN0ZXIgbnVtYmVyIFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogSW50ICovQmxvY2suX18oNCwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIEludF9kICovMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBOb19wYWRkaW5nICovMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBOb19wcmVjaXNpb24gKi8wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFN0cmluZ19saXRlcmFsICovQmxvY2suX18oMTEsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIsIGR1cGxpY2F0ZSBmbGFnIFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBDYW1sX2NoYXIgKi9CbG9jay5fXygxLCBbLyogRW5kX29mX2Zvcm1hdCAqLzBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICBcImludmFsaWQgZm9ybWF0ICVTOiBhdCBjaGFyYWN0ZXIgbnVtYmVyICVkLCBkdXBsaWNhdGUgZmxhZyAlQ1wiXG4gICAgICAgICAgICAgICAgXSksIHN0ciwgc3RyX2luZCwgQ2FtbF9zdHJpbmcuZ2V0KHN0ciwgc3RyX2luZCkpO1xuICAgICAgfVxuICAgICAgZmxhZ1swXSA9IHRydWU7XG4gICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgIH07XG4gICAgdmFyIF9zdHJfaW5kID0gc3RyX2luZDtcbiAgICB3aGlsZSh0cnVlKSB7XG4gICAgICB2YXIgc3RyX2luZCQxID0gX3N0cl9pbmQ7XG4gICAgICBpZiAoc3RyX2luZCQxID09PSBlbmRfaW5kKSB7XG4gICAgICAgIGludmFsaWRfZm9ybWF0X21lc3NhZ2UoZW5kX2luZCwgXCJ1bmV4cGVjdGVkIGVuZCBvZiBmb3JtYXRcIik7XG4gICAgICB9XG4gICAgICB2YXIgbWF0Y2ggPSBDYW1sX3N0cmluZy5nZXQoc3RyLCBzdHJfaW5kJDEpO1xuICAgICAgdmFyIGV4aXQgPSAwO1xuICAgICAgc3dpdGNoIChtYXRjaCkge1xuICAgICAgICBjYXNlIDMyIDogXG4gICAgICAgICAgICBzZXRfZmxhZyhzdHJfaW5kJDEsIHNwYWNlKTtcbiAgICAgICAgICAgIF9zdHJfaW5kID0gc3RyX2luZCQxICsgMSB8IDA7XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIGNhc2UgMzUgOiBcbiAgICAgICAgICAgIHNldF9mbGFnKHN0cl9pbmQkMSwgc2hhcnApO1xuICAgICAgICAgICAgX3N0cl9pbmQgPSBzdHJfaW5kJDEgKyAxIHwgMDtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgY2FzZSA0MyA6IFxuICAgICAgICAgICAgc2V0X2ZsYWcoc3RyX2luZCQxLCBwbHVzKTtcbiAgICAgICAgICAgIF9zdHJfaW5kID0gc3RyX2luZCQxICsgMSB8IDA7XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIGNhc2UgNDUgOiBcbiAgICAgICAgICAgIHNldF9mbGFnKHN0cl9pbmQkMSwgbWludXMpO1xuICAgICAgICAgICAgX3N0cl9pbmQgPSBzdHJfaW5kJDEgKyAxIHwgMDtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgY2FzZSAzMyA6IFxuICAgICAgICBjYXNlIDM0IDogXG4gICAgICAgIGNhc2UgMzYgOiBcbiAgICAgICAgY2FzZSAzNyA6IFxuICAgICAgICBjYXNlIDM4IDogXG4gICAgICAgIGNhc2UgMzkgOiBcbiAgICAgICAgY2FzZSA0MCA6IFxuICAgICAgICBjYXNlIDQxIDogXG4gICAgICAgIGNhc2UgNDIgOiBcbiAgICAgICAgY2FzZSA0NCA6IFxuICAgICAgICBjYXNlIDQ2IDogXG4gICAgICAgIGNhc2UgNDcgOiBcbiAgICAgICAgICAgIGV4aXQgPSAxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNDggOiBcbiAgICAgICAgICAgIHNldF9mbGFnKHN0cl9pbmQkMSwgemVybyk7XG4gICAgICAgICAgICBfc3RyX2luZCA9IHN0cl9pbmQkMSArIDEgfCAwO1xuICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGV4aXQgPSAxO1xuICAgICAgfVxuICAgICAgaWYgKGV4aXQgPT09IDEpIHtcbiAgICAgICAgdmFyIHBjdF9pbmQkMSA9IHBjdF9pbmQ7XG4gICAgICAgIHZhciBzdHJfaW5kJDIgPSBzdHJfaW5kJDE7XG4gICAgICAgIHZhciBlbmRfaW5kJDEgPSBlbmRfaW5kO1xuICAgICAgICB2YXIgemVybyQxID0gemVyb1swXTtcbiAgICAgICAgdmFyIG1pbnVzJDEgPSBtaW51c1swXTtcbiAgICAgICAgdmFyIHBsdXMkMSA9IHBsdXNbMF07XG4gICAgICAgIHZhciBzaGFycCQxID0gc2hhcnBbMF07XG4gICAgICAgIHZhciBzcGFjZSQxID0gc3BhY2VbMF07XG4gICAgICAgIHZhciBpZ24kMSA9IGlnbjtcbiAgICAgICAgaWYgKHN0cl9pbmQkMiA9PT0gZW5kX2luZCQxKSB7XG4gICAgICAgICAgaW52YWxpZF9mb3JtYXRfbWVzc2FnZShlbmRfaW5kJDEsIFwidW5leHBlY3RlZCBlbmQgb2YgZm9ybWF0XCIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwYWR0eSA9IHplcm8kMSA/IChcbiAgICAgICAgICAgIG1pbnVzJDEgPyAoXG4gICAgICAgICAgICAgICAgbGVnYWN5X2JlaGF2aW9yJDEgPyAvKiBMZWZ0ICovMCA6IGluY29tcGF0aWJsZV9mbGFnKHBjdF9pbmQkMSwgc3RyX2luZCQyLCAvKiBcIi1cIiAqLzQ1LCBcIjBcIilcbiAgICAgICAgICAgICAgKSA6IC8qIFplcm9zICovMlxuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICBtaW51cyQxID8gLyogTGVmdCAqLzAgOiAvKiBSaWdodCAqLzFcbiAgICAgICAgICApO1xuICAgICAgICB2YXIgbWF0Y2gkMSA9IENhbWxfc3RyaW5nLmdldChzdHIsIHN0cl9pbmQkMik7XG4gICAgICAgIHZhciBleGl0JDEgPSAwO1xuICAgICAgICBpZiAobWF0Y2gkMSA+PSA0OCkge1xuICAgICAgICAgIGlmIChtYXRjaCQxID49IDU4KSB7XG4gICAgICAgICAgICBleGl0JDEgPSAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgbWF0Y2gkMiA9IHBhcnNlX3Bvc2l0aXZlKHN0cl9pbmQkMiwgZW5kX2luZCQxLCAwKTtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZV9hZnRlcl9wYWRkaW5nKHBjdF9pbmQkMSwgbWF0Y2gkMlswXSwgZW5kX2luZCQxLCBtaW51cyQxLCBwbHVzJDEsIHNoYXJwJDEsIHNwYWNlJDEsIGlnbiQxLCAvKiBMaXRfcGFkZGluZyAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkdHksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoJDJbMV1cbiAgICAgICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobWF0Y2gkMSAhPT0gNDIpIHtcbiAgICAgICAgICBleGl0JDEgPSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBwYXJzZV9hZnRlcl9wYWRkaW5nKHBjdF9pbmQkMSwgc3RyX2luZCQyICsgMSB8IDAsIGVuZF9pbmQkMSwgbWludXMkMSwgcGx1cyQxLCBzaGFycCQxLCBzcGFjZSQxLCBpZ24kMSwgLyogQXJnX3BhZGRpbmcgKi9CbG9jay5fXygxLCBbcGFkdHldKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV4aXQkMSA9PT0gMSkge1xuICAgICAgICAgIHN3aXRjaCAocGFkdHkpIHtcbiAgICAgICAgICAgIGNhc2UgMCA6IFxuICAgICAgICAgICAgICAgIGlmICghbGVnYWN5X2JlaGF2aW9yJDEpIHtcbiAgICAgICAgICAgICAgICAgIGludmFsaWRfZm9ybWF0X3dpdGhvdXQoc3RyX2luZCQyIC0gMSB8IDAsIC8qIFwiLVwiICovNDUsIFwicGFkZGluZ1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlX2FmdGVyX3BhZGRpbmcocGN0X2luZCQxLCBzdHJfaW5kJDIsIGVuZF9pbmQkMSwgbWludXMkMSwgcGx1cyQxLCBzaGFycCQxLCBzcGFjZSQxLCBpZ24kMSwgLyogTm9fcGFkZGluZyAqLzApO1xuICAgICAgICAgICAgY2FzZSAxIDogXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlX2FmdGVyX3BhZGRpbmcocGN0X2luZCQxLCBzdHJfaW5kJDIsIGVuZF9pbmQkMSwgbWludXMkMSwgcGx1cyQxLCBzaGFycCQxLCBzcGFjZSQxLCBpZ24kMSwgLyogTm9fcGFkZGluZyAqLzApO1xuICAgICAgICAgICAgY2FzZSAyIDogXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlX2FmdGVyX3BhZGRpbmcocGN0X2luZCQxLCBzdHJfaW5kJDIsIGVuZF9pbmQkMSwgbWludXMkMSwgcGx1cyQxLCBzaGFycCQxLCBzcGFjZSQxLCBpZ24kMSwgLyogTGl0X3BhZGRpbmcgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBSaWdodCAqLzEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgfVxuICAgICAgXG4gICAgfTtcbiAgfTtcbiAgdmFyIGlzX2ludF9iYXNlID0gZnVuY3Rpb24gKHN5bWIpIHtcbiAgICBzd2l0Y2ggKHN5bWIpIHtcbiAgICAgIGNhc2UgODkgOiBcbiAgICAgIGNhc2UgOTAgOiBcbiAgICAgIGNhc2UgOTEgOiBcbiAgICAgIGNhc2UgOTIgOiBcbiAgICAgIGNhc2UgOTMgOiBcbiAgICAgIGNhc2UgOTQgOiBcbiAgICAgIGNhc2UgOTUgOiBcbiAgICAgIGNhc2UgOTYgOiBcbiAgICAgIGNhc2UgOTcgOiBcbiAgICAgIGNhc2UgOTggOiBcbiAgICAgIGNhc2UgOTkgOiBcbiAgICAgIGNhc2UgMTAxIDogXG4gICAgICBjYXNlIDEwMiA6IFxuICAgICAgY2FzZSAxMDMgOiBcbiAgICAgIGNhc2UgMTA0IDogXG4gICAgICBjYXNlIDEwNiA6IFxuICAgICAgY2FzZSAxMDcgOiBcbiAgICAgIGNhc2UgMTA4IDogXG4gICAgICBjYXNlIDEwOSA6IFxuICAgICAgY2FzZSAxMTAgOiBcbiAgICAgIGNhc2UgMTEyIDogXG4gICAgICBjYXNlIDExMyA6IFxuICAgICAgY2FzZSAxMTQgOiBcbiAgICAgIGNhc2UgMTE1IDogXG4gICAgICBjYXNlIDExNiA6IFxuICAgICAgY2FzZSAxMTggOiBcbiAgICAgIGNhc2UgMTE5IDogXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgY2FzZSA4OCA6IFxuICAgICAgY2FzZSAxMDAgOiBcbiAgICAgIGNhc2UgMTA1IDogXG4gICAgICBjYXNlIDExMSA6IFxuICAgICAgY2FzZSAxMTcgOiBcbiAgICAgIGNhc2UgMTIwIDogXG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xuICB2YXIgY291bnRlcl9vZl9jaGFyID0gZnVuY3Rpb24gKHN5bWIpIHtcbiAgICB2YXIgZXhpdCA9IDA7XG4gICAgaWYgKHN5bWIgPj0gMTA4KSB7XG4gICAgICBpZiAoc3ltYiA+PSAxMTEpIHtcbiAgICAgICAgZXhpdCA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2l0Y2ggKHN5bWIgLSAxMDggfCAwKSB7XG4gICAgICAgICAgY2FzZSAwIDogXG4gICAgICAgICAgICAgIHJldHVybiAvKiBMaW5lX2NvdW50ZXIgKi8wO1xuICAgICAgICAgIGNhc2UgMSA6IFxuICAgICAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAyIDogXG4gICAgICAgICAgICAgIHJldHVybiAvKiBDaGFyX2NvdW50ZXIgKi8xO1xuICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzeW1iICE9PSA3Nikge1xuICAgICAgZXhpdCA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBUb2tlbl9jb3VudGVyICovMjtcbiAgICB9XG4gICAgaWYgKGV4aXQgPT09IDEpIHtcbiAgICAgIHRocm93IFtcbiAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmFzc2VydF9mYWlsdXJlLFxuICAgICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgIFwiY2FtbGludGVybmFsRm9ybWF0Lm1sXCIsXG4gICAgICAgICAgICAgIDI2ODYsXG4gICAgICAgICAgICAgIDM0XG4gICAgICAgICAgICBdXG4gICAgICAgICAgXTtcbiAgICB9XG4gICAgXG4gIH07XG4gIHZhciBwYXJzZV9jaGFyX3NldCA9IGZ1bmN0aW9uIChzdHJfaW5kLCBlbmRfaW5kKSB7XG4gICAgaWYgKHN0cl9pbmQgPT09IGVuZF9pbmQpIHtcbiAgICAgIGludmFsaWRfZm9ybWF0X21lc3NhZ2UoZW5kX2luZCwgXCJ1bmV4cGVjdGVkIGVuZCBvZiBmb3JtYXRcIik7XG4gICAgfVxuICAgIHZhciBjaGFyX3NldCA9IEJ5dGVzLm1ha2UoMzIsIC8qIFwiXFwwMDBcIiAqLzApO1xuICAgIHZhciBhZGRfcmFuZ2UgPSBmdW5jdGlvbiAoYywgYyRwcmltZSkge1xuICAgICAgZm9yKHZhciBpID0gYzsgaSA8PSBjJHByaW1lOyArK2kpe1xuICAgICAgICBhZGRfaW5fY2hhcl9zZXQoY2hhcl9zZXQsIFBlcnZhc2l2ZXMuY2hhcl9vZl9pbnQoaSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIC8qICgpICovMDtcbiAgICB9O1xuICAgIHZhciBmYWlsX3NpbmdsZV9wZXJjZW50ID0gZnVuY3Rpb24gKHN0cl9pbmQpIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMihmYWlsd2l0aF9tZXNzYWdlKC8qIEZvcm1hdCAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAvKiBTdHJpbmdfbGl0ZXJhbCAqL0Jsb2NrLl9fKDExLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiaW52YWxpZCBmb3JtYXQgXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIENhbWxfc3RyaW5nICovQmxvY2suX18oMywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogTm9fcGFkZGluZyAqLzAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBTdHJpbmdfbGl0ZXJhbCAqL0Jsb2NrLl9fKDExLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCI6ICdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBDaGFyX2xpdGVyYWwgKi9CbG9jay5fXygxMiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBcIiVcIiAqLzM3LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBTdHJpbmdfbGl0ZXJhbCAqL0Jsb2NrLl9fKDExLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIicgYWxvbmUgaXMgbm90IGFjY2VwdGVkIGluIGNoYXJhY3RlciBzZXRzLCB1c2UgXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBDaGFyX2xpdGVyYWwgKi9CbG9jay5fXygxMiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFwiJVwiICovMzcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogQ2hhcl9saXRlcmFsICovQmxvY2suX18oMTIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogXCIlXCIgKi8zNyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogU3RyaW5nX2xpdGVyYWwgKi9CbG9jay5fXygxMSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgaW5zdGVhZCBhdCBwb3NpdGlvbiBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIEludCAqL0Jsb2NrLl9fKDQsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBJbnRfZCAqLzAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogTm9fcGFkZGluZyAqLzAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogTm9fcHJlY2lzaW9uICovMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBDaGFyX2xpdGVyYWwgKi9CbG9jay5fXygxMiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBcIi5cIiAqLzQ2LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBFbmRfb2ZfZm9ybWF0ICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgXCJpbnZhbGlkIGZvcm1hdCAlUzogJyUlJyBhbG9uZSBpcyBub3QgYWNjZXB0ZWQgaW4gY2hhcmFjdGVyIHNldHMsIHVzZSAlJSUlIGluc3RlYWQgYXQgcG9zaXRpb24gJWQuXCJcbiAgICAgICAgICAgICAgICAgICAgXSksIHN0ciwgc3RyX2luZCk7XG4gICAgfTtcbiAgICB2YXIgcGFyc2VfY2hhcl9zZXRfYWZ0ZXJfY2hhciA9IGZ1bmN0aW9uIChfc3RyX2luZCwgZW5kX2luZCwgX2MpIHtcbiAgICAgIHdoaWxlKHRydWUpIHtcbiAgICAgICAgdmFyIGMgPSBfYztcbiAgICAgICAgdmFyIHN0cl9pbmQgPSBfc3RyX2luZDtcbiAgICAgICAgaWYgKHN0cl9pbmQgPT09IGVuZF9pbmQpIHtcbiAgICAgICAgICBpbnZhbGlkX2Zvcm1hdF9tZXNzYWdlKGVuZF9pbmQsIFwidW5leHBlY3RlZCBlbmQgb2YgZm9ybWF0XCIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjJHByaW1lID0gQ2FtbF9zdHJpbmcuZ2V0KHN0ciwgc3RyX2luZCk7XG4gICAgICAgIHZhciBleGl0ID0gMDtcbiAgICAgICAgdmFyIGV4aXQkMSA9IDA7XG4gICAgICAgIGlmIChjJHByaW1lID49IDQ2KSB7XG4gICAgICAgICAgaWYgKGMkcHJpbWUgIT09IDY0KSB7XG4gICAgICAgICAgICBpZiAoYyRwcmltZSAhPT0gOTMpIHtcbiAgICAgICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBhZGRfaW5fY2hhcl9zZXQoY2hhcl9zZXQsIGMpO1xuICAgICAgICAgICAgICByZXR1cm4gc3RyX2luZCArIDEgfCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBleGl0JDEgPSAyO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChjJHByaW1lICE9PSAzNykge1xuICAgICAgICAgIGlmIChjJHByaW1lID49IDQ1KSB7XG4gICAgICAgICAgICB2YXIgc3RyX2luZCQxID0gc3RyX2luZCArIDEgfCAwO1xuICAgICAgICAgICAgdmFyIGVuZF9pbmQkMSA9IGVuZF9pbmQ7XG4gICAgICAgICAgICB2YXIgYyQxID0gYztcbiAgICAgICAgICAgIGlmIChzdHJfaW5kJDEgPT09IGVuZF9pbmQkMSkge1xuICAgICAgICAgICAgICBpbnZhbGlkX2Zvcm1hdF9tZXNzYWdlKGVuZF9pbmQkMSwgXCJ1bmV4cGVjdGVkIGVuZCBvZiBmb3JtYXRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYyRwcmltZSQxID0gQ2FtbF9zdHJpbmcuZ2V0KHN0ciwgc3RyX2luZCQxKTtcbiAgICAgICAgICAgIGlmIChjJHByaW1lJDEgIT09IDM3KSB7XG4gICAgICAgICAgICAgIGlmIChjJHByaW1lJDEgIT09IDkzKSB7XG4gICAgICAgICAgICAgICAgYWRkX3JhbmdlKGMkMSwgYyRwcmltZSQxKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VfY2hhcl9zZXRfY29udGVudChzdHJfaW5kJDEgKyAxIHwgMCwgZW5kX2luZCQxKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhZGRfaW5fY2hhcl9zZXQoY2hhcl9zZXQsIGMkMSk7XG4gICAgICAgICAgICAgICAgYWRkX2luX2NoYXJfc2V0KGNoYXJfc2V0LCAvKiBcIi1cIiAqLzQ1KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyX2luZCQxICsgMSB8IDA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmICgoc3RyX2luZCQxICsgMSB8IDApID09PSBlbmRfaW5kJDEpIHtcbiAgICAgICAgICAgICAgICBpbnZhbGlkX2Zvcm1hdF9tZXNzYWdlKGVuZF9pbmQkMSwgXCJ1bmV4cGVjdGVkIGVuZCBvZiBmb3JtYXRcIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdmFyIGMkcHJpbWUkMiA9IENhbWxfc3RyaW5nLmdldChzdHIsIHN0cl9pbmQkMSArIDEgfCAwKTtcbiAgICAgICAgICAgICAgdmFyIGV4aXQkMiA9IDA7XG4gICAgICAgICAgICAgIGlmIChjJHByaW1lJDIgIT09IDM3ICYmIGMkcHJpbWUkMiAhPT0gNjQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFpbF9zaW5nbGVfcGVyY2VudChzdHJfaW5kJDEpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGV4aXQkMiA9IDE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGV4aXQkMiA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGFkZF9yYW5nZShjJDEsIGMkcHJpbWUkMik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlX2NoYXJfc2V0X2NvbnRlbnQoc3RyX2luZCQxICsgMiB8IDAsIGVuZF9pbmQkMSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGV4aXQgPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBleGl0JDEgPSAyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChleGl0JDEgPT09IDIpIHtcbiAgICAgICAgICBpZiAoYyA9PT0gLyogXCIlXCIgKi8zNykge1xuICAgICAgICAgICAgYWRkX2luX2NoYXJfc2V0KGNoYXJfc2V0LCBjJHByaW1lKTtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZV9jaGFyX3NldF9jb250ZW50KHN0cl9pbmQgKyAxIHwgMCwgZW5kX2luZCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGV4aXQgPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZXhpdCA9PT0gMSkge1xuICAgICAgICAgIGlmIChjID09PSAvKiBcIiVcIiAqLzM3KSB7XG4gICAgICAgICAgICBmYWlsX3NpbmdsZV9wZXJjZW50KHN0cl9pbmQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhZGRfaW5fY2hhcl9zZXQoY2hhcl9zZXQsIGMpO1xuICAgICAgICAgIF9jID0gYyRwcmltZTtcbiAgICAgICAgICBfc3RyX2luZCA9IHN0cl9pbmQgKyAxIHwgMDtcbiAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICB9O1xuICAgIH07XG4gICAgdmFyIHBhcnNlX2NoYXJfc2V0X2NvbnRlbnQgPSBmdW5jdGlvbiAoX3N0cl9pbmQsIGVuZF9pbmQpIHtcbiAgICAgIHdoaWxlKHRydWUpIHtcbiAgICAgICAgdmFyIHN0cl9pbmQgPSBfc3RyX2luZDtcbiAgICAgICAgaWYgKHN0cl9pbmQgPT09IGVuZF9pbmQpIHtcbiAgICAgICAgICBpbnZhbGlkX2Zvcm1hdF9tZXNzYWdlKGVuZF9pbmQsIFwidW5leHBlY3RlZCBlbmQgb2YgZm9ybWF0XCIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjID0gQ2FtbF9zdHJpbmcuZ2V0KHN0ciwgc3RyX2luZCk7XG4gICAgICAgIGlmIChjICE9PSA0NSkge1xuICAgICAgICAgIGlmIChjICE9PSA5Mykge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlX2NoYXJfc2V0X2FmdGVyX2NoYXIoc3RyX2luZCArIDEgfCAwLCBlbmRfaW5kLCBjKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHN0cl9pbmQgKyAxIHwgMDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkX2luX2NoYXJfc2V0KGNoYXJfc2V0LCAvKiBcIi1cIiAqLzQ1KTtcbiAgICAgICAgICBfc3RyX2luZCA9IHN0cl9pbmQgKyAxIHwgMDtcbiAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcbiAgICB2YXIgcGFyc2VfY2hhcl9zZXRfc3RhcnQgPSBmdW5jdGlvbiAoc3RyX2luZCwgZW5kX2luZCkge1xuICAgICAgaWYgKHN0cl9pbmQgPT09IGVuZF9pbmQpIHtcbiAgICAgICAgaW52YWxpZF9mb3JtYXRfbWVzc2FnZShlbmRfaW5kLCBcInVuZXhwZWN0ZWQgZW5kIG9mIGZvcm1hdFwiKTtcbiAgICAgIH1cbiAgICAgIHZhciBjID0gQ2FtbF9zdHJpbmcuZ2V0KHN0ciwgc3RyX2luZCk7XG4gICAgICByZXR1cm4gcGFyc2VfY2hhcl9zZXRfYWZ0ZXJfY2hhcihzdHJfaW5kICsgMSB8IDAsIGVuZF9pbmQsIGMpO1xuICAgIH07XG4gICAgaWYgKHN0cl9pbmQgPT09IGVuZF9pbmQpIHtcbiAgICAgIGludmFsaWRfZm9ybWF0X21lc3NhZ2UoZW5kX2luZCwgXCJ1bmV4cGVjdGVkIGVuZCBvZiBmb3JtYXRcIik7XG4gICAgfVxuICAgIHZhciBtYXRjaCA9IENhbWxfc3RyaW5nLmdldChzdHIsIHN0cl9pbmQpO1xuICAgIHZhciBtYXRjaCQxID0gbWF0Y2ggIT09IDk0ID8gLyogdHVwbGUgKi9bXG4gICAgICAgIHN0cl9pbmQsXG4gICAgICAgIGZhbHNlXG4gICAgICBdIDogLyogdHVwbGUgKi9bXG4gICAgICAgIHN0cl9pbmQgKyAxIHwgMCxcbiAgICAgICAgdHJ1ZVxuICAgICAgXTtcbiAgICB2YXIgbmV4dF9pbmQgPSBwYXJzZV9jaGFyX3NldF9zdGFydChtYXRjaCQxWzBdLCBlbmRfaW5kKTtcbiAgICB2YXIgY2hhcl9zZXQkMSA9IEJ5dGVzLnRvX3N0cmluZyhjaGFyX3NldCk7XG4gICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgbmV4dF9pbmQsXG4gICAgICAgICAgICBtYXRjaCQxWzFdID8gcmV2X2NoYXJfc2V0KGNoYXJfc2V0JDEpIDogY2hhcl9zZXQkMVxuICAgICAgICAgIF07XG4gIH07XG4gIHZhciBjaGVja19vcGVuX2JveCA9IGZ1bmN0aW9uIChmbXQpIHtcbiAgICBpZiAodHlwZW9mIGZtdCA9PT0gXCJudW1iZXJcIiB8fCAhKGZtdC50YWcgPT09IDExICYmIHR5cGVvZiBmbXRbMV0gPT09IFwibnVtYmVyXCIpKSB7XG4gICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cnkge1xuICAgICAgICBvcGVuX2JveF9vZl9zdHJpbmcoZm10WzBdKTtcbiAgICAgICAgcmV0dXJuIC8qICgpICovMDtcbiAgICAgIH1cbiAgICAgIGNhdGNoIChyYXdfZXhuKXtcbiAgICAgICAgdmFyIGV4biA9IENhbWxfanNfZXhjZXB0aW9ucy5pbnRlcm5hbFRvT0NhbWxFeGNlcHRpb24ocmF3X2V4bik7XG4gICAgICAgIGlmIChleG5bMF0gPT09IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmZhaWx1cmUpIHtcbiAgICAgICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IGV4bjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgdmFyIHBhcnNlX3RhZyA9IGZ1bmN0aW9uIChpc19vcGVuX3RhZywgc3RyX2luZCwgZW5kX2luZCkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoc3RyX2luZCA9PT0gZW5kX2luZCkge1xuICAgICAgICB0aHJvdyBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5ub3RfZm91bmQ7XG4gICAgICB9XG4gICAgICB2YXIgbWF0Y2ggPSBDYW1sX3N0cmluZy5nZXQoc3RyLCBzdHJfaW5kKTtcbiAgICAgIGlmIChtYXRjaCAhPT0gNjApIHtcbiAgICAgICAgdGhyb3cgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMubm90X2ZvdW5kO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGluZCA9ICQkU3RyaW5nLmluZGV4X2Zyb20oc3RyLCBzdHJfaW5kICsgMSB8IDAsIC8qIFwiPlwiICovNjIpO1xuICAgICAgICBpZiAoaW5kID49IGVuZF9pbmQpIHtcbiAgICAgICAgICB0aHJvdyBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5ub3RfZm91bmQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN1Yl9zdHIgPSAkJFN0cmluZy5zdWIoc3RyLCBzdHJfaW5kLCAoaW5kIC0gc3RyX2luZCB8IDApICsgMSB8IDApO1xuICAgICAgICB2YXIgYmVnX2luZCA9IGluZCArIDEgfCAwO1xuICAgICAgICB2YXIgbWF0Y2gkMSA9IHBhcnNlX2xpdGVyYWwoYmVnX2luZCwgYmVnX2luZCwgZW5kX2luZCk7XG4gICAgICAgIHZhciBtYXRjaCQyID0gcGFyc2VfbGl0ZXJhbChzdHJfaW5kLCBzdHJfaW5kLCBpbmQgKyAxIHwgMCk7XG4gICAgICAgIHZhciBzdWJfZm10ID0gbWF0Y2gkMlswXTtcbiAgICAgICAgdmFyIHN1Yl9mb3JtYXQgPSAvKiBGb3JtYXQgKi9bXG4gICAgICAgICAgc3ViX2ZtdCxcbiAgICAgICAgICBzdWJfc3RyXG4gICAgICAgIF07XG4gICAgICAgIHZhciBmb3JtYXR0aW5nID0gaXNfb3Blbl90YWcgPyAvKiBPcGVuX3RhZyAqL0Jsb2NrLl9fKDAsIFtzdWJfZm9ybWF0XSkgOiAoY2hlY2tfb3Blbl9ib3goc3ViX2ZtdCksIC8qIE9wZW5fYm94ICovQmxvY2suX18oMSwgW3N1Yl9mb3JtYXRdKSk7XG4gICAgICAgIHJldHVybiAvKiBGbXRfRUJCICovWy8qIEZvcm1hdHRpbmdfZ2VuICovQmxvY2suX18oMTgsIFtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGluZyxcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2gkMVswXVxuICAgICAgICAgICAgICAgICAgXSldO1xuICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZXhuKXtcbiAgICAgIGlmIChleG4gPT09IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLm5vdF9mb3VuZCkge1xuICAgICAgICB2YXIgbWF0Y2gkMyA9IHBhcnNlX2xpdGVyYWwoc3RyX2luZCwgc3RyX2luZCwgZW5kX2luZCk7XG4gICAgICAgIHZhciBzdWJfZm9ybWF0JDEgPSAvKiBGb3JtYXQgKi9bXG4gICAgICAgICAgLyogRW5kX29mX2Zvcm1hdCAqLzAsXG4gICAgICAgICAgXCJcIlxuICAgICAgICBdO1xuICAgICAgICB2YXIgZm9ybWF0dGluZyQxID0gaXNfb3Blbl90YWcgPyAvKiBPcGVuX3RhZyAqL0Jsb2NrLl9fKDAsIFtzdWJfZm9ybWF0JDFdKSA6IC8qIE9wZW5fYm94ICovQmxvY2suX18oMSwgW3N1Yl9mb3JtYXQkMV0pO1xuICAgICAgICByZXR1cm4gLyogRm10X0VCQiAqL1svKiBGb3JtYXR0aW5nX2dlbiAqL0Jsb2NrLl9fKDE4LCBbXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRpbmckMSxcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2gkM1swXVxuICAgICAgICAgICAgICAgICAgXSldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZXhuO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHBhcnNlX2xpdGVyYWwoMCwgMCwgc3RyLmxlbmd0aCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdF9vZl9zdHJpbmdfZm10dHkoc3RyLCBmbXR0eSkge1xuICB2YXIgbWF0Y2ggPSBmbXRfZWJiX29mX3N0cmluZyh1bmRlZmluZWQsIHN0cik7XG4gIHRyeSB7XG4gICAgcmV0dXJuIC8qIEZvcm1hdCAqL1tcbiAgICAgICAgICAgIHR5cGVfZm9ybWF0KG1hdGNoWzBdLCBmbXR0eSksXG4gICAgICAgICAgICBzdHJcbiAgICAgICAgICBdO1xuICB9XG4gIGNhdGNoIChleG4pe1xuICAgIGlmIChleG4gPT09IFR5cGVfbWlzbWF0Y2gpIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMihmYWlsd2l0aF9tZXNzYWdlKC8qIEZvcm1hdCAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAvKiBTdHJpbmdfbGl0ZXJhbCAqL0Jsb2NrLl9fKDExLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiYmFkIGlucHV0OiBmb3JtYXQgdHlwZSBtaXNtYXRjaCBiZXR3ZWVuIFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBDYW1sX3N0cmluZyAqL0Jsb2NrLl9fKDMsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIE5vX3BhZGRpbmcgKi8wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogU3RyaW5nX2xpdGVyYWwgKi9CbG9jay5fXygxMSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiIGFuZCBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBDYW1sX3N0cmluZyAqL0Jsb2NrLl9fKDMsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogTm9fcGFkZGluZyAqLzAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIEVuZF9vZl9mb3JtYXQgKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICBcImJhZCBpbnB1dDogZm9ybWF0IHR5cGUgbWlzbWF0Y2ggYmV0d2VlbiAlUyBhbmQgJVNcIlxuICAgICAgICAgICAgICAgICAgICBdKSwgc3RyLCBzdHJpbmdfb2ZfZm10dHkoZm10dHkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZXhuO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmb3JtYXRfb2Zfc3RyaW5nX2Zvcm1hdChzdHIsIHBhcmFtKSB7XG4gIHZhciBtYXRjaCA9IGZtdF9lYmJfb2Zfc3RyaW5nKHVuZGVmaW5lZCwgc3RyKTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gLyogRm9ybWF0ICovW1xuICAgICAgICAgICAgdHlwZV9mb3JtYXQobWF0Y2hbMF0sIGZtdHR5X29mX2ZtdChwYXJhbVswXSkpLFxuICAgICAgICAgICAgc3RyXG4gICAgICAgICAgXTtcbiAgfVxuICBjYXRjaCAoZXhuKXtcbiAgICBpZiAoZXhuID09PSBUeXBlX21pc21hdGNoKSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzIoZmFpbHdpdGhfbWVzc2FnZSgvKiBGb3JtYXQgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgLyogU3RyaW5nX2xpdGVyYWwgKi9CbG9jay5fXygxMSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcImJhZCBpbnB1dDogZm9ybWF0IHR5cGUgbWlzbWF0Y2ggYmV0d2VlbiBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogQ2FtbF9zdHJpbmcgKi9CbG9jay5fXygzLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBOb19wYWRkaW5nICovMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFN0cmluZ19saXRlcmFsICovQmxvY2suX18oMTEsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiBhbmQgXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogQ2FtbF9zdHJpbmcgKi9CbG9jay5fXygzLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIE5vX3BhZGRpbmcgKi8wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBFbmRfb2ZfZm9ybWF0ICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgXCJiYWQgaW5wdXQ6IGZvcm1hdCB0eXBlIG1pc21hdGNoIGJldHdlZW4gJVMgYW5kICVTXCJcbiAgICAgICAgICAgICAgICAgICAgXSksIHN0ciwgcGFyYW1bMV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBleG47XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydHMuaXNfaW5fY2hhcl9zZXQgPSBpc19pbl9jaGFyX3NldDtcbmV4cG9ydHMucmV2X2NoYXJfc2V0ID0gcmV2X2NoYXJfc2V0O1xuZXhwb3J0cy5jcmVhdGVfY2hhcl9zZXQgPSBjcmVhdGVfY2hhcl9zZXQ7XG5leHBvcnRzLmFkZF9pbl9jaGFyX3NldCA9IGFkZF9pbl9jaGFyX3NldDtcbmV4cG9ydHMuZnJlZXplX2NoYXJfc2V0ID0gZnJlZXplX2NoYXJfc2V0O1xuZXhwb3J0cy5wYXJhbV9mb3JtYXRfb2ZfaWdub3JlZF9mb3JtYXQgPSBwYXJhbV9mb3JtYXRfb2ZfaWdub3JlZF9mb3JtYXQ7XG5leHBvcnRzLm1ha2VfcHJpbnRmID0gbWFrZV9wcmludGY7XG5leHBvcnRzLm91dHB1dF9hY2MgPSBvdXRwdXRfYWNjO1xuZXhwb3J0cy5idWZwdXRfYWNjID0gYnVmcHV0X2FjYztcbmV4cG9ydHMuc3RycHV0X2FjYyA9IHN0cnB1dF9hY2M7XG5leHBvcnRzLnR5cGVfZm9ybWF0ID0gdHlwZV9mb3JtYXQ7XG5leHBvcnRzLmZtdF9lYmJfb2Zfc3RyaW5nID0gZm10X2ViYl9vZl9zdHJpbmc7XG5leHBvcnRzLmZvcm1hdF9vZl9zdHJpbmdfZm10dHkgPSBmb3JtYXRfb2Zfc3RyaW5nX2ZtdHR5O1xuZXhwb3J0cy5mb3JtYXRfb2Zfc3RyaW5nX2Zvcm1hdCA9IGZvcm1hdF9vZl9zdHJpbmdfZm9ybWF0O1xuZXhwb3J0cy5jaGFyX29mX2ljb252ID0gY2hhcl9vZl9pY29udjtcbmV4cG9ydHMuc3RyaW5nX29mX2Zvcm1hdHRpbmdfbGl0ID0gc3RyaW5nX29mX2Zvcm1hdHRpbmdfbGl0O1xuZXhwb3J0cy5zdHJpbmdfb2ZfZm9ybWF0dGluZ19nZW4gPSBzdHJpbmdfb2ZfZm9ybWF0dGluZ19nZW47XG5leHBvcnRzLnN0cmluZ19vZl9mbXR0eSA9IHN0cmluZ19vZl9mbXR0eTtcbmV4cG9ydHMuc3RyaW5nX29mX2ZtdCA9IHN0cmluZ19vZl9mbXQ7XG5leHBvcnRzLm9wZW5fYm94X29mX3N0cmluZyA9IG9wZW5fYm94X29mX3N0cmluZztcbmV4cG9ydHMuc3ltbSA9IHN5bW07XG5leHBvcnRzLnRyYW5zID0gdHJhbnM7XG5leHBvcnRzLnJlY2FzdCA9IHJlY2FzdDtcbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBCbG9jayA9IHJlcXVpcmUoXCIuL2Jsb2NrLmpzXCIpO1xuXG5mdW5jdGlvbiBlcmFzZV9yZWwocGFyYW0pIHtcbiAgaWYgKHR5cGVvZiBwYXJhbSA9PT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiAvKiBFbmRfb2ZfZm10dHkgKi8wO1xuICB9IGVsc2Uge1xuICAgIHN3aXRjaCAocGFyYW0udGFnIHwgMCkge1xuICAgICAgY2FzZSAwIDogXG4gICAgICAgICAgcmV0dXJuIC8qIENoYXJfdHkgKi9CbG9jay5fXygwLCBbZXJhc2VfcmVsKHBhcmFtWzBdKV0pO1xuICAgICAgY2FzZSAxIDogXG4gICAgICAgICAgcmV0dXJuIC8qIFN0cmluZ190eSAqL0Jsb2NrLl9fKDEsIFtlcmFzZV9yZWwocGFyYW1bMF0pXSk7XG4gICAgICBjYXNlIDIgOiBcbiAgICAgICAgICByZXR1cm4gLyogSW50X3R5ICovQmxvY2suX18oMiwgW2VyYXNlX3JlbChwYXJhbVswXSldKTtcbiAgICAgIGNhc2UgMyA6IFxuICAgICAgICAgIHJldHVybiAvKiBJbnQzMl90eSAqL0Jsb2NrLl9fKDMsIFtlcmFzZV9yZWwocGFyYW1bMF0pXSk7XG4gICAgICBjYXNlIDQgOiBcbiAgICAgICAgICByZXR1cm4gLyogTmF0aXZlaW50X3R5ICovQmxvY2suX18oNCwgW2VyYXNlX3JlbChwYXJhbVswXSldKTtcbiAgICAgIGNhc2UgNSA6IFxuICAgICAgICAgIHJldHVybiAvKiBJbnQ2NF90eSAqL0Jsb2NrLl9fKDUsIFtlcmFzZV9yZWwocGFyYW1bMF0pXSk7XG4gICAgICBjYXNlIDYgOiBcbiAgICAgICAgICByZXR1cm4gLyogRmxvYXRfdHkgKi9CbG9jay5fXyg2LCBbZXJhc2VfcmVsKHBhcmFtWzBdKV0pO1xuICAgICAgY2FzZSA3IDogXG4gICAgICAgICAgcmV0dXJuIC8qIEJvb2xfdHkgKi9CbG9jay5fXyg3LCBbZXJhc2VfcmVsKHBhcmFtWzBdKV0pO1xuICAgICAgY2FzZSA4IDogXG4gICAgICAgICAgcmV0dXJuIC8qIEZvcm1hdF9hcmdfdHkgKi9CbG9jay5fXyg4LCBbXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtWzBdLFxuICAgICAgICAgICAgICAgICAgICBlcmFzZV9yZWwocGFyYW1bMV0pXG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIGNhc2UgOSA6IFxuICAgICAgICAgIHZhciB0eTEgPSBwYXJhbVswXTtcbiAgICAgICAgICByZXR1cm4gLyogRm9ybWF0X3N1YnN0X3R5ICovQmxvY2suX18oOSwgW1xuICAgICAgICAgICAgICAgICAgICB0eTEsXG4gICAgICAgICAgICAgICAgICAgIHR5MSxcbiAgICAgICAgICAgICAgICAgICAgZXJhc2VfcmVsKHBhcmFtWzJdKVxuICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDEwIDogXG4gICAgICAgICAgcmV0dXJuIC8qIEFscGhhX3R5ICovQmxvY2suX18oMTAsIFtlcmFzZV9yZWwocGFyYW1bMF0pXSk7XG4gICAgICBjYXNlIDExIDogXG4gICAgICAgICAgcmV0dXJuIC8qIFRoZXRhX3R5ICovQmxvY2suX18oMTEsIFtlcmFzZV9yZWwocGFyYW1bMF0pXSk7XG4gICAgICBjYXNlIDEyIDogXG4gICAgICAgICAgcmV0dXJuIC8qIEFueV90eSAqL0Jsb2NrLl9fKDEyLCBbZXJhc2VfcmVsKHBhcmFtWzBdKV0pO1xuICAgICAgY2FzZSAxMyA6IFxuICAgICAgICAgIHJldHVybiAvKiBSZWFkZXJfdHkgKi9CbG9jay5fXygxMywgW2VyYXNlX3JlbChwYXJhbVswXSldKTtcbiAgICAgIGNhc2UgMTQgOiBcbiAgICAgICAgICByZXR1cm4gLyogSWdub3JlZF9yZWFkZXJfdHkgKi9CbG9jay5fXygxNCwgW2VyYXNlX3JlbChwYXJhbVswXSldKTtcbiAgICAgIFxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjb25jYXRfZm10dHkoZm10dHkxLCBmbXR0eTIpIHtcbiAgaWYgKHR5cGVvZiBmbXR0eTEgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4gZm10dHkyO1xuICB9IGVsc2Uge1xuICAgIHN3aXRjaCAoZm10dHkxLnRhZyB8IDApIHtcbiAgICAgIGNhc2UgMCA6IFxuICAgICAgICAgIHJldHVybiAvKiBDaGFyX3R5ICovQmxvY2suX18oMCwgW2NvbmNhdF9mbXR0eShmbXR0eTFbMF0sIGZtdHR5MildKTtcbiAgICAgIGNhc2UgMSA6IFxuICAgICAgICAgIHJldHVybiAvKiBTdHJpbmdfdHkgKi9CbG9jay5fXygxLCBbY29uY2F0X2ZtdHR5KGZtdHR5MVswXSwgZm10dHkyKV0pO1xuICAgICAgY2FzZSAyIDogXG4gICAgICAgICAgcmV0dXJuIC8qIEludF90eSAqL0Jsb2NrLl9fKDIsIFtjb25jYXRfZm10dHkoZm10dHkxWzBdLCBmbXR0eTIpXSk7XG4gICAgICBjYXNlIDMgOiBcbiAgICAgICAgICByZXR1cm4gLyogSW50MzJfdHkgKi9CbG9jay5fXygzLCBbY29uY2F0X2ZtdHR5KGZtdHR5MVswXSwgZm10dHkyKV0pO1xuICAgICAgY2FzZSA0IDogXG4gICAgICAgICAgcmV0dXJuIC8qIE5hdGl2ZWludF90eSAqL0Jsb2NrLl9fKDQsIFtjb25jYXRfZm10dHkoZm10dHkxWzBdLCBmbXR0eTIpXSk7XG4gICAgICBjYXNlIDUgOiBcbiAgICAgICAgICByZXR1cm4gLyogSW50NjRfdHkgKi9CbG9jay5fXyg1LCBbY29uY2F0X2ZtdHR5KGZtdHR5MVswXSwgZm10dHkyKV0pO1xuICAgICAgY2FzZSA2IDogXG4gICAgICAgICAgcmV0dXJuIC8qIEZsb2F0X3R5ICovQmxvY2suX18oNiwgW2NvbmNhdF9mbXR0eShmbXR0eTFbMF0sIGZtdHR5MildKTtcbiAgICAgIGNhc2UgNyA6IFxuICAgICAgICAgIHJldHVybiAvKiBCb29sX3R5ICovQmxvY2suX18oNywgW2NvbmNhdF9mbXR0eShmbXR0eTFbMF0sIGZtdHR5MildKTtcbiAgICAgIGNhc2UgOCA6IFxuICAgICAgICAgIHJldHVybiAvKiBGb3JtYXRfYXJnX3R5ICovQmxvY2suX18oOCwgW1xuICAgICAgICAgICAgICAgICAgICBmbXR0eTFbMF0sXG4gICAgICAgICAgICAgICAgICAgIGNvbmNhdF9mbXR0eShmbXR0eTFbMV0sIGZtdHR5MilcbiAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgY2FzZSA5IDogXG4gICAgICAgICAgcmV0dXJuIC8qIEZvcm1hdF9zdWJzdF90eSAqL0Jsb2NrLl9fKDksIFtcbiAgICAgICAgICAgICAgICAgICAgZm10dHkxWzBdLFxuICAgICAgICAgICAgICAgICAgICBmbXR0eTFbMV0sXG4gICAgICAgICAgICAgICAgICAgIGNvbmNhdF9mbXR0eShmbXR0eTFbMl0sIGZtdHR5MilcbiAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgY2FzZSAxMCA6IFxuICAgICAgICAgIHJldHVybiAvKiBBbHBoYV90eSAqL0Jsb2NrLl9fKDEwLCBbY29uY2F0X2ZtdHR5KGZtdHR5MVswXSwgZm10dHkyKV0pO1xuICAgICAgY2FzZSAxMSA6IFxuICAgICAgICAgIHJldHVybiAvKiBUaGV0YV90eSAqL0Jsb2NrLl9fKDExLCBbY29uY2F0X2ZtdHR5KGZtdHR5MVswXSwgZm10dHkyKV0pO1xuICAgICAgY2FzZSAxMiA6IFxuICAgICAgICAgIHJldHVybiAvKiBBbnlfdHkgKi9CbG9jay5fXygxMiwgW2NvbmNhdF9mbXR0eShmbXR0eTFbMF0sIGZtdHR5MildKTtcbiAgICAgIGNhc2UgMTMgOiBcbiAgICAgICAgICByZXR1cm4gLyogUmVhZGVyX3R5ICovQmxvY2suX18oMTMsIFtjb25jYXRfZm10dHkoZm10dHkxWzBdLCBmbXR0eTIpXSk7XG4gICAgICBjYXNlIDE0IDogXG4gICAgICAgICAgcmV0dXJuIC8qIElnbm9yZWRfcmVhZGVyX3R5ICovQmxvY2suX18oMTQsIFtjb25jYXRfZm10dHkoZm10dHkxWzBdLCBmbXR0eTIpXSk7XG4gICAgICBcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY29uY2F0X2ZtdChmbXQxLCBmbXQyKSB7XG4gIGlmICh0eXBlb2YgZm10MSA9PT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiBmbXQyO1xuICB9IGVsc2Uge1xuICAgIHN3aXRjaCAoZm10MS50YWcgfCAwKSB7XG4gICAgICBjYXNlIDAgOiBcbiAgICAgICAgICByZXR1cm4gLyogQ2hhciAqL0Jsb2NrLl9fKDAsIFtjb25jYXRfZm10KGZtdDFbMF0sIGZtdDIpXSk7XG4gICAgICBjYXNlIDEgOiBcbiAgICAgICAgICByZXR1cm4gLyogQ2FtbF9jaGFyICovQmxvY2suX18oMSwgW2NvbmNhdF9mbXQoZm10MVswXSwgZm10MildKTtcbiAgICAgIGNhc2UgMiA6IFxuICAgICAgICAgIHJldHVybiAvKiBTdHJpbmcgKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICAgICAgICAgIGZtdDFbMF0sXG4gICAgICAgICAgICAgICAgICAgIGNvbmNhdF9mbXQoZm10MVsxXSwgZm10MilcbiAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgY2FzZSAzIDogXG4gICAgICAgICAgcmV0dXJuIC8qIENhbWxfc3RyaW5nICovQmxvY2suX18oMywgW1xuICAgICAgICAgICAgICAgICAgICBmbXQxWzBdLFxuICAgICAgICAgICAgICAgICAgICBjb25jYXRfZm10KGZtdDFbMV0sIGZtdDIpXG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIGNhc2UgNCA6IFxuICAgICAgICAgIHJldHVybiAvKiBJbnQgKi9CbG9jay5fXyg0LCBbXG4gICAgICAgICAgICAgICAgICAgIGZtdDFbMF0sXG4gICAgICAgICAgICAgICAgICAgIGZtdDFbMV0sXG4gICAgICAgICAgICAgICAgICAgIGZtdDFbMl0sXG4gICAgICAgICAgICAgICAgICAgIGNvbmNhdF9mbXQoZm10MVszXSwgZm10MilcbiAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgY2FzZSA1IDogXG4gICAgICAgICAgcmV0dXJuIC8qIEludDMyICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgICBmbXQxWzBdLFxuICAgICAgICAgICAgICAgICAgICBmbXQxWzFdLFxuICAgICAgICAgICAgICAgICAgICBmbXQxWzJdLFxuICAgICAgICAgICAgICAgICAgICBjb25jYXRfZm10KGZtdDFbM10sIGZtdDIpXG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIGNhc2UgNiA6IFxuICAgICAgICAgIHJldHVybiAvKiBOYXRpdmVpbnQgKi9CbG9jay5fXyg2LCBbXG4gICAgICAgICAgICAgICAgICAgIGZtdDFbMF0sXG4gICAgICAgICAgICAgICAgICAgIGZtdDFbMV0sXG4gICAgICAgICAgICAgICAgICAgIGZtdDFbMl0sXG4gICAgICAgICAgICAgICAgICAgIGNvbmNhdF9mbXQoZm10MVszXSwgZm10MilcbiAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgY2FzZSA3IDogXG4gICAgICAgICAgcmV0dXJuIC8qIEludDY0ICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgICAgICAgICBmbXQxWzBdLFxuICAgICAgICAgICAgICAgICAgICBmbXQxWzFdLFxuICAgICAgICAgICAgICAgICAgICBmbXQxWzJdLFxuICAgICAgICAgICAgICAgICAgICBjb25jYXRfZm10KGZtdDFbM10sIGZtdDIpXG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIGNhc2UgOCA6IFxuICAgICAgICAgIHJldHVybiAvKiBGbG9hdCAqL0Jsb2NrLl9fKDgsIFtcbiAgICAgICAgICAgICAgICAgICAgZm10MVswXSxcbiAgICAgICAgICAgICAgICAgICAgZm10MVsxXSxcbiAgICAgICAgICAgICAgICAgICAgZm10MVsyXSxcbiAgICAgICAgICAgICAgICAgICAgY29uY2F0X2ZtdChmbXQxWzNdLCBmbXQyKVxuICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDkgOiBcbiAgICAgICAgICByZXR1cm4gLyogQm9vbCAqL0Jsb2NrLl9fKDksIFtjb25jYXRfZm10KGZtdDFbMF0sIGZtdDIpXSk7XG4gICAgICBjYXNlIDEwIDogXG4gICAgICAgICAgcmV0dXJuIC8qIEZsdXNoICovQmxvY2suX18oMTAsIFtjb25jYXRfZm10KGZtdDFbMF0sIGZtdDIpXSk7XG4gICAgICBjYXNlIDExIDogXG4gICAgICAgICAgcmV0dXJuIC8qIFN0cmluZ19saXRlcmFsICovQmxvY2suX18oMTEsIFtcbiAgICAgICAgICAgICAgICAgICAgZm10MVswXSxcbiAgICAgICAgICAgICAgICAgICAgY29uY2F0X2ZtdChmbXQxWzFdLCBmbXQyKVxuICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDEyIDogXG4gICAgICAgICAgcmV0dXJuIC8qIENoYXJfbGl0ZXJhbCAqL0Jsb2NrLl9fKDEyLCBbXG4gICAgICAgICAgICAgICAgICAgIGZtdDFbMF0sXG4gICAgICAgICAgICAgICAgICAgIGNvbmNhdF9mbXQoZm10MVsxXSwgZm10MilcbiAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgY2FzZSAxMyA6IFxuICAgICAgICAgIHJldHVybiAvKiBGb3JtYXRfYXJnICovQmxvY2suX18oMTMsIFtcbiAgICAgICAgICAgICAgICAgICAgZm10MVswXSxcbiAgICAgICAgICAgICAgICAgICAgZm10MVsxXSxcbiAgICAgICAgICAgICAgICAgICAgY29uY2F0X2ZtdChmbXQxWzJdLCBmbXQyKVxuICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDE0IDogXG4gICAgICAgICAgcmV0dXJuIC8qIEZvcm1hdF9zdWJzdCAqL0Jsb2NrLl9fKDE0LCBbXG4gICAgICAgICAgICAgICAgICAgIGZtdDFbMF0sXG4gICAgICAgICAgICAgICAgICAgIGZtdDFbMV0sXG4gICAgICAgICAgICAgICAgICAgIGNvbmNhdF9mbXQoZm10MVsyXSwgZm10MilcbiAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgY2FzZSAxNSA6IFxuICAgICAgICAgIHJldHVybiAvKiBBbHBoYSAqL0Jsb2NrLl9fKDE1LCBbY29uY2F0X2ZtdChmbXQxWzBdLCBmbXQyKV0pO1xuICAgICAgY2FzZSAxNiA6IFxuICAgICAgICAgIHJldHVybiAvKiBUaGV0YSAqL0Jsb2NrLl9fKDE2LCBbY29uY2F0X2ZtdChmbXQxWzBdLCBmbXQyKV0pO1xuICAgICAgY2FzZSAxNyA6IFxuICAgICAgICAgIHJldHVybiAvKiBGb3JtYXR0aW5nX2xpdCAqL0Jsb2NrLl9fKDE3LCBbXG4gICAgICAgICAgICAgICAgICAgIGZtdDFbMF0sXG4gICAgICAgICAgICAgICAgICAgIGNvbmNhdF9mbXQoZm10MVsxXSwgZm10MilcbiAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgY2FzZSAxOCA6IFxuICAgICAgICAgIHJldHVybiAvKiBGb3JtYXR0aW5nX2dlbiAqL0Jsb2NrLl9fKDE4LCBbXG4gICAgICAgICAgICAgICAgICAgIGZtdDFbMF0sXG4gICAgICAgICAgICAgICAgICAgIGNvbmNhdF9mbXQoZm10MVsxXSwgZm10MilcbiAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgY2FzZSAxOSA6IFxuICAgICAgICAgIHJldHVybiAvKiBSZWFkZXIgKi9CbG9jay5fXygxOSwgW2NvbmNhdF9mbXQoZm10MVswXSwgZm10MildKTtcbiAgICAgIGNhc2UgMjAgOiBcbiAgICAgICAgICByZXR1cm4gLyogU2Nhbl9jaGFyX3NldCAqL0Jsb2NrLl9fKDIwLCBbXG4gICAgICAgICAgICAgICAgICAgIGZtdDFbMF0sXG4gICAgICAgICAgICAgICAgICAgIGZtdDFbMV0sXG4gICAgICAgICAgICAgICAgICAgIGNvbmNhdF9mbXQoZm10MVsyXSwgZm10MilcbiAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgY2FzZSAyMSA6IFxuICAgICAgICAgIHJldHVybiAvKiBTY2FuX2dldF9jb3VudGVyICovQmxvY2suX18oMjEsIFtcbiAgICAgICAgICAgICAgICAgICAgZm10MVswXSxcbiAgICAgICAgICAgICAgICAgICAgY29uY2F0X2ZtdChmbXQxWzFdLCBmbXQyKVxuICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDIyIDogXG4gICAgICAgICAgcmV0dXJuIC8qIFNjYW5fbmV4dF9jaGFyICovQmxvY2suX18oMjIsIFtjb25jYXRfZm10KGZtdDFbMF0sIGZtdDIpXSk7XG4gICAgICBjYXNlIDIzIDogXG4gICAgICAgICAgcmV0dXJuIC8qIElnbm9yZWRfcGFyYW0gKi9CbG9jay5fXygyMywgW1xuICAgICAgICAgICAgICAgICAgICBmbXQxWzBdLFxuICAgICAgICAgICAgICAgICAgICBjb25jYXRfZm10KGZtdDFbMV0sIGZtdDIpXG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIGNhc2UgMjQgOiBcbiAgICAgICAgICByZXR1cm4gLyogQ3VzdG9tICovQmxvY2suX18oMjQsIFtcbiAgICAgICAgICAgICAgICAgICAgZm10MVswXSxcbiAgICAgICAgICAgICAgICAgICAgZm10MVsxXSxcbiAgICAgICAgICAgICAgICAgICAgY29uY2F0X2ZtdChmbXQxWzJdLCBmbXQyKVxuICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0cy5jb25jYXRfZm10dHkgPSBjb25jYXRfZm10dHk7XG5leHBvcnRzLmVyYXNlX3JlbCA9IGVyYXNlX3JlbDtcbmV4cG9ydHMuY29uY2F0X2ZtdCA9IGNvbmNhdF9mbXQ7XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FtbF9ieXRlcyA9IHJlcXVpcmUoXCIuL2NhbWxfYnl0ZXMuanNcIik7XG52YXIgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMgPSByZXF1aXJlKFwiLi9jYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5qc1wiKTtcblxuZnVuY3Rpb24gY2hyKG4pIHtcbiAgaWYgKG4gPCAwIHx8IG4gPiAyNTUpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIkNoYXIuY2hyXCJcbiAgICAgICAgXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbjtcbiAgfVxufVxuXG5mdW5jdGlvbiBlc2NhcGVkKGMpIHtcbiAgdmFyIGV4aXQgPSAwO1xuICBpZiAoYyA+PSA0MCkge1xuICAgIGlmIChjICE9PSA5Mikge1xuICAgICAgZXhpdCA9IGMgPj0gMTI3ID8gMSA6IDI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIlxcXFxcXFxcXCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKGMgPj0gMzIpIHtcbiAgICBpZiAoYyA+PSAzOSkge1xuICAgICAgcmV0dXJuIFwiXFxcXCdcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhpdCA9IDI7XG4gICAgfVxuICB9IGVsc2UgaWYgKGMgPj0gMTQpIHtcbiAgICBleGl0ID0gMTtcbiAgfSBlbHNlIHtcbiAgICBzd2l0Y2ggKGMpIHtcbiAgICAgIGNhc2UgOCA6IFxuICAgICAgICAgIHJldHVybiBcIlxcXFxiXCI7XG4gICAgICBjYXNlIDkgOiBcbiAgICAgICAgICByZXR1cm4gXCJcXFxcdFwiO1xuICAgICAgY2FzZSAxMCA6IFxuICAgICAgICAgIHJldHVybiBcIlxcXFxuXCI7XG4gICAgICBjYXNlIDAgOiBcbiAgICAgIGNhc2UgMSA6IFxuICAgICAgY2FzZSAyIDogXG4gICAgICBjYXNlIDMgOiBcbiAgICAgIGNhc2UgNCA6IFxuICAgICAgY2FzZSA1IDogXG4gICAgICBjYXNlIDYgOiBcbiAgICAgIGNhc2UgNyA6IFxuICAgICAgY2FzZSAxMSA6IFxuICAgICAgY2FzZSAxMiA6IFxuICAgICAgICAgIGV4aXQgPSAxO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxMyA6IFxuICAgICAgICAgIHJldHVybiBcIlxcXFxyXCI7XG4gICAgICBcbiAgICB9XG4gIH1cbiAgc3dpdGNoIChleGl0KSB7XG4gICAgY2FzZSAxIDogXG4gICAgICAgIHZhciBzID0gW1xuICAgICAgICAgIDAsXG4gICAgICAgICAgMCxcbiAgICAgICAgICAwLFxuICAgICAgICAgIDBcbiAgICAgICAgXTtcbiAgICAgICAgc1swXSA9IC8qIFwiXFxcXFwiICovOTI7XG4gICAgICAgIHNbMV0gPSA0OCArIChjIC8gMTAwIHwgMCkgfCAwO1xuICAgICAgICBzWzJdID0gNDggKyAoYyAvIDEwIHwgMCkgJSAxMCB8IDA7XG4gICAgICAgIHNbM10gPSA0OCArIGMgJSAxMCB8IDA7XG4gICAgICAgIHJldHVybiBDYW1sX2J5dGVzLmJ5dGVzX3RvX3N0cmluZyhzKTtcbiAgICBjYXNlIDIgOiBcbiAgICAgICAgdmFyIHMkMSA9IFswXTtcbiAgICAgICAgcyQxWzBdID0gYztcbiAgICAgICAgcmV0dXJuIENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nKHMkMSk7XG4gICAgXG4gIH1cbn1cblxuZnVuY3Rpb24gbG93ZXJjYXNlKGMpIHtcbiAgaWYgKGMgPj0gLyogXCJBXCIgKi82NSAmJiBjIDw9IC8qIFwiWlwiICovOTAgfHwgYyA+PSAvKiBcIlxcMTkyXCIgKi8xOTIgJiYgYyA8PSAvKiBcIlxcMjE0XCIgKi8yMTQgfHwgYyA+PSAvKiBcIlxcMjE2XCIgKi8yMTYgJiYgYyA8PSAvKiBcIlxcMjIyXCIgKi8yMjIpIHtcbiAgICByZXR1cm4gYyArIDMyIHwgMDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYztcbiAgfVxufVxuXG5mdW5jdGlvbiB1cHBlcmNhc2UoYykge1xuICBpZiAoYyA+PSAvKiBcImFcIiAqLzk3ICYmIGMgPD0gLyogXCJ6XCIgKi8xMjIgfHwgYyA+PSAvKiBcIlxcMjI0XCIgKi8yMjQgJiYgYyA8PSAvKiBcIlxcMjQ2XCIgKi8yNDYgfHwgYyA+PSAvKiBcIlxcMjQ4XCIgKi8yNDggJiYgYyA8PSAvKiBcIlxcMjU0XCIgKi8yNTQpIHtcbiAgICByZXR1cm4gYyAtIDMyIHwgMDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYztcbiAgfVxufVxuXG5mdW5jdGlvbiBjb21wYXJlKGMxLCBjMikge1xuICByZXR1cm4gYzEgLSBjMiB8IDA7XG59XG5cbmV4cG9ydHMuY2hyID0gY2hyO1xuZXhwb3J0cy5lc2NhcGVkID0gZXNjYXBlZDtcbmV4cG9ydHMubG93ZXJjYXNlID0gbG93ZXJjYXNlO1xuZXhwb3J0cy51cHBlcmNhc2UgPSB1cHBlcmNhc2U7XG5leHBvcnRzLmNvbXBhcmUgPSBjb21wYXJlO1xuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENhbWxfYXJyYXkgPSByZXF1aXJlKFwiLi9jYW1sX2FycmF5LmpzXCIpO1xuXG5mdW5jdGlvbiBhcHAoX2YsIF9hcmdzKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgYXJncyA9IF9hcmdzO1xuICAgIHZhciBmID0gX2Y7XG4gICAgdmFyIGluaXRfYXJpdHkgPSBmLmxlbmd0aDtcbiAgICB2YXIgYXJpdHkgPSBpbml0X2FyaXR5ID09PSAwID8gMSA6IGluaXRfYXJpdHk7XG4gICAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICAgIHZhciBkID0gYXJpdHkgLSBsZW4gfCAwO1xuICAgIGlmIChkID09PSAwKSB7XG4gICAgICByZXR1cm4gZi5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9IGVsc2UgaWYgKGQgPCAwKSB7XG4gICAgICBfYXJncyA9IENhbWxfYXJyYXkuY2FtbF9hcnJheV9zdWIoYXJncywgYXJpdHksIC1kIHwgMCk7XG4gICAgICBfZiA9IGYuYXBwbHkobnVsbCwgQ2FtbF9hcnJheS5jYW1sX2FycmF5X3N1YihhcmdzLCAwLCBhcml0eSkpO1xuICAgICAgY29udGludWUgO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKGZ1bmN0aW9uKGYsYXJncyl7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIGFwcChmLCBhcmdzLmNvbmNhdCgvKiBhcnJheSAqL1t4XSkpO1xuICAgICAgfVxuICAgICAgfShmLGFyZ3MpKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGN1cnJ5XzEobywgYTAsIGFyaXR5KSB7XG4gIHN3aXRjaCAoYXJpdHkpIHtcbiAgICBjYXNlIDEgOiBcbiAgICAgICAgcmV0dXJuIG8oYTApO1xuICAgIGNhc2UgMiA6IFxuICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgcmV0dXJuIG8oYTAsIHBhcmFtKTtcbiAgICAgICAgICB9KTtcbiAgICBjYXNlIDMgOiBcbiAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0sIHBhcmFtJDEpIHtcbiAgICAgICAgICAgIHJldHVybiBvKGEwLCBwYXJhbSwgcGFyYW0kMSk7XG4gICAgICAgICAgfSk7XG4gICAgY2FzZSA0IDogXG4gICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxLCBwYXJhbSQyKSB7XG4gICAgICAgICAgICByZXR1cm4gbyhhMCwgcGFyYW0sIHBhcmFtJDEsIHBhcmFtJDIpO1xuICAgICAgICAgIH0pO1xuICAgIGNhc2UgNSA6IFxuICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSwgcGFyYW0kMiwgcGFyYW0kMykge1xuICAgICAgICAgICAgcmV0dXJuIG8oYTAsIHBhcmFtLCBwYXJhbSQxLCBwYXJhbSQyLCBwYXJhbSQzKTtcbiAgICAgICAgICB9KTtcbiAgICBjYXNlIDYgOiBcbiAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0sIHBhcmFtJDEsIHBhcmFtJDIsIHBhcmFtJDMsIHBhcmFtJDQpIHtcbiAgICAgICAgICAgIHJldHVybiBvKGEwLCBwYXJhbSwgcGFyYW0kMSwgcGFyYW0kMiwgcGFyYW0kMywgcGFyYW0kNCk7XG4gICAgICAgICAgfSk7XG4gICAgY2FzZSA3IDogXG4gICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxLCBwYXJhbSQyLCBwYXJhbSQzLCBwYXJhbSQ0LCBwYXJhbSQ1KSB7XG4gICAgICAgICAgICByZXR1cm4gbyhhMCwgcGFyYW0sIHBhcmFtJDEsIHBhcmFtJDIsIHBhcmFtJDMsIHBhcmFtJDQsIHBhcmFtJDUpO1xuICAgICAgICAgIH0pO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gYXBwKG8sIC8qIGFycmF5ICovW2EwXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gXzEobywgYTApIHtcbiAgdmFyIGFyaXR5ID0gby5sZW5ndGg7XG4gIGlmIChhcml0eSA9PT0gMSkge1xuICAgIHJldHVybiBvKGEwKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY3VycnlfMShvLCBhMCwgYXJpdHkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9fMShvKSB7XG4gIHZhciBhcml0eSA9IG8ubGVuZ3RoO1xuICBpZiAoYXJpdHkgPT09IDEpIHtcbiAgICByZXR1cm4gbztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKGZ1bmN0aW9uIChhMCkge1xuICAgICAgICByZXR1cm4gXzEobywgYTApO1xuICAgICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3VycnlfMihvLCBhMCwgYTEsIGFyaXR5KSB7XG4gIHN3aXRjaCAoYXJpdHkpIHtcbiAgICBjYXNlIDEgOiBcbiAgICAgICAgcmV0dXJuIGFwcChvKGEwKSwgLyogYXJyYXkgKi9bYTFdKTtcbiAgICBjYXNlIDIgOiBcbiAgICAgICAgcmV0dXJuIG8oYTAsIGExKTtcbiAgICBjYXNlIDMgOiBcbiAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgIHJldHVybiBvKGEwLCBhMSwgcGFyYW0pO1xuICAgICAgICAgIH0pO1xuICAgIGNhc2UgNCA6IFxuICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSkge1xuICAgICAgICAgICAgcmV0dXJuIG8oYTAsIGExLCBwYXJhbSwgcGFyYW0kMSk7XG4gICAgICAgICAgfSk7XG4gICAgY2FzZSA1IDogXG4gICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxLCBwYXJhbSQyKSB7XG4gICAgICAgICAgICByZXR1cm4gbyhhMCwgYTEsIHBhcmFtLCBwYXJhbSQxLCBwYXJhbSQyKTtcbiAgICAgICAgICB9KTtcbiAgICBjYXNlIDYgOiBcbiAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0sIHBhcmFtJDEsIHBhcmFtJDIsIHBhcmFtJDMpIHtcbiAgICAgICAgICAgIHJldHVybiBvKGEwLCBhMSwgcGFyYW0sIHBhcmFtJDEsIHBhcmFtJDIsIHBhcmFtJDMpO1xuICAgICAgICAgIH0pO1xuICAgIGNhc2UgNyA6IFxuICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSwgcGFyYW0kMiwgcGFyYW0kMywgcGFyYW0kNCkge1xuICAgICAgICAgICAgcmV0dXJuIG8oYTAsIGExLCBwYXJhbSwgcGFyYW0kMSwgcGFyYW0kMiwgcGFyYW0kMywgcGFyYW0kNCk7XG4gICAgICAgICAgfSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBhcHAobywgLyogYXJyYXkgKi9bXG4gICAgICAgICAgICAgICAgICBhMCxcbiAgICAgICAgICAgICAgICAgIGExXG4gICAgICAgICAgICAgICAgXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gXzIobywgYTAsIGExKSB7XG4gIHZhciBhcml0eSA9IG8ubGVuZ3RoO1xuICBpZiAoYXJpdHkgPT09IDIpIHtcbiAgICByZXR1cm4gbyhhMCwgYTEpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjdXJyeV8yKG8sIGEwLCBhMSwgYXJpdHkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9fMihvKSB7XG4gIHZhciBhcml0eSA9IG8ubGVuZ3RoO1xuICBpZiAoYXJpdHkgPT09IDIpIHtcbiAgICByZXR1cm4gbztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKGZ1bmN0aW9uIChhMCwgYTEpIHtcbiAgICAgICAgcmV0dXJuIF8yKG8sIGEwLCBhMSk7XG4gICAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjdXJyeV8zKG8sIGEwLCBhMSwgYTIsIGFyaXR5KSB7XG4gIHN3aXRjaCAoYXJpdHkpIHtcbiAgICBjYXNlIDEgOiBcbiAgICAgICAgcmV0dXJuIGFwcChvKGEwKSwgLyogYXJyYXkgKi9bXG4gICAgICAgICAgICAgICAgICAgIGExLFxuICAgICAgICAgICAgICAgICAgICBhMlxuICAgICAgICAgICAgICAgICAgXSk7XG4gICAgY2FzZSAyIDogXG4gICAgICAgIHJldHVybiBhcHAobyhhMCwgYTEpLCAvKiBhcnJheSAqL1thMl0pO1xuICAgIGNhc2UgMyA6IFxuICAgICAgICByZXR1cm4gbyhhMCwgYTEsIGEyKTtcbiAgICBjYXNlIDQgOiBcbiAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgIHJldHVybiBvKGEwLCBhMSwgYTIsIHBhcmFtKTtcbiAgICAgICAgICB9KTtcbiAgICBjYXNlIDUgOiBcbiAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0sIHBhcmFtJDEpIHtcbiAgICAgICAgICAgIHJldHVybiBvKGEwLCBhMSwgYTIsIHBhcmFtLCBwYXJhbSQxKTtcbiAgICAgICAgICB9KTtcbiAgICBjYXNlIDYgOiBcbiAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0sIHBhcmFtJDEsIHBhcmFtJDIpIHtcbiAgICAgICAgICAgIHJldHVybiBvKGEwLCBhMSwgYTIsIHBhcmFtLCBwYXJhbSQxLCBwYXJhbSQyKTtcbiAgICAgICAgICB9KTtcbiAgICBjYXNlIDcgOiBcbiAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0sIHBhcmFtJDEsIHBhcmFtJDIsIHBhcmFtJDMpIHtcbiAgICAgICAgICAgIHJldHVybiBvKGEwLCBhMSwgYTIsIHBhcmFtLCBwYXJhbSQxLCBwYXJhbSQyLCBwYXJhbSQzKTtcbiAgICAgICAgICB9KTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGFwcChvLCAvKiBhcnJheSAqL1tcbiAgICAgICAgICAgICAgICAgIGEwLFxuICAgICAgICAgICAgICAgICAgYTEsXG4gICAgICAgICAgICAgICAgICBhMlxuICAgICAgICAgICAgICAgIF0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIF8zKG8sIGEwLCBhMSwgYTIpIHtcbiAgdmFyIGFyaXR5ID0gby5sZW5ndGg7XG4gIGlmIChhcml0eSA9PT0gMykge1xuICAgIHJldHVybiBvKGEwLCBhMSwgYTIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjdXJyeV8zKG8sIGEwLCBhMSwgYTIsIGFyaXR5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfXzMobykge1xuICB2YXIgYXJpdHkgPSBvLmxlbmd0aDtcbiAgaWYgKGFyaXR5ID09PSAzKSB7XG4gICAgcmV0dXJuIG87XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChmdW5jdGlvbiAoYTAsIGExLCBhMikge1xuICAgICAgICByZXR1cm4gXzMobywgYTAsIGExLCBhMik7XG4gICAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjdXJyeV80KG8sIGEwLCBhMSwgYTIsIGEzLCBhcml0eSkge1xuICBzd2l0Y2ggKGFyaXR5KSB7XG4gICAgY2FzZSAxIDogXG4gICAgICAgIHJldHVybiBhcHAobyhhMCksIC8qIGFycmF5ICovW1xuICAgICAgICAgICAgICAgICAgICBhMSxcbiAgICAgICAgICAgICAgICAgICAgYTIsXG4gICAgICAgICAgICAgICAgICAgIGEzXG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICBjYXNlIDIgOiBcbiAgICAgICAgcmV0dXJuIGFwcChvKGEwLCBhMSksIC8qIGFycmF5ICovW1xuICAgICAgICAgICAgICAgICAgICBhMixcbiAgICAgICAgICAgICAgICAgICAgYTNcbiAgICAgICAgICAgICAgICAgIF0pO1xuICAgIGNhc2UgMyA6IFxuICAgICAgICByZXR1cm4gYXBwKG8oYTAsIGExLCBhMiksIC8qIGFycmF5ICovW2EzXSk7XG4gICAgY2FzZSA0IDogXG4gICAgICAgIHJldHVybiBvKGEwLCBhMSwgYTIsIGEzKTtcbiAgICBjYXNlIDUgOiBcbiAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgIHJldHVybiBvKGEwLCBhMSwgYTIsIGEzLCBwYXJhbSk7XG4gICAgICAgICAgfSk7XG4gICAgY2FzZSA2IDogXG4gICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxKSB7XG4gICAgICAgICAgICByZXR1cm4gbyhhMCwgYTEsIGEyLCBhMywgcGFyYW0sIHBhcmFtJDEpO1xuICAgICAgICAgIH0pO1xuICAgIGNhc2UgNyA6IFxuICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSwgcGFyYW0kMikge1xuICAgICAgICAgICAgcmV0dXJuIG8oYTAsIGExLCBhMiwgYTMsIHBhcmFtLCBwYXJhbSQxLCBwYXJhbSQyKTtcbiAgICAgICAgICB9KTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGFwcChvLCAvKiBhcnJheSAqL1tcbiAgICAgICAgICAgICAgICAgIGEwLFxuICAgICAgICAgICAgICAgICAgYTEsXG4gICAgICAgICAgICAgICAgICBhMixcbiAgICAgICAgICAgICAgICAgIGEzXG4gICAgICAgICAgICAgICAgXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gXzQobywgYTAsIGExLCBhMiwgYTMpIHtcbiAgdmFyIGFyaXR5ID0gby5sZW5ndGg7XG4gIGlmIChhcml0eSA9PT0gNCkge1xuICAgIHJldHVybiBvKGEwLCBhMSwgYTIsIGEzKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY3VycnlfNChvLCBhMCwgYTEsIGEyLCBhMywgYXJpdHkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9fNChvKSB7XG4gIHZhciBhcml0eSA9IG8ubGVuZ3RoO1xuICBpZiAoYXJpdHkgPT09IDQpIHtcbiAgICByZXR1cm4gbztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKGZ1bmN0aW9uIChhMCwgYTEsIGEyLCBhMykge1xuICAgICAgICByZXR1cm4gXzQobywgYTAsIGExLCBhMiwgYTMpO1xuICAgICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3VycnlfNShvLCBhMCwgYTEsIGEyLCBhMywgYTQsIGFyaXR5KSB7XG4gIHN3aXRjaCAoYXJpdHkpIHtcbiAgICBjYXNlIDEgOiBcbiAgICAgICAgcmV0dXJuIGFwcChvKGEwKSwgLyogYXJyYXkgKi9bXG4gICAgICAgICAgICAgICAgICAgIGExLFxuICAgICAgICAgICAgICAgICAgICBhMixcbiAgICAgICAgICAgICAgICAgICAgYTMsXG4gICAgICAgICAgICAgICAgICAgIGE0XG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICBjYXNlIDIgOiBcbiAgICAgICAgcmV0dXJuIGFwcChvKGEwLCBhMSksIC8qIGFycmF5ICovW1xuICAgICAgICAgICAgICAgICAgICBhMixcbiAgICAgICAgICAgICAgICAgICAgYTMsXG4gICAgICAgICAgICAgICAgICAgIGE0XG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICBjYXNlIDMgOiBcbiAgICAgICAgcmV0dXJuIGFwcChvKGEwLCBhMSwgYTIpLCAvKiBhcnJheSAqL1tcbiAgICAgICAgICAgICAgICAgICAgYTMsXG4gICAgICAgICAgICAgICAgICAgIGE0XG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICBjYXNlIDQgOiBcbiAgICAgICAgcmV0dXJuIGFwcChvKGEwLCBhMSwgYTIsIGEzKSwgLyogYXJyYXkgKi9bYTRdKTtcbiAgICBjYXNlIDUgOiBcbiAgICAgICAgcmV0dXJuIG8oYTAsIGExLCBhMiwgYTMsIGE0KTtcbiAgICBjYXNlIDYgOiBcbiAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgIHJldHVybiBvKGEwLCBhMSwgYTIsIGEzLCBhNCwgcGFyYW0pO1xuICAgICAgICAgIH0pO1xuICAgIGNhc2UgNyA6IFxuICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSkge1xuICAgICAgICAgICAgcmV0dXJuIG8oYTAsIGExLCBhMiwgYTMsIGE0LCBwYXJhbSwgcGFyYW0kMSk7XG4gICAgICAgICAgfSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBhcHAobywgLyogYXJyYXkgKi9bXG4gICAgICAgICAgICAgICAgICBhMCxcbiAgICAgICAgICAgICAgICAgIGExLFxuICAgICAgICAgICAgICAgICAgYTIsXG4gICAgICAgICAgICAgICAgICBhMyxcbiAgICAgICAgICAgICAgICAgIGE0XG4gICAgICAgICAgICAgICAgXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gXzUobywgYTAsIGExLCBhMiwgYTMsIGE0KSB7XG4gIHZhciBhcml0eSA9IG8ubGVuZ3RoO1xuICBpZiAoYXJpdHkgPT09IDUpIHtcbiAgICByZXR1cm4gbyhhMCwgYTEsIGEyLCBhMywgYTQpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjdXJyeV81KG8sIGEwLCBhMSwgYTIsIGEzLCBhNCwgYXJpdHkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9fNShvKSB7XG4gIHZhciBhcml0eSA9IG8ubGVuZ3RoO1xuICBpZiAoYXJpdHkgPT09IDUpIHtcbiAgICByZXR1cm4gbztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKGZ1bmN0aW9uIChhMCwgYTEsIGEyLCBhMywgYTQpIHtcbiAgICAgICAgcmV0dXJuIF81KG8sIGEwLCBhMSwgYTIsIGEzLCBhNCk7XG4gICAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjdXJyeV82KG8sIGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUsIGFyaXR5KSB7XG4gIHN3aXRjaCAoYXJpdHkpIHtcbiAgICBjYXNlIDEgOiBcbiAgICAgICAgcmV0dXJuIGFwcChvKGEwKSwgLyogYXJyYXkgKi9bXG4gICAgICAgICAgICAgICAgICAgIGExLFxuICAgICAgICAgICAgICAgICAgICBhMixcbiAgICAgICAgICAgICAgICAgICAgYTMsXG4gICAgICAgICAgICAgICAgICAgIGE0LFxuICAgICAgICAgICAgICAgICAgICBhNVxuICAgICAgICAgICAgICAgICAgXSk7XG4gICAgY2FzZSAyIDogXG4gICAgICAgIHJldHVybiBhcHAobyhhMCwgYTEpLCAvKiBhcnJheSAqL1tcbiAgICAgICAgICAgICAgICAgICAgYTIsXG4gICAgICAgICAgICAgICAgICAgIGEzLFxuICAgICAgICAgICAgICAgICAgICBhNCxcbiAgICAgICAgICAgICAgICAgICAgYTVcbiAgICAgICAgICAgICAgICAgIF0pO1xuICAgIGNhc2UgMyA6IFxuICAgICAgICByZXR1cm4gYXBwKG8oYTAsIGExLCBhMiksIC8qIGFycmF5ICovW1xuICAgICAgICAgICAgICAgICAgICBhMyxcbiAgICAgICAgICAgICAgICAgICAgYTQsXG4gICAgICAgICAgICAgICAgICAgIGE1XG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICBjYXNlIDQgOiBcbiAgICAgICAgcmV0dXJuIGFwcChvKGEwLCBhMSwgYTIsIGEzKSwgLyogYXJyYXkgKi9bXG4gICAgICAgICAgICAgICAgICAgIGE0LFxuICAgICAgICAgICAgICAgICAgICBhNVxuICAgICAgICAgICAgICAgICAgXSk7XG4gICAgY2FzZSA1IDogXG4gICAgICAgIHJldHVybiBhcHAobyhhMCwgYTEsIGEyLCBhMywgYTQpLCAvKiBhcnJheSAqL1thNV0pO1xuICAgIGNhc2UgNiA6IFxuICAgICAgICByZXR1cm4gbyhhMCwgYTEsIGEyLCBhMywgYTQsIGE1KTtcbiAgICBjYXNlIDcgOiBcbiAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgIHJldHVybiBvKGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUsIHBhcmFtKTtcbiAgICAgICAgICB9KTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGFwcChvLCAvKiBhcnJheSAqL1tcbiAgICAgICAgICAgICAgICAgIGEwLFxuICAgICAgICAgICAgICAgICAgYTEsXG4gICAgICAgICAgICAgICAgICBhMixcbiAgICAgICAgICAgICAgICAgIGEzLFxuICAgICAgICAgICAgICAgICAgYTQsXG4gICAgICAgICAgICAgICAgICBhNVxuICAgICAgICAgICAgICAgIF0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIF82KG8sIGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUpIHtcbiAgdmFyIGFyaXR5ID0gby5sZW5ndGg7XG4gIGlmIChhcml0eSA9PT0gNikge1xuICAgIHJldHVybiBvKGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjdXJyeV82KG8sIGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUsIGFyaXR5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfXzYobykge1xuICB2YXIgYXJpdHkgPSBvLmxlbmd0aDtcbiAgaWYgKGFyaXR5ID09PSA2KSB7XG4gICAgcmV0dXJuIG87XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChmdW5jdGlvbiAoYTAsIGExLCBhMiwgYTMsIGE0LCBhNSkge1xuICAgICAgICByZXR1cm4gXzYobywgYTAsIGExLCBhMiwgYTMsIGE0LCBhNSk7XG4gICAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjdXJyeV83KG8sIGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhcml0eSkge1xuICBzd2l0Y2ggKGFyaXR5KSB7XG4gICAgY2FzZSAxIDogXG4gICAgICAgIHJldHVybiBhcHAobyhhMCksIC8qIGFycmF5ICovW1xuICAgICAgICAgICAgICAgICAgICBhMSxcbiAgICAgICAgICAgICAgICAgICAgYTIsXG4gICAgICAgICAgICAgICAgICAgIGEzLFxuICAgICAgICAgICAgICAgICAgICBhNCxcbiAgICAgICAgICAgICAgICAgICAgYTUsXG4gICAgICAgICAgICAgICAgICAgIGE2XG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICBjYXNlIDIgOiBcbiAgICAgICAgcmV0dXJuIGFwcChvKGEwLCBhMSksIC8qIGFycmF5ICovW1xuICAgICAgICAgICAgICAgICAgICBhMixcbiAgICAgICAgICAgICAgICAgICAgYTMsXG4gICAgICAgICAgICAgICAgICAgIGE0LFxuICAgICAgICAgICAgICAgICAgICBhNSxcbiAgICAgICAgICAgICAgICAgICAgYTZcbiAgICAgICAgICAgICAgICAgIF0pO1xuICAgIGNhc2UgMyA6IFxuICAgICAgICByZXR1cm4gYXBwKG8oYTAsIGExLCBhMiksIC8qIGFycmF5ICovW1xuICAgICAgICAgICAgICAgICAgICBhMyxcbiAgICAgICAgICAgICAgICAgICAgYTQsXG4gICAgICAgICAgICAgICAgICAgIGE1LFxuICAgICAgICAgICAgICAgICAgICBhNlxuICAgICAgICAgICAgICAgICAgXSk7XG4gICAgY2FzZSA0IDogXG4gICAgICAgIHJldHVybiBhcHAobyhhMCwgYTEsIGEyLCBhMyksIC8qIGFycmF5ICovW1xuICAgICAgICAgICAgICAgICAgICBhNCxcbiAgICAgICAgICAgICAgICAgICAgYTUsXG4gICAgICAgICAgICAgICAgICAgIGE2XG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICBjYXNlIDUgOiBcbiAgICAgICAgcmV0dXJuIGFwcChvKGEwLCBhMSwgYTIsIGEzLCBhNCksIC8qIGFycmF5ICovW1xuICAgICAgICAgICAgICAgICAgICBhNSxcbiAgICAgICAgICAgICAgICAgICAgYTZcbiAgICAgICAgICAgICAgICAgIF0pO1xuICAgIGNhc2UgNiA6IFxuICAgICAgICByZXR1cm4gYXBwKG8oYTAsIGExLCBhMiwgYTMsIGE0LCBhNSksIC8qIGFycmF5ICovW2E2XSk7XG4gICAgY2FzZSA3IDogXG4gICAgICAgIHJldHVybiBvKGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2KTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGFwcChvLCAvKiBhcnJheSAqL1tcbiAgICAgICAgICAgICAgICAgIGEwLFxuICAgICAgICAgICAgICAgICAgYTEsXG4gICAgICAgICAgICAgICAgICBhMixcbiAgICAgICAgICAgICAgICAgIGEzLFxuICAgICAgICAgICAgICAgICAgYTQsXG4gICAgICAgICAgICAgICAgICBhNSxcbiAgICAgICAgICAgICAgICAgIGE2XG4gICAgICAgICAgICAgICAgXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gXzcobywgYTAsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYpIHtcbiAgdmFyIGFyaXR5ID0gby5sZW5ndGg7XG4gIGlmIChhcml0eSA9PT0gNykge1xuICAgIHJldHVybiBvKGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY3VycnlfNyhvLCBhMCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYXJpdHkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9fNyhvKSB7XG4gIHZhciBhcml0eSA9IG8ubGVuZ3RoO1xuICBpZiAoYXJpdHkgPT09IDcpIHtcbiAgICByZXR1cm4gbztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKGZ1bmN0aW9uIChhMCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNikge1xuICAgICAgICByZXR1cm4gXzcobywgYTAsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYpO1xuICAgICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3VycnlfOChvLCBhMCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGFyaXR5KSB7XG4gIHN3aXRjaCAoYXJpdHkpIHtcbiAgICBjYXNlIDEgOiBcbiAgICAgICAgcmV0dXJuIGFwcChvKGEwKSwgLyogYXJyYXkgKi9bXG4gICAgICAgICAgICAgICAgICAgIGExLFxuICAgICAgICAgICAgICAgICAgICBhMixcbiAgICAgICAgICAgICAgICAgICAgYTMsXG4gICAgICAgICAgICAgICAgICAgIGE0LFxuICAgICAgICAgICAgICAgICAgICBhNSxcbiAgICAgICAgICAgICAgICAgICAgYTYsXG4gICAgICAgICAgICAgICAgICAgIGE3XG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICBjYXNlIDIgOiBcbiAgICAgICAgcmV0dXJuIGFwcChvKGEwLCBhMSksIC8qIGFycmF5ICovW1xuICAgICAgICAgICAgICAgICAgICBhMixcbiAgICAgICAgICAgICAgICAgICAgYTMsXG4gICAgICAgICAgICAgICAgICAgIGE0LFxuICAgICAgICAgICAgICAgICAgICBhNSxcbiAgICAgICAgICAgICAgICAgICAgYTYsXG4gICAgICAgICAgICAgICAgICAgIGE3XG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICBjYXNlIDMgOiBcbiAgICAgICAgcmV0dXJuIGFwcChvKGEwLCBhMSwgYTIpLCAvKiBhcnJheSAqL1tcbiAgICAgICAgICAgICAgICAgICAgYTMsXG4gICAgICAgICAgICAgICAgICAgIGE0LFxuICAgICAgICAgICAgICAgICAgICBhNSxcbiAgICAgICAgICAgICAgICAgICAgYTYsXG4gICAgICAgICAgICAgICAgICAgIGE3XG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICBjYXNlIDQgOiBcbiAgICAgICAgcmV0dXJuIGFwcChvKGEwLCBhMSwgYTIsIGEzKSwgLyogYXJyYXkgKi9bXG4gICAgICAgICAgICAgICAgICAgIGE0LFxuICAgICAgICAgICAgICAgICAgICBhNSxcbiAgICAgICAgICAgICAgICAgICAgYTYsXG4gICAgICAgICAgICAgICAgICAgIGE3XG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICBjYXNlIDUgOiBcbiAgICAgICAgcmV0dXJuIGFwcChvKGEwLCBhMSwgYTIsIGEzLCBhNCksIC8qIGFycmF5ICovW1xuICAgICAgICAgICAgICAgICAgICBhNSxcbiAgICAgICAgICAgICAgICAgICAgYTYsXG4gICAgICAgICAgICAgICAgICAgIGE3XG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICBjYXNlIDYgOiBcbiAgICAgICAgcmV0dXJuIGFwcChvKGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUpLCAvKiBhcnJheSAqL1tcbiAgICAgICAgICAgICAgICAgICAgYTYsXG4gICAgICAgICAgICAgICAgICAgIGE3XG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICBjYXNlIDcgOiBcbiAgICAgICAgcmV0dXJuIGFwcChvKGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2KSwgLyogYXJyYXkgKi9bYTddKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGFwcChvLCAvKiBhcnJheSAqL1tcbiAgICAgICAgICAgICAgICAgIGEwLFxuICAgICAgICAgICAgICAgICAgYTEsXG4gICAgICAgICAgICAgICAgICBhMixcbiAgICAgICAgICAgICAgICAgIGEzLFxuICAgICAgICAgICAgICAgICAgYTQsXG4gICAgICAgICAgICAgICAgICBhNSxcbiAgICAgICAgICAgICAgICAgIGE2LFxuICAgICAgICAgICAgICAgICAgYTdcbiAgICAgICAgICAgICAgICBdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfOChvLCBhMCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcpIHtcbiAgdmFyIGFyaXR5ID0gby5sZW5ndGg7XG4gIGlmIChhcml0eSA9PT0gOCkge1xuICAgIHJldHVybiBvKGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGN1cnJ5XzgobywgYTAsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhcml0eSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX184KG8pIHtcbiAgdmFyIGFyaXR5ID0gby5sZW5ndGg7XG4gIGlmIChhcml0eSA9PT0gOCkge1xuICAgIHJldHVybiBvO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAoZnVuY3Rpb24gKGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNykge1xuICAgICAgICByZXR1cm4gXzgobywgYTAsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KTtcbiAgICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydHMuYXBwID0gYXBwO1xuZXhwb3J0cy5jdXJyeV8xID0gY3VycnlfMTtcbmV4cG9ydHMuXzEgPSBfMTtcbmV4cG9ydHMuX18xID0gX18xO1xuZXhwb3J0cy5jdXJyeV8yID0gY3VycnlfMjtcbmV4cG9ydHMuXzIgPSBfMjtcbmV4cG9ydHMuX18yID0gX18yO1xuZXhwb3J0cy5jdXJyeV8zID0gY3VycnlfMztcbmV4cG9ydHMuXzMgPSBfMztcbmV4cG9ydHMuX18zID0gX18zO1xuZXhwb3J0cy5jdXJyeV80ID0gY3VycnlfNDtcbmV4cG9ydHMuXzQgPSBfNDtcbmV4cG9ydHMuX180ID0gX180O1xuZXhwb3J0cy5jdXJyeV81ID0gY3VycnlfNTtcbmV4cG9ydHMuXzUgPSBfNTtcbmV4cG9ydHMuX181ID0gX181O1xuZXhwb3J0cy5jdXJyeV82ID0gY3VycnlfNjtcbmV4cG9ydHMuXzYgPSBfNjtcbmV4cG9ydHMuX182ID0gX182O1xuZXhwb3J0cy5jdXJyeV83ID0gY3VycnlfNztcbmV4cG9ydHMuXzcgPSBfNztcbmV4cG9ydHMuX183ID0gX183O1xuZXhwb3J0cy5jdXJyeV84ID0gY3VycnlfODtcbmV4cG9ydHMuXzggPSBfODtcbmV4cG9ydHMuX184ID0gX184O1xuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEN1cnJ5ID0gcmVxdWlyZShcIi4vY3VycnkuanNcIik7XG52YXIgQ2FtbF9vYmogPSByZXF1aXJlKFwiLi9jYW1sX29iai5qc1wiKTtcbnZhciBQZXJ2YXNpdmVzID0gcmVxdWlyZShcIi4vcGVydmFzaXZlcy5qc1wiKTtcbnZhciBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucyA9IHJlcXVpcmUoXCIuL2NhbWxfYnVpbHRpbl9leGNlcHRpb25zLmpzXCIpO1xuXG5mdW5jdGlvbiBsZW5ndGgobCkge1xuICB2YXIgX2xlbiA9IDA7XG4gIHZhciBfcGFyYW0gPSBsO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHBhcmFtID0gX3BhcmFtO1xuICAgIHZhciBsZW4gPSBfbGVuO1xuICAgIGlmIChwYXJhbSkge1xuICAgICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgICBfbGVuID0gbGVuICsgMSB8IDA7XG4gICAgICBjb250aW51ZSA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBsZW47XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBoZChwYXJhbSkge1xuICBpZiAocGFyYW0pIHtcbiAgICByZXR1cm4gcGFyYW1bMF07XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmZhaWx1cmUsXG4gICAgICAgICAgXCJoZFwiXG4gICAgICAgIF07XG4gIH1cbn1cblxuZnVuY3Rpb24gdGwocGFyYW0pIHtcbiAgaWYgKHBhcmFtKSB7XG4gICAgcmV0dXJuIHBhcmFtWzFdO1xuICB9IGVsc2Uge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5mYWlsdXJlLFxuICAgICAgICAgIFwidGxcIlxuICAgICAgICBdO1xuICB9XG59XG5cbmZ1bmN0aW9uIG50aChsLCBuKSB7XG4gIGlmIChuIDwgMCkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiTGlzdC5udGhcIlxuICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHZhciBfbCA9IGw7XG4gICAgdmFyIF9uID0gbjtcbiAgICB3aGlsZSh0cnVlKSB7XG4gICAgICB2YXIgbiQxID0gX247XG4gICAgICB2YXIgbCQxID0gX2w7XG4gICAgICBpZiAobCQxKSB7XG4gICAgICAgIGlmIChuJDEgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gbCQxWzBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF9uID0gbiQxIC0gMSB8IDA7XG4gICAgICAgICAgX2wgPSBsJDFbMV07XG4gICAgICAgICAgY29udGludWUgO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBbXG4gICAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmZhaWx1cmUsXG4gICAgICAgICAgICAgIFwibnRoXCJcbiAgICAgICAgICAgIF07XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXZfYXBwZW5kKF9sMSwgX2wyKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbDIgPSBfbDI7XG4gICAgdmFyIGwxID0gX2wxO1xuICAgIGlmIChsMSkge1xuICAgICAgX2wyID0gLyogOjogKi9bXG4gICAgICAgIGwxWzBdLFxuICAgICAgICBsMlxuICAgICAgXTtcbiAgICAgIF9sMSA9IGwxWzFdO1xuICAgICAgY29udGludWUgO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbDI7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiByZXYobCkge1xuICByZXR1cm4gcmV2X2FwcGVuZChsLCAvKiBbXSAqLzApO1xufVxuXG5mdW5jdGlvbiBmbGF0dGVuKHBhcmFtKSB7XG4gIGlmIChwYXJhbSkge1xuICAgIHJldHVybiBQZXJ2YXNpdmVzLiRhdChwYXJhbVswXSwgZmxhdHRlbihwYXJhbVsxXSkpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBbXSAqLzA7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFwKGYsIHBhcmFtKSB7XG4gIGlmIChwYXJhbSkge1xuICAgIHZhciByID0gQ3VycnkuXzEoZiwgcGFyYW1bMF0pO1xuICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgIHIsXG4gICAgICAgICAgICBtYXAoZiwgcGFyYW1bMV0pXG4gICAgICAgICAgXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogW10gKi8wO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcGkoaSwgZiwgcGFyYW0pIHtcbiAgaWYgKHBhcmFtKSB7XG4gICAgdmFyIHIgPSBDdXJyeS5fMihmLCBpLCBwYXJhbVswXSk7XG4gICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgcixcbiAgICAgICAgICAgIG1hcGkoaSArIDEgfCAwLCBmLCBwYXJhbVsxXSlcbiAgICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBbXSAqLzA7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFwaSQxKGYsIGwpIHtcbiAgcmV0dXJuIG1hcGkoMCwgZiwgbCk7XG59XG5cbmZ1bmN0aW9uIHJldl9tYXAoZiwgbCkge1xuICB2YXIgX2FjY3UgPSAvKiBbXSAqLzA7XG4gIHZhciBfcGFyYW0gPSBsO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHBhcmFtID0gX3BhcmFtO1xuICAgIHZhciBhY2N1ID0gX2FjY3U7XG4gICAgaWYgKHBhcmFtKSB7XG4gICAgICBfcGFyYW0gPSBwYXJhbVsxXTtcbiAgICAgIF9hY2N1ID0gLyogOjogKi9bXG4gICAgICAgIEN1cnJ5Ll8xKGYsIHBhcmFtWzBdKSxcbiAgICAgICAgYWNjdVxuICAgICAgXTtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGFjY3U7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpdGVyKGYsIF9wYXJhbSkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHBhcmFtID0gX3BhcmFtO1xuICAgIGlmIChwYXJhbSkge1xuICAgICAgQ3VycnkuXzEoZiwgcGFyYW1bMF0pO1xuICAgICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgICBjb250aW51ZSA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiAoKSAqLzA7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpdGVyaShmLCBsKSB7XG4gIHZhciBfaSA9IDA7XG4gIHZhciBmJDEgPSBmO1xuICB2YXIgX3BhcmFtID0gbDtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICB2YXIgaSA9IF9pO1xuICAgIGlmIChwYXJhbSkge1xuICAgICAgQ3VycnkuXzIoZiQxLCBpLCBwYXJhbVswXSk7XG4gICAgICBfcGFyYW0gPSBwYXJhbVsxXTtcbiAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgY29udGludWUgO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZm9sZF9sZWZ0KGYsIF9hY2N1LCBfbCkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGwgPSBfbDtcbiAgICB2YXIgYWNjdSA9IF9hY2N1O1xuICAgIGlmIChsKSB7XG4gICAgICBfbCA9IGxbMV07XG4gICAgICBfYWNjdSA9IEN1cnJ5Ll8yKGYsIGFjY3UsIGxbMF0pO1xuICAgICAgY29udGludWUgO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYWNjdTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZvbGRfcmlnaHQoZiwgbCwgYWNjdSkge1xuICBpZiAobCkge1xuICAgIHJldHVybiBDdXJyeS5fMihmLCBsWzBdLCBmb2xkX3JpZ2h0KGYsIGxbMV0sIGFjY3UpKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYWNjdTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXAyKGYsIGwxLCBsMikge1xuICBpZiAobDEpIHtcbiAgICBpZiAobDIpIHtcbiAgICAgIHZhciByID0gQ3VycnkuXzIoZiwgbDFbMF0sIGwyWzBdKTtcbiAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgcixcbiAgICAgICAgICAgICAgbWFwMihmLCBsMVsxXSwgbDJbMV0pXG4gICAgICAgICAgICBdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBbXG4gICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgICAgXCJMaXN0Lm1hcDJcIlxuICAgICAgICAgIF07XG4gICAgfVxuICB9IGVsc2UgaWYgKGwyKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJMaXN0Lm1hcDJcIlxuICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBbXSAqLzA7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmV2X21hcDIoZiwgbDEsIGwyKSB7XG4gIHZhciBfYWNjdSA9IC8qIFtdICovMDtcbiAgdmFyIF9sMSA9IGwxO1xuICB2YXIgX2wyID0gbDI7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbDIkMSA9IF9sMjtcbiAgICB2YXIgbDEkMSA9IF9sMTtcbiAgICB2YXIgYWNjdSA9IF9hY2N1O1xuICAgIGlmIChsMSQxKSB7XG4gICAgICBpZiAobDIkMSkge1xuICAgICAgICBfbDIgPSBsMiQxWzFdO1xuICAgICAgICBfbDEgPSBsMSQxWzFdO1xuICAgICAgICBfYWNjdSA9IC8qIDo6ICovW1xuICAgICAgICAgIEN1cnJ5Ll8yKGYsIGwxJDFbMF0sIGwyJDFbMF0pLFxuICAgICAgICAgIGFjY3VcbiAgICAgICAgXTtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgICAgICBcIkxpc3QucmV2X21hcDJcIlxuICAgICAgICAgICAgXTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGwyJDEpIHtcbiAgICAgIHRocm93IFtcbiAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgICBcIkxpc3QucmV2X21hcDJcIlxuICAgICAgICAgIF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBhY2N1O1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaXRlcjIoZiwgX2wxLCBfbDIpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBsMiA9IF9sMjtcbiAgICB2YXIgbDEgPSBfbDE7XG4gICAgaWYgKGwxKSB7XG4gICAgICBpZiAobDIpIHtcbiAgICAgICAgQ3VycnkuXzIoZiwgbDFbMF0sIGwyWzBdKTtcbiAgICAgICAgX2wyID0gbDJbMV07XG4gICAgICAgIF9sMSA9IGwxWzFdO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBbXG4gICAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgICAgIFwiTGlzdC5pdGVyMlwiXG4gICAgICAgICAgICBdO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobDIpIHtcbiAgICAgIHRocm93IFtcbiAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgICBcIkxpc3QuaXRlcjJcIlxuICAgICAgICAgIF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiAoKSAqLzA7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBmb2xkX2xlZnQyKGYsIF9hY2N1LCBfbDEsIF9sMikge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGwyID0gX2wyO1xuICAgIHZhciBsMSA9IF9sMTtcbiAgICB2YXIgYWNjdSA9IF9hY2N1O1xuICAgIGlmIChsMSkge1xuICAgICAgaWYgKGwyKSB7XG4gICAgICAgIF9sMiA9IGwyWzFdO1xuICAgICAgICBfbDEgPSBsMVsxXTtcbiAgICAgICAgX2FjY3UgPSBDdXJyeS5fMyhmLCBhY2N1LCBsMVswXSwgbDJbMF0pO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBbXG4gICAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgICAgIFwiTGlzdC5mb2xkX2xlZnQyXCJcbiAgICAgICAgICAgIF07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChsMikge1xuICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICAgIFwiTGlzdC5mb2xkX2xlZnQyXCJcbiAgICAgICAgICBdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYWNjdTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZvbGRfcmlnaHQyKGYsIGwxLCBsMiwgYWNjdSkge1xuICBpZiAobDEpIHtcbiAgICBpZiAobDIpIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMyhmLCBsMVswXSwgbDJbMF0sIGZvbGRfcmlnaHQyKGYsIGwxWzFdLCBsMlsxXSwgYWNjdSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBbXG4gICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgICAgXCJMaXN0LmZvbGRfcmlnaHQyXCJcbiAgICAgICAgICBdO1xuICAgIH1cbiAgfSBlbHNlIGlmIChsMikge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiTGlzdC5mb2xkX3JpZ2h0MlwiXG4gICAgICAgIF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGFjY3U7XG4gIH1cbn1cblxuZnVuY3Rpb24gZm9yX2FsbChwLCBfcGFyYW0pIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICBpZiAocGFyYW0pIHtcbiAgICAgIGlmIChDdXJyeS5fMShwLCBwYXJhbVswXSkpIHtcbiAgICAgICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBleGlzdHMocCwgX3BhcmFtKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcGFyYW0gPSBfcGFyYW07XG4gICAgaWYgKHBhcmFtKSB7XG4gICAgICBpZiAoQ3VycnkuXzEocCwgcGFyYW1bMF0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZm9yX2FsbDIocCwgX2wxLCBfbDIpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBsMiA9IF9sMjtcbiAgICB2YXIgbDEgPSBfbDE7XG4gICAgaWYgKGwxKSB7XG4gICAgICBpZiAobDIpIHtcbiAgICAgICAgaWYgKEN1cnJ5Ll8yKHAsIGwxWzBdLCBsMlswXSkpIHtcbiAgICAgICAgICBfbDIgPSBsMlsxXTtcbiAgICAgICAgICBfbDEgPSBsMVsxXTtcbiAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBbXG4gICAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgICAgIFwiTGlzdC5mb3JfYWxsMlwiXG4gICAgICAgICAgICBdO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobDIpIHtcbiAgICAgIHRocm93IFtcbiAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgICBcIkxpc3QuZm9yX2FsbDJcIlxuICAgICAgICAgIF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZXhpc3RzMihwLCBfbDEsIF9sMikge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGwyID0gX2wyO1xuICAgIHZhciBsMSA9IF9sMTtcbiAgICBpZiAobDEpIHtcbiAgICAgIGlmIChsMikge1xuICAgICAgICBpZiAoQ3VycnkuXzIocCwgbDFbMF0sIGwyWzBdKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF9sMiA9IGwyWzFdO1xuICAgICAgICAgIF9sMSA9IGwxWzFdO1xuICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgICAgICBcIkxpc3QuZXhpc3RzMlwiXG4gICAgICAgICAgICBdO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobDIpIHtcbiAgICAgIHRocm93IFtcbiAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgICBcIkxpc3QuZXhpc3RzMlwiXG4gICAgICAgICAgXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gbWVtKHgsIF9wYXJhbSkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHBhcmFtID0gX3BhcmFtO1xuICAgIGlmIChwYXJhbSkge1xuICAgICAgaWYgKENhbWxfb2JqLmNhbWxfZXF1YWwocGFyYW1bMF0sIHgpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gbWVtcSh4LCBfcGFyYW0pIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICBpZiAocGFyYW0pIHtcbiAgICAgIGlmIChwYXJhbVswXSA9PT0geCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9wYXJhbSA9IHBhcmFtWzFdO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFzc29jKHgsIF9wYXJhbSkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHBhcmFtID0gX3BhcmFtO1xuICAgIGlmIChwYXJhbSkge1xuICAgICAgdmFyIG1hdGNoID0gcGFyYW1bMF07XG4gICAgICBpZiAoQ2FtbF9vYmouY2FtbF9lcXVhbChtYXRjaFswXSwgeCkpIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoWzFdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMubm90X2ZvdW5kO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gYXNzcSh4LCBfcGFyYW0pIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICBpZiAocGFyYW0pIHtcbiAgICAgIHZhciBtYXRjaCA9IHBhcmFtWzBdO1xuICAgICAgaWYgKG1hdGNoWzBdID09PSB4KSB7XG4gICAgICAgIHJldHVybiBtYXRjaFsxXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9wYXJhbSA9IHBhcmFtWzFdO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLm5vdF9mb3VuZDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1lbV9hc3NvYyh4LCBfcGFyYW0pIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICBpZiAocGFyYW0pIHtcbiAgICAgIGlmIChDYW1sX29iai5jYW1sX2VxdWFsKHBhcmFtWzBdWzBdLCB4KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9wYXJhbSA9IHBhcmFtWzFdO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1lbV9hc3NxKHgsIF9wYXJhbSkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHBhcmFtID0gX3BhcmFtO1xuICAgIGlmIChwYXJhbSkge1xuICAgICAgaWYgKHBhcmFtWzBdWzBdID09PSB4KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlX2Fzc29jKHgsIHBhcmFtKSB7XG4gIGlmIChwYXJhbSkge1xuICAgIHZhciBsID0gcGFyYW1bMV07XG4gICAgdmFyIHBhaXIgPSBwYXJhbVswXTtcbiAgICBpZiAoQ2FtbF9vYmouY2FtbF9lcXVhbChwYWlyWzBdLCB4KSkge1xuICAgICAgcmV0dXJuIGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgcGFpcixcbiAgICAgICAgICAgICAgcmVtb3ZlX2Fzc29jKHgsIGwpXG4gICAgICAgICAgICBdO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogW10gKi8wO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZV9hc3NxKHgsIHBhcmFtKSB7XG4gIGlmIChwYXJhbSkge1xuICAgIHZhciBsID0gcGFyYW1bMV07XG4gICAgdmFyIHBhaXIgPSBwYXJhbVswXTtcbiAgICBpZiAocGFpclswXSA9PT0geCkge1xuICAgICAgcmV0dXJuIGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgcGFpcixcbiAgICAgICAgICAgICAgcmVtb3ZlX2Fzc3EoeCwgbClcbiAgICAgICAgICAgIF07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBbXSAqLzA7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluZChwLCBfcGFyYW0pIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICBpZiAocGFyYW0pIHtcbiAgICAgIHZhciB4ID0gcGFyYW1bMF07XG4gICAgICBpZiAoQ3VycnkuXzEocCwgeCkpIHtcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfcGFyYW0gPSBwYXJhbVsxXTtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5ub3RfZm91bmQ7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBmaW5kX2FsbChwKSB7XG4gIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICB2YXIgX2FjY3UgPSAvKiBbXSAqLzA7XG4gICAgICB2YXIgX3BhcmFtID0gcGFyYW07XG4gICAgICB3aGlsZSh0cnVlKSB7XG4gICAgICAgIHZhciBwYXJhbSQxID0gX3BhcmFtO1xuICAgICAgICB2YXIgYWNjdSA9IF9hY2N1O1xuICAgICAgICBpZiAocGFyYW0kMSkge1xuICAgICAgICAgIHZhciBsID0gcGFyYW0kMVsxXTtcbiAgICAgICAgICB2YXIgeCA9IHBhcmFtJDFbMF07XG4gICAgICAgICAgaWYgKEN1cnJ5Ll8xKHAsIHgpKSB7XG4gICAgICAgICAgICBfcGFyYW0gPSBsO1xuICAgICAgICAgICAgX2FjY3UgPSAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgeCxcbiAgICAgICAgICAgICAgYWNjdVxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3BhcmFtID0gbDtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHJldl9hcHBlbmQoYWNjdSwgLyogW10gKi8wKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gcGFydGl0aW9uKHAsIGwpIHtcbiAgdmFyIF95ZXMgPSAvKiBbXSAqLzA7XG4gIHZhciBfbm8gPSAvKiBbXSAqLzA7XG4gIHZhciBfcGFyYW0gPSBsO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHBhcmFtID0gX3BhcmFtO1xuICAgIHZhciBubyA9IF9ubztcbiAgICB2YXIgeWVzID0gX3llcztcbiAgICBpZiAocGFyYW0pIHtcbiAgICAgIHZhciBsJDEgPSBwYXJhbVsxXTtcbiAgICAgIHZhciB4ID0gcGFyYW1bMF07XG4gICAgICBpZiAoQ3VycnkuXzEocCwgeCkpIHtcbiAgICAgICAgX3BhcmFtID0gbCQxO1xuICAgICAgICBfeWVzID0gLyogOjogKi9bXG4gICAgICAgICAgeCxcbiAgICAgICAgICB5ZXNcbiAgICAgICAgXTtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3BhcmFtID0gbCQxO1xuICAgICAgICBfbm8gPSAvKiA6OiAqL1tcbiAgICAgICAgICB4LFxuICAgICAgICAgIG5vXG4gICAgICAgIF07XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICByZXZfYXBwZW5kKHllcywgLyogW10gKi8wKSxcbiAgICAgICAgICAgICAgcmV2X2FwcGVuZChubywgLyogW10gKi8wKVxuICAgICAgICAgICAgXTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHNwbGl0KHBhcmFtKSB7XG4gIGlmIChwYXJhbSkge1xuICAgIHZhciBtYXRjaCA9IHBhcmFtWzBdO1xuICAgIHZhciBtYXRjaCQxID0gc3BsaXQocGFyYW1bMV0pO1xuICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICBtYXRjaFswXSxcbiAgICAgICAgICAgICAgbWF0Y2gkMVswXVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICBtYXRjaFsxXSxcbiAgICAgICAgICAgICAgbWF0Y2gkMVsxXVxuICAgICAgICAgICAgXVxuICAgICAgICAgIF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgLyogW10gKi8wLFxuICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb21iaW5lKGwxLCBsMikge1xuICBpZiAobDEpIHtcbiAgICBpZiAobDIpIHtcbiAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgbDFbMF0sXG4gICAgICAgICAgICAgICAgbDJbMF1cbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgY29tYmluZShsMVsxXSwgbDJbMV0pXG4gICAgICAgICAgICBdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBbXG4gICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgICAgXCJMaXN0LmNvbWJpbmVcIlxuICAgICAgICAgIF07XG4gICAgfVxuICB9IGVsc2UgaWYgKGwyKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJMaXN0LmNvbWJpbmVcIlxuICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBbXSAqLzA7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWVyZ2UoY21wLCBsMSwgbDIpIHtcbiAgaWYgKGwxKSB7XG4gICAgaWYgKGwyKSB7XG4gICAgICB2YXIgaDIgPSBsMlswXTtcbiAgICAgIHZhciBoMSA9IGwxWzBdO1xuICAgICAgaWYgKEN1cnJ5Ll8yKGNtcCwgaDEsIGgyKSA8PSAwKSB7XG4gICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICBoMSxcbiAgICAgICAgICAgICAgICBtZXJnZShjbXAsIGwxWzFdLCBsMilcbiAgICAgICAgICAgICAgXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICBoMixcbiAgICAgICAgICAgICAgICBtZXJnZShjbXAsIGwxLCBsMlsxXSlcbiAgICAgICAgICAgICAgXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGwxO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbDI7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hvcChfaywgX2wpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBsID0gX2w7XG4gICAgdmFyIGsgPSBfaztcbiAgICBpZiAoayA9PT0gMCkge1xuICAgICAgcmV0dXJuIGw7XG4gICAgfSBlbHNlIGlmIChsKSB7XG4gICAgICBfbCA9IGxbMV07XG4gICAgICBfayA9IGsgLSAxIHwgMDtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuYXNzZXJ0X2ZhaWx1cmUsXG4gICAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgXCJsaXN0Lm1sXCIsXG4gICAgICAgICAgICAgIDIyMyxcbiAgICAgICAgICAgICAgMTFcbiAgICAgICAgICAgIF1cbiAgICAgICAgICBdO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gc3RhYmxlX3NvcnQoY21wLCBsKSB7XG4gIHZhciBzb3J0ID0gZnVuY3Rpb24gKG4sIGwpIHtcbiAgICB2YXIgZXhpdCA9IDA7XG4gICAgaWYgKG4gIT09IDIpIHtcbiAgICAgIGlmIChuICE9PSAzIHx8ICFsKSB7XG4gICAgICAgIGV4aXQgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG1hdGNoID0gbFsxXTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgdmFyIG1hdGNoJDEgPSBtYXRjaFsxXTtcbiAgICAgICAgICBpZiAobWF0Y2gkMSkge1xuICAgICAgICAgICAgdmFyIHgzID0gbWF0Y2gkMVswXTtcbiAgICAgICAgICAgIHZhciB4MiA9IG1hdGNoWzBdO1xuICAgICAgICAgICAgdmFyIHgxID0gbFswXTtcbiAgICAgICAgICAgIGlmIChDdXJyeS5fMihjbXAsIHgxLCB4MikgPD0gMCkge1xuICAgICAgICAgICAgICBpZiAoQ3VycnkuXzIoY21wLCB4MiwgeDMpIDw9IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKEN1cnJ5Ll8yKGNtcCwgeDEsIHgzKSA8PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKEN1cnJ5Ll8yKGNtcCwgeDEsIHgzKSA8PSAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKEN1cnJ5Ll8yKGNtcCwgeDIsIHgzKSA8PSAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGwpIHtcbiAgICAgIHZhciBtYXRjaCQyID0gbFsxXTtcbiAgICAgIGlmIChtYXRjaCQyKSB7XG4gICAgICAgIHZhciB4MiQxID0gbWF0Y2gkMlswXTtcbiAgICAgICAgdmFyIHgxJDEgPSBsWzBdO1xuICAgICAgICBpZiAoQ3VycnkuXzIoY21wLCB4MSQxLCB4MiQxKSA8PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgeDEkMSxcbiAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICB4MiQxLFxuICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgIHgyJDEsXG4gICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgeDEkMSxcbiAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXhpdCA9IDE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4aXQgPSAxO1xuICAgIH1cbiAgICBpZiAoZXhpdCA9PT0gMSkge1xuICAgICAgdmFyIG4xID0gKG4gPj4gMSk7XG4gICAgICB2YXIgbjIgPSBuIC0gbjEgfCAwO1xuICAgICAgdmFyIGwyID0gY2hvcChuMSwgbCk7XG4gICAgICB2YXIgczEgPSByZXZfc29ydChuMSwgbCk7XG4gICAgICB2YXIgczIgPSByZXZfc29ydChuMiwgbDIpO1xuICAgICAgdmFyIF9sMSA9IHMxO1xuICAgICAgdmFyIF9sMiA9IHMyO1xuICAgICAgdmFyIF9hY2N1ID0gLyogW10gKi8wO1xuICAgICAgd2hpbGUodHJ1ZSkge1xuICAgICAgICB2YXIgYWNjdSA9IF9hY2N1O1xuICAgICAgICB2YXIgbDIkMSA9IF9sMjtcbiAgICAgICAgdmFyIGwxID0gX2wxO1xuICAgICAgICBpZiAobDEpIHtcbiAgICAgICAgICBpZiAobDIkMSkge1xuICAgICAgICAgICAgdmFyIGgyID0gbDIkMVswXTtcbiAgICAgICAgICAgIHZhciBoMSA9IGwxWzBdO1xuICAgICAgICAgICAgaWYgKEN1cnJ5Ll8yKGNtcCwgaDEsIGgyKSA+IDApIHtcbiAgICAgICAgICAgICAgX2FjY3UgPSAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICBoMSxcbiAgICAgICAgICAgICAgICBhY2N1XG4gICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIF9sMSA9IGwxWzFdO1xuICAgICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBfYWNjdSA9IC8qIDo6ICovW1xuICAgICAgICAgICAgICAgIGgyLFxuICAgICAgICAgICAgICAgIGFjY3VcbiAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgX2wyID0gbDIkMVsxXTtcbiAgICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcmV2X2FwcGVuZChsMSwgYWNjdSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiByZXZfYXBwZW5kKGwyJDEsIGFjY3UpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgICBcbiAgfTtcbiAgdmFyIHJldl9zb3J0ID0gZnVuY3Rpb24gKG4sIGwpIHtcbiAgICB2YXIgZXhpdCA9IDA7XG4gICAgaWYgKG4gIT09IDIpIHtcbiAgICAgIGlmIChuICE9PSAzIHx8ICFsKSB7XG4gICAgICAgIGV4aXQgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG1hdGNoID0gbFsxXTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgdmFyIG1hdGNoJDEgPSBtYXRjaFsxXTtcbiAgICAgICAgICBpZiAobWF0Y2gkMSkge1xuICAgICAgICAgICAgdmFyIHgzID0gbWF0Y2gkMVswXTtcbiAgICAgICAgICAgIHZhciB4MiA9IG1hdGNoWzBdO1xuICAgICAgICAgICAgdmFyIHgxID0gbFswXTtcbiAgICAgICAgICAgIGlmIChDdXJyeS5fMihjbXAsIHgxLCB4MikgPiAwKSB7XG4gICAgICAgICAgICAgIGlmIChDdXJyeS5fMihjbXAsIHgyLCB4MykgPiAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChDdXJyeS5fMihjbXAsIHgxLCB4MykgPiAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKEN1cnJ5Ll8yKGNtcCwgeDEsIHgzKSA+IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoQ3VycnkuXzIoY21wLCB4MiwgeDMpID4gMCkge1xuICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGV4aXQgPSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChsKSB7XG4gICAgICB2YXIgbWF0Y2gkMiA9IGxbMV07XG4gICAgICBpZiAobWF0Y2gkMikge1xuICAgICAgICB2YXIgeDIkMSA9IG1hdGNoJDJbMF07XG4gICAgICAgIHZhciB4MSQxID0gbFswXTtcbiAgICAgICAgaWYgKEN1cnJ5Ll8yKGNtcCwgeDEkMSwgeDIkMSkgPiAwKSB7XG4gICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgeDEkMSxcbiAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICB4MiQxLFxuICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgIHgyJDEsXG4gICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgeDEkMSxcbiAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXhpdCA9IDE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4aXQgPSAxO1xuICAgIH1cbiAgICBpZiAoZXhpdCA9PT0gMSkge1xuICAgICAgdmFyIG4xID0gKG4gPj4gMSk7XG4gICAgICB2YXIgbjIgPSBuIC0gbjEgfCAwO1xuICAgICAgdmFyIGwyID0gY2hvcChuMSwgbCk7XG4gICAgICB2YXIgczEgPSBzb3J0KG4xLCBsKTtcbiAgICAgIHZhciBzMiA9IHNvcnQobjIsIGwyKTtcbiAgICAgIHZhciBfbDEgPSBzMTtcbiAgICAgIHZhciBfbDIgPSBzMjtcbiAgICAgIHZhciBfYWNjdSA9IC8qIFtdICovMDtcbiAgICAgIHdoaWxlKHRydWUpIHtcbiAgICAgICAgdmFyIGFjY3UgPSBfYWNjdTtcbiAgICAgICAgdmFyIGwyJDEgPSBfbDI7XG4gICAgICAgIHZhciBsMSA9IF9sMTtcbiAgICAgICAgaWYgKGwxKSB7XG4gICAgICAgICAgaWYgKGwyJDEpIHtcbiAgICAgICAgICAgIHZhciBoMiA9IGwyJDFbMF07XG4gICAgICAgICAgICB2YXIgaDEgPSBsMVswXTtcbiAgICAgICAgICAgIGlmIChDdXJyeS5fMihjbXAsIGgxLCBoMikgPD0gMCkge1xuICAgICAgICAgICAgICBfYWNjdSA9IC8qIDo6ICovW1xuICAgICAgICAgICAgICAgIGgxLFxuICAgICAgICAgICAgICAgIGFjY3VcbiAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgX2wxID0gbDFbMV07XG4gICAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIF9hY2N1ID0gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgaDIsXG4gICAgICAgICAgICAgICAgYWNjdVxuICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICBfbDIgPSBsMiQxWzFdO1xuICAgICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiByZXZfYXBwZW5kKGwxLCBhY2N1KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHJldl9hcHBlbmQobDIkMSwgYWNjdSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICAgIFxuICB9O1xuICB2YXIgbGVuID0gbGVuZ3RoKGwpO1xuICBpZiAobGVuIDwgMikge1xuICAgIHJldHVybiBsO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzb3J0KGxlbiwgbCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc29ydF91bmlxKGNtcCwgbCkge1xuICB2YXIgc29ydCA9IGZ1bmN0aW9uIChuLCBsKSB7XG4gICAgdmFyIGV4aXQgPSAwO1xuICAgIGlmIChuICE9PSAyKSB7XG4gICAgICBpZiAobiAhPT0gMyB8fCAhbCkge1xuICAgICAgICBleGl0ID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBtYXRjaCA9IGxbMV07XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgIHZhciBtYXRjaCQxID0gbWF0Y2hbMV07XG4gICAgICAgICAgaWYgKG1hdGNoJDEpIHtcbiAgICAgICAgICAgIHZhciB4MyA9IG1hdGNoJDFbMF07XG4gICAgICAgICAgICB2YXIgeDIgPSBtYXRjaFswXTtcbiAgICAgICAgICAgIHZhciB4MSA9IGxbMF07XG4gICAgICAgICAgICB2YXIgYyA9IEN1cnJ5Ll8yKGNtcCwgeDEsIHgyKTtcbiAgICAgICAgICAgIGlmIChjID09PSAwKSB7XG4gICAgICAgICAgICAgIHZhciBjJDEgPSBDdXJyeS5fMihjbXAsIHgyLCB4Myk7XG4gICAgICAgICAgICAgIGlmIChjJDEgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoYyQxIDwgMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGMgPCAwKSB7XG4gICAgICAgICAgICAgIHZhciBjJDIgPSBDdXJyeS5fMihjbXAsIHgyLCB4Myk7XG4gICAgICAgICAgICAgIGlmIChjJDIgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChjJDIgPCAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgYyQzID0gQ3VycnkuXzIoY21wLCB4MSwgeDMpO1xuICAgICAgICAgICAgICAgIGlmIChjJDMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYyQzIDwgMCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhciBjJDQgPSBDdXJyeS5fMihjbXAsIHgxLCB4Myk7XG4gICAgICAgICAgICAgIGlmIChjJDQgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChjJDQgPCAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgYyQ1ID0gQ3VycnkuXzIoY21wLCB4MiwgeDMpO1xuICAgICAgICAgICAgICAgIGlmIChjJDUgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYyQ1IDwgMCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGV4aXQgPSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChsKSB7XG4gICAgICB2YXIgbWF0Y2gkMiA9IGxbMV07XG4gICAgICBpZiAobWF0Y2gkMikge1xuICAgICAgICB2YXIgeDIkMSA9IG1hdGNoJDJbMF07XG4gICAgICAgIHZhciB4MSQxID0gbFswXTtcbiAgICAgICAgdmFyIGMkNiA9IEN1cnJ5Ll8yKGNtcCwgeDEkMSwgeDIkMSk7XG4gICAgICAgIGlmIChjJDYgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICB4MSQxLFxuICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgfSBlbHNlIGlmIChjJDYgPCAwKSB7XG4gICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgeDEkMSxcbiAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICB4MiQxLFxuICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgIHgyJDEsXG4gICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgeDEkMSxcbiAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXhpdCA9IDE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4aXQgPSAxO1xuICAgIH1cbiAgICBpZiAoZXhpdCA9PT0gMSkge1xuICAgICAgdmFyIG4xID0gKG4gPj4gMSk7XG4gICAgICB2YXIgbjIgPSBuIC0gbjEgfCAwO1xuICAgICAgdmFyIGwyID0gY2hvcChuMSwgbCk7XG4gICAgICB2YXIgczEgPSByZXZfc29ydChuMSwgbCk7XG4gICAgICB2YXIgczIgPSByZXZfc29ydChuMiwgbDIpO1xuICAgICAgdmFyIF9sMSA9IHMxO1xuICAgICAgdmFyIF9sMiA9IHMyO1xuICAgICAgdmFyIF9hY2N1ID0gLyogW10gKi8wO1xuICAgICAgd2hpbGUodHJ1ZSkge1xuICAgICAgICB2YXIgYWNjdSA9IF9hY2N1O1xuICAgICAgICB2YXIgbDIkMSA9IF9sMjtcbiAgICAgICAgdmFyIGwxID0gX2wxO1xuICAgICAgICBpZiAobDEpIHtcbiAgICAgICAgICBpZiAobDIkMSkge1xuICAgICAgICAgICAgdmFyIHQyID0gbDIkMVsxXTtcbiAgICAgICAgICAgIHZhciBoMiA9IGwyJDFbMF07XG4gICAgICAgICAgICB2YXIgdDEgPSBsMVsxXTtcbiAgICAgICAgICAgIHZhciBoMSA9IGwxWzBdO1xuICAgICAgICAgICAgdmFyIGMkNyA9IEN1cnJ5Ll8yKGNtcCwgaDEsIGgyKTtcbiAgICAgICAgICAgIGlmIChjJDcgPT09IDApIHtcbiAgICAgICAgICAgICAgX2FjY3UgPSAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICBoMSxcbiAgICAgICAgICAgICAgICBhY2N1XG4gICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIF9sMiA9IHQyO1xuICAgICAgICAgICAgICBfbDEgPSB0MTtcbiAgICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjJDcgPiAwKSB7XG4gICAgICAgICAgICAgIF9hY2N1ID0gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgaDEsXG4gICAgICAgICAgICAgICAgYWNjdVxuICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICBfbDEgPSB0MTtcbiAgICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgX2FjY3UgPSAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICBoMixcbiAgICAgICAgICAgICAgICBhY2N1XG4gICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIF9sMiA9IHQyO1xuICAgICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiByZXZfYXBwZW5kKGwxLCBhY2N1KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHJldl9hcHBlbmQobDIkMSwgYWNjdSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICAgIFxuICB9O1xuICB2YXIgcmV2X3NvcnQgPSBmdW5jdGlvbiAobiwgbCkge1xuICAgIHZhciBleGl0ID0gMDtcbiAgICBpZiAobiAhPT0gMikge1xuICAgICAgaWYgKG4gIT09IDMgfHwgIWwpIHtcbiAgICAgICAgZXhpdCA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbWF0Y2ggPSBsWzFdO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICB2YXIgbWF0Y2gkMSA9IG1hdGNoWzFdO1xuICAgICAgICAgIGlmIChtYXRjaCQxKSB7XG4gICAgICAgICAgICB2YXIgeDMgPSBtYXRjaCQxWzBdO1xuICAgICAgICAgICAgdmFyIHgyID0gbWF0Y2hbMF07XG4gICAgICAgICAgICB2YXIgeDEgPSBsWzBdO1xuICAgICAgICAgICAgdmFyIGMgPSBDdXJyeS5fMihjbXAsIHgxLCB4Mik7XG4gICAgICAgICAgICBpZiAoYyA9PT0gMCkge1xuICAgICAgICAgICAgICB2YXIgYyQxID0gQ3VycnkuXzIoY21wLCB4MiwgeDMpO1xuICAgICAgICAgICAgICBpZiAoYyQxID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGMkMSA+IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChjID4gMCkge1xuICAgICAgICAgICAgICB2YXIgYyQyID0gQ3VycnkuXzIoY21wLCB4MiwgeDMpO1xuICAgICAgICAgICAgICBpZiAoYyQyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoYyQyID4gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGMkMyA9IEN1cnJ5Ll8yKGNtcCwgeDEsIHgzKTtcbiAgICAgICAgICAgICAgICBpZiAoYyQzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGMkMyA+IDApIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgYyQ0ID0gQ3VycnkuXzIoY21wLCB4MSwgeDMpO1xuICAgICAgICAgICAgICBpZiAoYyQ0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoYyQ0ID4gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGMkNSA9IEN1cnJ5Ll8yKGNtcCwgeDIsIHgzKTtcbiAgICAgICAgICAgICAgICBpZiAoYyQ1ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGMkNSA+IDApIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGV4aXQgPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobCkge1xuICAgICAgdmFyIG1hdGNoJDIgPSBsWzFdO1xuICAgICAgaWYgKG1hdGNoJDIpIHtcbiAgICAgICAgdmFyIHgyJDEgPSBtYXRjaCQyWzBdO1xuICAgICAgICB2YXIgeDEkMSA9IGxbMF07XG4gICAgICAgIHZhciBjJDYgPSBDdXJyeS5fMihjbXAsIHgxJDEsIHgyJDEpO1xuICAgICAgICBpZiAoYyQ2ID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgeDEkMSxcbiAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgIH0gZWxzZSBpZiAoYyQ2ID4gMCkge1xuICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgIHgxJDEsXG4gICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgeDIkMSxcbiAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICB4MiQxLFxuICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgIHgxJDEsXG4gICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGV4aXQgPSAxO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBleGl0ID0gMTtcbiAgICB9XG4gICAgaWYgKGV4aXQgPT09IDEpIHtcbiAgICAgIHZhciBuMSA9IChuID4+IDEpO1xuICAgICAgdmFyIG4yID0gbiAtIG4xIHwgMDtcbiAgICAgIHZhciBsMiA9IGNob3AobjEsIGwpO1xuICAgICAgdmFyIHMxID0gc29ydChuMSwgbCk7XG4gICAgICB2YXIgczIgPSBzb3J0KG4yLCBsMik7XG4gICAgICB2YXIgX2wxID0gczE7XG4gICAgICB2YXIgX2wyID0gczI7XG4gICAgICB2YXIgX2FjY3UgPSAvKiBbXSAqLzA7XG4gICAgICB3aGlsZSh0cnVlKSB7XG4gICAgICAgIHZhciBhY2N1ID0gX2FjY3U7XG4gICAgICAgIHZhciBsMiQxID0gX2wyO1xuICAgICAgICB2YXIgbDEgPSBfbDE7XG4gICAgICAgIGlmIChsMSkge1xuICAgICAgICAgIGlmIChsMiQxKSB7XG4gICAgICAgICAgICB2YXIgdDIgPSBsMiQxWzFdO1xuICAgICAgICAgICAgdmFyIGgyID0gbDIkMVswXTtcbiAgICAgICAgICAgIHZhciB0MSA9IGwxWzFdO1xuICAgICAgICAgICAgdmFyIGgxID0gbDFbMF07XG4gICAgICAgICAgICB2YXIgYyQ3ID0gQ3VycnkuXzIoY21wLCBoMSwgaDIpO1xuICAgICAgICAgICAgaWYgKGMkNyA9PT0gMCkge1xuICAgICAgICAgICAgICBfYWNjdSA9IC8qIDo6ICovW1xuICAgICAgICAgICAgICAgIGgxLFxuICAgICAgICAgICAgICAgIGFjY3VcbiAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgX2wyID0gdDI7XG4gICAgICAgICAgICAgIF9sMSA9IHQxO1xuICAgICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGMkNyA8IDApIHtcbiAgICAgICAgICAgICAgX2FjY3UgPSAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICBoMSxcbiAgICAgICAgICAgICAgICBhY2N1XG4gICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIF9sMSA9IHQxO1xuICAgICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBfYWNjdSA9IC8qIDo6ICovW1xuICAgICAgICAgICAgICAgIGgyLFxuICAgICAgICAgICAgICAgIGFjY3VcbiAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgX2wyID0gdDI7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHJldl9hcHBlbmQobDEsIGFjY3UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gcmV2X2FwcGVuZChsMiQxLCBhY2N1KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgXG4gIH07XG4gIHZhciBsZW4gPSBsZW5ndGgobCk7XG4gIGlmIChsZW4gPCAyKSB7XG4gICAgcmV0dXJuIGw7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHNvcnQobGVuLCBsKTtcbiAgfVxufVxuXG52YXIgYXBwZW5kID0gUGVydmFzaXZlcy4kYXQ7XG5cbnZhciBjb25jYXQgPSBmbGF0dGVuO1xuXG52YXIgZmlsdGVyID0gZmluZF9hbGw7XG5cbnZhciBzb3J0ID0gc3RhYmxlX3NvcnQ7XG5cbnZhciBmYXN0X3NvcnQgPSBzdGFibGVfc29ydDtcblxuZXhwb3J0cy5sZW5ndGggPSBsZW5ndGg7XG5leHBvcnRzLmhkID0gaGQ7XG5leHBvcnRzLnRsID0gdGw7XG5leHBvcnRzLm50aCA9IG50aDtcbmV4cG9ydHMucmV2ID0gcmV2O1xuZXhwb3J0cy5hcHBlbmQgPSBhcHBlbmQ7XG5leHBvcnRzLnJldl9hcHBlbmQgPSByZXZfYXBwZW5kO1xuZXhwb3J0cy5jb25jYXQgPSBjb25jYXQ7XG5leHBvcnRzLmZsYXR0ZW4gPSBmbGF0dGVuO1xuZXhwb3J0cy5pdGVyID0gaXRlcjtcbmV4cG9ydHMuaXRlcmkgPSBpdGVyaTtcbmV4cG9ydHMubWFwID0gbWFwO1xuZXhwb3J0cy5tYXBpID0gbWFwaSQxO1xuZXhwb3J0cy5yZXZfbWFwID0gcmV2X21hcDtcbmV4cG9ydHMuZm9sZF9sZWZ0ID0gZm9sZF9sZWZ0O1xuZXhwb3J0cy5mb2xkX3JpZ2h0ID0gZm9sZF9yaWdodDtcbmV4cG9ydHMuaXRlcjIgPSBpdGVyMjtcbmV4cG9ydHMubWFwMiA9IG1hcDI7XG5leHBvcnRzLnJldl9tYXAyID0gcmV2X21hcDI7XG5leHBvcnRzLmZvbGRfbGVmdDIgPSBmb2xkX2xlZnQyO1xuZXhwb3J0cy5mb2xkX3JpZ2h0MiA9IGZvbGRfcmlnaHQyO1xuZXhwb3J0cy5mb3JfYWxsID0gZm9yX2FsbDtcbmV4cG9ydHMuZXhpc3RzID0gZXhpc3RzO1xuZXhwb3J0cy5mb3JfYWxsMiA9IGZvcl9hbGwyO1xuZXhwb3J0cy5leGlzdHMyID0gZXhpc3RzMjtcbmV4cG9ydHMubWVtID0gbWVtO1xuZXhwb3J0cy5tZW1xID0gbWVtcTtcbmV4cG9ydHMuZmluZCA9IGZpbmQ7XG5leHBvcnRzLmZpbHRlciA9IGZpbHRlcjtcbmV4cG9ydHMuZmluZF9hbGwgPSBmaW5kX2FsbDtcbmV4cG9ydHMucGFydGl0aW9uID0gcGFydGl0aW9uO1xuZXhwb3J0cy5hc3NvYyA9IGFzc29jO1xuZXhwb3J0cy5hc3NxID0gYXNzcTtcbmV4cG9ydHMubWVtX2Fzc29jID0gbWVtX2Fzc29jO1xuZXhwb3J0cy5tZW1fYXNzcSA9IG1lbV9hc3NxO1xuZXhwb3J0cy5yZW1vdmVfYXNzb2MgPSByZW1vdmVfYXNzb2M7XG5leHBvcnRzLnJlbW92ZV9hc3NxID0gcmVtb3ZlX2Fzc3E7XG5leHBvcnRzLnNwbGl0ID0gc3BsaXQ7XG5leHBvcnRzLmNvbWJpbmUgPSBjb21iaW5lO1xuZXhwb3J0cy5zb3J0ID0gc29ydDtcbmV4cG9ydHMuc3RhYmxlX3NvcnQgPSBzdGFibGVfc29ydDtcbmV4cG9ydHMuZmFzdF9zb3J0ID0gZmFzdF9zb3J0O1xuZXhwb3J0cy5zb3J0X3VuaXEgPSBzb3J0X3VuaXE7XG5leHBvcnRzLm1lcmdlID0gbWVyZ2U7XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ3VycnkgPSByZXF1aXJlKFwiLi9jdXJyeS5qc1wiKTtcbnZhciBDYW1sX2lvID0gcmVxdWlyZShcIi4vY2FtbF9pby5qc1wiKTtcbnZhciBDYW1sX3N5cyA9IHJlcXVpcmUoXCIuL2NhbWxfc3lzLmpzXCIpO1xudmFyIENhbWxfYnl0ZXMgPSByZXF1aXJlKFwiLi9jYW1sX2J5dGVzLmpzXCIpO1xudmFyIENhbWxfZm9ybWF0ID0gcmVxdWlyZShcIi4vY2FtbF9mb3JtYXQuanNcIik7XG52YXIgQ2FtbF9zdHJpbmcgPSByZXF1aXJlKFwiLi9jYW1sX3N0cmluZy5qc1wiKTtcbnZhciBDYW1sX2V4Y2VwdGlvbnMgPSByZXF1aXJlKFwiLi9jYW1sX2V4Y2VwdGlvbnMuanNcIik7XG52YXIgQ2FtbF9taXNzaW5nX3BvbHlmaWxsID0gcmVxdWlyZShcIi4vY2FtbF9taXNzaW5nX3BvbHlmaWxsLmpzXCIpO1xudmFyIENhbWxfYnVpbHRpbl9leGNlcHRpb25zID0gcmVxdWlyZShcIi4vY2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuanNcIik7XG52YXIgQ2FtbGludGVybmFsRm9ybWF0QmFzaWNzID0gcmVxdWlyZShcIi4vY2FtbGludGVybmFsRm9ybWF0QmFzaWNzLmpzXCIpO1xuXG5mdW5jdGlvbiBmYWlsd2l0aChzKSB7XG4gIHRocm93IFtcbiAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuZmFpbHVyZSxcbiAgICAgICAgc1xuICAgICAgXTtcbn1cblxuZnVuY3Rpb24gaW52YWxpZF9hcmcocykge1xuICB0aHJvdyBbXG4gICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgIHNcbiAgICAgIF07XG59XG5cbnZhciBFeGl0ID0gQ2FtbF9leGNlcHRpb25zLmNyZWF0ZShcIlBlcnZhc2l2ZXMuRXhpdFwiKTtcblxuZnVuY3Rpb24gYWJzKHgpIHtcbiAgaWYgKHggPj0gMCkge1xuICAgIHJldHVybiB4O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAteCB8IDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gbG5vdCh4KSB7XG4gIHJldHVybiB4IF4gLTE7XG59XG5cbnZhciBtaW5faW50ID0gLTIxNDc0ODM2NDg7XG5cbmZ1bmN0aW9uIGNsYXNzaWZ5X2Zsb2F0KHgpIHtcbiAgaWYgKGlzRmluaXRlKHgpKSB7XG4gICAgaWYgKE1hdGguYWJzKHgpID49IDIuMjI1MDczODU4NTA3MjAxNGUtMzA4KSB7XG4gICAgICByZXR1cm4gLyogRlBfbm9ybWFsICovMDtcbiAgICB9IGVsc2UgaWYgKHggIT09IDApIHtcbiAgICAgIHJldHVybiAvKiBGUF9zdWJub3JtYWwgKi8xO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogRlBfemVybyAqLzI7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzTmFOKHgpKSB7XG4gICAgcmV0dXJuIC8qIEZQX25hbiAqLzQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIEZQX2luZmluaXRlICovMztcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGFyX29mX2ludChuKSB7XG4gIGlmIChuIDwgMCB8fCBuID4gMjU1KSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJjaGFyX29mX2ludFwiXG4gICAgICAgIF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG47XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RyaW5nX29mX2Jvb2woYikge1xuICBpZiAoYikge1xuICAgIHJldHVybiBcInRydWVcIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJmYWxzZVwiO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJvb2xfb2Zfc3RyaW5nKHBhcmFtKSB7XG4gIHN3aXRjaCAocGFyYW0pIHtcbiAgICBjYXNlIFwiZmFsc2VcIiA6IFxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcInRydWVcIiA6IFxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICAgIFwiYm9vbF9vZl9zdHJpbmdcIlxuICAgICAgICAgIF07XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRfZmxvYXRfbGV4ZW0ocykge1xuICB2YXIgbCA9IHMubGVuZ3RoO1xuICB2YXIgX2kgPSAwO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGkgPSBfaTtcbiAgICBpZiAoaSA+PSBsKSB7XG4gICAgICByZXR1cm4gcyArIFwiLlwiO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbWF0Y2ggPSBDYW1sX3N0cmluZy5nZXQocywgaSk7XG4gICAgICBpZiAobWF0Y2ggPj0gNDgpIHtcbiAgICAgICAgaWYgKG1hdGNoID49IDU4KSB7XG4gICAgICAgICAgcmV0dXJuIHM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX2kgPSBpICsgMSB8IDA7XG4gICAgICAgICAgY29udGludWUgO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG1hdGNoICE9PSA0NSkge1xuICAgICAgICByZXR1cm4gcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBzdHJpbmdfb2ZfZmxvYXQoZikge1xuICByZXR1cm4gdmFsaWRfZmxvYXRfbGV4ZW0oQ2FtbF9mb3JtYXQuY2FtbF9mb3JtYXRfZmxvYXQoXCIlLjEyZ1wiLCBmKSk7XG59XG5cbmZ1bmN0aW9uICRhdChsMSwgbDIpIHtcbiAgaWYgKGwxKSB7XG4gICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgbDFbMF0sXG4gICAgICAgICAgICAkYXQobDFbMV0sIGwyKVxuICAgICAgICAgIF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGwyO1xuICB9XG59XG5cbnZhciBzdGRpbiA9IENhbWxfaW8uc3RkaW47XG5cbnZhciBzdGRvdXQgPSBDYW1sX2lvLnN0ZG91dDtcblxudmFyIHN0ZGVyciA9IENhbWxfaW8uc3RkZXJyO1xuXG5mdW5jdGlvbiBvcGVuX291dF9nZW4obW9kZSwgcGVybSwgbmFtZSkge1xuICByZXR1cm4gQ2FtbF9taXNzaW5nX3BvbHlmaWxsLm5vdF9pbXBsZW1lbnRlZChcImNhbWxfbWxfb3Blbl9kZXNjcmlwdG9yX291dFwiKTtcbn1cblxuZnVuY3Rpb24gb3Blbl9vdXQobmFtZSkge1xuICByZXR1cm4gb3Blbl9vdXRfZ2VuKC8qIDo6ICovW1xuICAgICAgICAgICAgICAvKiBPcGVuX3dyb25seSAqLzEsXG4gICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgIC8qIE9wZW5fY3JlYXQgKi8zLFxuICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgLyogT3Blbl90cnVuYyAqLzQsXG4gICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgLyogT3Blbl90ZXh0ICovNyxcbiAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdLCA0MzgsIG5hbWUpO1xufVxuXG5mdW5jdGlvbiBvcGVuX291dF9iaW4obmFtZSkge1xuICByZXR1cm4gb3Blbl9vdXRfZ2VuKC8qIDo6ICovW1xuICAgICAgICAgICAgICAvKiBPcGVuX3dyb25seSAqLzEsXG4gICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgIC8qIE9wZW5fY3JlYXQgKi8zLFxuICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgLyogT3Blbl90cnVuYyAqLzQsXG4gICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgLyogT3Blbl9iaW5hcnkgKi82LFxuICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIF0sIDQzOCwgbmFtZSk7XG59XG5cbmZ1bmN0aW9uIGZsdXNoX2FsbChwYXJhbSkge1xuICB2YXIgX3BhcmFtID0gQ2FtbF9pby5jYW1sX21sX291dF9jaGFubmVsc19saXN0KC8qICgpICovMCk7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcGFyYW0kMSA9IF9wYXJhbTtcbiAgICBpZiAocGFyYW0kMSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgQ2FtbF9pby5jYW1sX21sX2ZsdXNoKHBhcmFtJDFbMF0pO1xuICAgICAgfVxuICAgICAgY2F0Y2ggKGV4bil7XG4gICAgICAgIFxuICAgICAgfVxuICAgICAgX3BhcmFtID0gcGFyYW0kMVsxXTtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qICgpICovMDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG91dHB1dF9ieXRlcyhvYywgcykge1xuICByZXR1cm4gQ2FtbF9pby5jYW1sX21sX291dHB1dChvYywgcywgMCwgcy5sZW5ndGgpO1xufVxuXG5mdW5jdGlvbiBvdXRwdXRfc3RyaW5nKG9jLCBzKSB7XG4gIHJldHVybiBDYW1sX2lvLmNhbWxfbWxfb3V0cHV0KG9jLCBzLCAwLCBzLmxlbmd0aCk7XG59XG5cbmZ1bmN0aW9uIG91dHB1dChvYywgcywgb2ZzLCBsZW4pIHtcbiAgaWYgKG9mcyA8IDAgfHwgbGVuIDwgMCB8fCBvZnMgPiAocy5sZW5ndGggLSBsZW4gfCAwKSkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwib3V0cHV0XCJcbiAgICAgICAgXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQ2FtbF9pby5jYW1sX21sX291dHB1dChvYywgcywgb2ZzLCBsZW4pO1xuICB9XG59XG5cbmZ1bmN0aW9uIG91dHB1dF9zdWJzdHJpbmcob2MsIHMsIG9mcywgbGVuKSB7XG4gIGlmIChvZnMgPCAwIHx8IGxlbiA8IDAgfHwgb2ZzID4gKHMubGVuZ3RoIC0gbGVuIHwgMCkpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIm91dHB1dF9zdWJzdHJpbmdcIlxuICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBDYW1sX2lvLmNhbWxfbWxfb3V0cHV0KG9jLCBzLCBvZnMsIGxlbik7XG4gIH1cbn1cblxuZnVuY3Rpb24gb3V0cHV0X3ZhbHVlKGNoYW4sIHYpIHtcbiAgcmV0dXJuIENhbWxfbWlzc2luZ19wb2x5ZmlsbC5ub3RfaW1wbGVtZW50ZWQoXCJjYW1sX291dHB1dF92YWx1ZVwiKTtcbn1cblxuZnVuY3Rpb24gY2xvc2Vfb3V0KG9jKSB7XG4gIENhbWxfaW8uY2FtbF9tbF9mbHVzaChvYyk7XG4gIHJldHVybiBDYW1sX21pc3NpbmdfcG9seWZpbGwubm90X2ltcGxlbWVudGVkKFwiY2FtbF9tbF9jbG9zZV9jaGFubmVsXCIpO1xufVxuXG5mdW5jdGlvbiBjbG9zZV9vdXRfbm9lcnIob2MpIHtcbiAgdHJ5IHtcbiAgICBDYW1sX2lvLmNhbWxfbWxfZmx1c2gob2MpO1xuICB9XG4gIGNhdGNoIChleG4pe1xuICAgIFxuICB9XG4gIHRyeSB7XG4gICAgcmV0dXJuIENhbWxfbWlzc2luZ19wb2x5ZmlsbC5ub3RfaW1wbGVtZW50ZWQoXCJjYW1sX21sX2Nsb3NlX2NoYW5uZWxcIik7XG4gIH1cbiAgY2F0Y2ggKGV4biQxKXtcbiAgICByZXR1cm4gLyogKCkgKi8wO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9wZW5faW5fZ2VuKG1vZGUsIHBlcm0sIG5hbWUpIHtcbiAgcmV0dXJuIENhbWxfbWlzc2luZ19wb2x5ZmlsbC5ub3RfaW1wbGVtZW50ZWQoXCJjYW1sX21sX29wZW5fZGVzY3JpcHRvcl9pblwiKTtcbn1cblxuZnVuY3Rpb24gb3Blbl9pbihuYW1lKSB7XG4gIHJldHVybiBvcGVuX2luX2dlbigvKiA6OiAqL1tcbiAgICAgICAgICAgICAgLyogT3Blbl9yZG9ubHkgKi8wLFxuICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAvKiBPcGVuX3RleHQgKi83LFxuICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdLCAwLCBuYW1lKTtcbn1cblxuZnVuY3Rpb24gb3Blbl9pbl9iaW4obmFtZSkge1xuICByZXR1cm4gb3Blbl9pbl9nZW4oLyogOjogKi9bXG4gICAgICAgICAgICAgIC8qIE9wZW5fcmRvbmx5ICovMCxcbiAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgLyogT3Blbl9iaW5hcnkgKi82LFxuICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdLCAwLCBuYW1lKTtcbn1cblxuZnVuY3Rpb24gaW5wdXQoaWMsIHMsIG9mcywgbGVuKSB7XG4gIGlmIChvZnMgPCAwIHx8IGxlbiA8IDAgfHwgb2ZzID4gKHMubGVuZ3RoIC0gbGVuIHwgMCkpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcImlucHV0XCJcbiAgICAgICAgXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQ2FtbF9taXNzaW5nX3BvbHlmaWxsLm5vdF9pbXBsZW1lbnRlZChcImNhbWxfbWxfaW5wdXRcIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gdW5zYWZlX3JlYWxseV9pbnB1dChpYywgcywgX29mcywgX2xlbikge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGxlbiA9IF9sZW47XG4gICAgdmFyIG9mcyA9IF9vZnM7XG4gICAgaWYgKGxlbiA8PSAwKSB7XG4gICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgciA9IENhbWxfbWlzc2luZ19wb2x5ZmlsbC5ub3RfaW1wbGVtZW50ZWQoXCJjYW1sX21sX2lucHV0XCIpO1xuICAgICAgaWYgKHIgPT09IDApIHtcbiAgICAgICAgdGhyb3cgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuZW5kX29mX2ZpbGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfbGVuID0gbGVuIC0gciB8IDA7XG4gICAgICAgIF9vZnMgPSBvZnMgKyByIHwgMDtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVhbGx5X2lucHV0KGljLCBzLCBvZnMsIGxlbikge1xuICBpZiAob2ZzIDwgMCB8fCBsZW4gPCAwIHx8IG9mcyA+IChzLmxlbmd0aCAtIGxlbiB8IDApKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJyZWFsbHlfaW5wdXRcIlxuICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB1bnNhZmVfcmVhbGx5X2lucHV0KGljLCBzLCBvZnMsIGxlbik7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVhbGx5X2lucHV0X3N0cmluZyhpYywgbGVuKSB7XG4gIHZhciBzID0gQ2FtbF9ieXRlcy5jYW1sX2NyZWF0ZV9ieXRlcyhsZW4pO1xuICByZWFsbHlfaW5wdXQoaWMsIHMsIDAsIGxlbik7XG4gIHJldHVybiBDYW1sX2J5dGVzLmJ5dGVzX3RvX3N0cmluZyhzKTtcbn1cblxuZnVuY3Rpb24gaW5wdXRfbGluZShjaGFuKSB7XG4gIHZhciBidWlsZF9yZXN1bHQgPSBmdW5jdGlvbiAoYnVmLCBfcG9zLCBfcGFyYW0pIHtcbiAgICB3aGlsZSh0cnVlKSB7XG4gICAgICB2YXIgcGFyYW0gPSBfcGFyYW07XG4gICAgICB2YXIgcG9zID0gX3BvcztcbiAgICAgIGlmIChwYXJhbSkge1xuICAgICAgICB2YXIgaGQgPSBwYXJhbVswXTtcbiAgICAgICAgdmFyIGxlbiA9IGhkLmxlbmd0aDtcbiAgICAgICAgQ2FtbF9ieXRlcy5jYW1sX2JsaXRfYnl0ZXMoaGQsIDAsIGJ1ZiwgcG9zIC0gbGVuIHwgMCwgbGVuKTtcbiAgICAgICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgICAgIF9wb3MgPSBwb3MgLSBsZW4gfCAwO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYnVmO1xuICAgICAgfVxuICAgIH07XG4gIH07XG4gIHZhciBzY2FuID0gZnVuY3Rpb24gKF9hY2N1LCBfbGVuKSB7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIGxlbiA9IF9sZW47XG4gICAgICB2YXIgYWNjdSA9IF9hY2N1O1xuICAgICAgdmFyIG4gPSBDYW1sX21pc3NpbmdfcG9seWZpbGwubm90X2ltcGxlbWVudGVkKFwiY2FtbF9tbF9pbnB1dF9zY2FuX2xpbmVcIik7XG4gICAgICBpZiAobiA9PT0gMCkge1xuICAgICAgICBpZiAoYWNjdSkge1xuICAgICAgICAgIHJldHVybiBidWlsZF9yZXN1bHQoQ2FtbF9ieXRlcy5jYW1sX2NyZWF0ZV9ieXRlcyhsZW4pLCBsZW4sIGFjY3UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmVuZF9vZl9maWxlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG4gPiAwKSB7XG4gICAgICAgIHZhciByZXMgPSBDYW1sX2J5dGVzLmNhbWxfY3JlYXRlX2J5dGVzKG4gLSAxIHwgMCk7XG4gICAgICAgIENhbWxfbWlzc2luZ19wb2x5ZmlsbC5ub3RfaW1wbGVtZW50ZWQoXCJjYW1sX21sX2lucHV0XCIpO1xuICAgICAgICBDYW1sX21pc3NpbmdfcG9seWZpbGwubm90X2ltcGxlbWVudGVkKFwiY2FtbF9tbF9pbnB1dF9jaGFyXCIpO1xuICAgICAgICBpZiAoYWNjdSkge1xuICAgICAgICAgIHZhciBsZW4kMSA9IChsZW4gKyBuIHwgMCkgLSAxIHwgMDtcbiAgICAgICAgICByZXR1cm4gYnVpbGRfcmVzdWx0KENhbWxfYnl0ZXMuY2FtbF9jcmVhdGVfYnl0ZXMobGVuJDEpLCBsZW4kMSwgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgcmVzLFxuICAgICAgICAgICAgICAgICAgICAgIGFjY3VcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGJlZyA9IENhbWxfYnl0ZXMuY2FtbF9jcmVhdGVfYnl0ZXMoLW4gfCAwKTtcbiAgICAgICAgQ2FtbF9taXNzaW5nX3BvbHlmaWxsLm5vdF9pbXBsZW1lbnRlZChcImNhbWxfbWxfaW5wdXRcIik7XG4gICAgICAgIF9sZW4gPSBsZW4gLSBuIHwgMDtcbiAgICAgICAgX2FjY3UgPSAvKiA6OiAqL1tcbiAgICAgICAgICBiZWcsXG4gICAgICAgICAgYWNjdVxuICAgICAgICBdO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nKHNjYW4oLyogW10gKi8wLCAwKSk7XG59XG5cbmZ1bmN0aW9uIGNsb3NlX2luX25vZXJyKGljKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIENhbWxfbWlzc2luZ19wb2x5ZmlsbC5ub3RfaW1wbGVtZW50ZWQoXCJjYW1sX21sX2Nsb3NlX2NoYW5uZWxcIik7XG4gIH1cbiAgY2F0Y2ggKGV4bil7XG4gICAgcmV0dXJuIC8qICgpICovMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcmludF9jaGFyKGMpIHtcbiAgcmV0dXJuIENhbWxfaW8uY2FtbF9tbF9vdXRwdXRfY2hhcihzdGRvdXQsIGMpO1xufVxuXG5mdW5jdGlvbiBwcmludF9zdHJpbmcocykge1xuICByZXR1cm4gb3V0cHV0X3N0cmluZyhzdGRvdXQsIHMpO1xufVxuXG5mdW5jdGlvbiBwcmludF9ieXRlcyhzKSB7XG4gIHJldHVybiBvdXRwdXRfYnl0ZXMoc3Rkb3V0LCBzKTtcbn1cblxuZnVuY3Rpb24gcHJpbnRfaW50KGkpIHtcbiAgcmV0dXJuIG91dHB1dF9zdHJpbmcoc3Rkb3V0LCBTdHJpbmcoaSkpO1xufVxuXG5mdW5jdGlvbiBwcmludF9mbG9hdChmKSB7XG4gIHJldHVybiBvdXRwdXRfc3RyaW5nKHN0ZG91dCwgdmFsaWRfZmxvYXRfbGV4ZW0oQ2FtbF9mb3JtYXQuY2FtbF9mb3JtYXRfZmxvYXQoXCIlLjEyZ1wiLCBmKSkpO1xufVxuXG5mdW5jdGlvbiBwcmludF9uZXdsaW5lKHBhcmFtKSB7XG4gIENhbWxfaW8uY2FtbF9tbF9vdXRwdXRfY2hhcihzdGRvdXQsIC8qIFwiXFxuXCIgKi8xMCk7XG4gIHJldHVybiBDYW1sX2lvLmNhbWxfbWxfZmx1c2goc3Rkb3V0KTtcbn1cblxuZnVuY3Rpb24gcHJlcnJfY2hhcihjKSB7XG4gIHJldHVybiBDYW1sX2lvLmNhbWxfbWxfb3V0cHV0X2NoYXIoc3RkZXJyLCBjKTtcbn1cblxuZnVuY3Rpb24gcHJlcnJfc3RyaW5nKHMpIHtcbiAgcmV0dXJuIG91dHB1dF9zdHJpbmcoc3RkZXJyLCBzKTtcbn1cblxuZnVuY3Rpb24gcHJlcnJfYnl0ZXMocykge1xuICByZXR1cm4gb3V0cHV0X2J5dGVzKHN0ZGVyciwgcyk7XG59XG5cbmZ1bmN0aW9uIHByZXJyX2ludChpKSB7XG4gIHJldHVybiBvdXRwdXRfc3RyaW5nKHN0ZGVyciwgU3RyaW5nKGkpKTtcbn1cblxuZnVuY3Rpb24gcHJlcnJfZmxvYXQoZikge1xuICByZXR1cm4gb3V0cHV0X3N0cmluZyhzdGRlcnIsIHZhbGlkX2Zsb2F0X2xleGVtKENhbWxfZm9ybWF0LmNhbWxfZm9ybWF0X2Zsb2F0KFwiJS4xMmdcIiwgZikpKTtcbn1cblxuZnVuY3Rpb24gcHJlcnJfbmV3bGluZShwYXJhbSkge1xuICBDYW1sX2lvLmNhbWxfbWxfb3V0cHV0X2NoYXIoc3RkZXJyLCAvKiBcIlxcblwiICovMTApO1xuICByZXR1cm4gQ2FtbF9pby5jYW1sX21sX2ZsdXNoKHN0ZGVycik7XG59XG5cbmZ1bmN0aW9uIHJlYWRfbGluZShwYXJhbSkge1xuICBDYW1sX2lvLmNhbWxfbWxfZmx1c2goc3Rkb3V0KTtcbiAgcmV0dXJuIGlucHV0X2xpbmUoc3RkaW4pO1xufVxuXG5mdW5jdGlvbiByZWFkX2ludChwYXJhbSkge1xuICByZXR1cm4gQ2FtbF9mb3JtYXQuY2FtbF9pbnRfb2Zfc3RyaW5nKChDYW1sX2lvLmNhbWxfbWxfZmx1c2goc3Rkb3V0KSwgaW5wdXRfbGluZShzdGRpbikpKTtcbn1cblxuZnVuY3Rpb24gcmVhZF9mbG9hdChwYXJhbSkge1xuICByZXR1cm4gQ2FtbF9mb3JtYXQuY2FtbF9mbG9hdF9vZl9zdHJpbmcoKENhbWxfaW8uY2FtbF9tbF9mbHVzaChzdGRvdXQpLCBpbnB1dF9saW5lKHN0ZGluKSkpO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdfb2ZfZm9ybWF0KHBhcmFtKSB7XG4gIHJldHVybiBwYXJhbVsxXTtcbn1cblxuZnVuY3Rpb24gJGNhcmV0JGNhcmV0KHBhcmFtLCBwYXJhbSQxKSB7XG4gIHJldHVybiAvKiBGb3JtYXQgKi9bXG4gICAgICAgICAgQ2FtbGludGVybmFsRm9ybWF0QmFzaWNzLmNvbmNhdF9mbXQocGFyYW1bMF0sIHBhcmFtJDFbMF0pLFxuICAgICAgICAgIHBhcmFtWzFdICsgKFwiJSxcIiArIHBhcmFtJDFbMV0pXG4gICAgICAgIF07XG59XG5cbnZhciBleGl0X2Z1bmN0aW9uID0gLyogcmVjb3JkICovWy8qIGNvbnRlbnRzICovZmx1c2hfYWxsXTtcblxuZnVuY3Rpb24gYXRfZXhpdChmKSB7XG4gIHZhciBnID0gZXhpdF9mdW5jdGlvblswXTtcbiAgZXhpdF9mdW5jdGlvblswXSA9IChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIEN1cnJ5Ll8xKGYsIC8qICgpICovMCk7XG4gICAgICByZXR1cm4gQ3VycnkuXzEoZywgLyogKCkgKi8wKTtcbiAgICB9KTtcbiAgcmV0dXJuIC8qICgpICovMDtcbn1cblxuZnVuY3Rpb24gZG9fYXRfZXhpdChwYXJhbSkge1xuICByZXR1cm4gQ3VycnkuXzEoZXhpdF9mdW5jdGlvblswXSwgLyogKCkgKi8wKTtcbn1cblxuZnVuY3Rpb24gZXhpdChyZXRjb2RlKSB7XG4gIGRvX2F0X2V4aXQoLyogKCkgKi8wKTtcbiAgcmV0dXJuIENhbWxfc3lzLmNhbWxfc3lzX2V4aXQocmV0Y29kZSk7XG59XG5cbnZhciBtYXhfaW50ID0gMjE0NzQ4MzY0NztcblxudmFyIGVwc2lsb25fZmxvYXQgPSAyLjIyMDQ0NjA0OTI1MDMxM2UtMTY7XG5cbnZhciBmbHVzaCA9IENhbWxfaW8uY2FtbF9tbF9mbHVzaDtcblxudmFyIG91dHB1dF9jaGFyID0gQ2FtbF9pby5jYW1sX21sX291dHB1dF9jaGFyO1xuXG52YXIgb3V0cHV0X2J5dGUgPSBDYW1sX2lvLmNhbWxfbWxfb3V0cHV0X2NoYXI7XG5cbmZ1bmN0aW9uIG91dHB1dF9iaW5hcnlfaW50KHByaW0sIHByaW0kMSkge1xuICByZXR1cm4gQ2FtbF9taXNzaW5nX3BvbHlmaWxsLm5vdF9pbXBsZW1lbnRlZChcImNhbWxfbWxfb3V0cHV0X2ludFwiKTtcbn1cblxuZnVuY3Rpb24gc2Vla19vdXQocHJpbSwgcHJpbSQxKSB7XG4gIHJldHVybiBDYW1sX21pc3NpbmdfcG9seWZpbGwubm90X2ltcGxlbWVudGVkKFwiY2FtbF9tbF9zZWVrX291dFwiKTtcbn1cblxuZnVuY3Rpb24gcG9zX291dChwcmltKSB7XG4gIHJldHVybiBDYW1sX21pc3NpbmdfcG9seWZpbGwubm90X2ltcGxlbWVudGVkKFwiY2FtbF9tbF9wb3Nfb3V0XCIpO1xufVxuXG5mdW5jdGlvbiBvdXRfY2hhbm5lbF9sZW5ndGgocHJpbSkge1xuICByZXR1cm4gQ2FtbF9taXNzaW5nX3BvbHlmaWxsLm5vdF9pbXBsZW1lbnRlZChcImNhbWxfbWxfY2hhbm5lbF9zaXplXCIpO1xufVxuXG5mdW5jdGlvbiBzZXRfYmluYXJ5X21vZGVfb3V0KHByaW0sIHByaW0kMSkge1xuICByZXR1cm4gQ2FtbF9taXNzaW5nX3BvbHlmaWxsLm5vdF9pbXBsZW1lbnRlZChcImNhbWxfbWxfc2V0X2JpbmFyeV9tb2RlXCIpO1xufVxuXG5mdW5jdGlvbiBpbnB1dF9jaGFyKHByaW0pIHtcbiAgcmV0dXJuIENhbWxfbWlzc2luZ19wb2x5ZmlsbC5ub3RfaW1wbGVtZW50ZWQoXCJjYW1sX21sX2lucHV0X2NoYXJcIik7XG59XG5cbmZ1bmN0aW9uIGlucHV0X2J5dGUocHJpbSkge1xuICByZXR1cm4gQ2FtbF9taXNzaW5nX3BvbHlmaWxsLm5vdF9pbXBsZW1lbnRlZChcImNhbWxfbWxfaW5wdXRfY2hhclwiKTtcbn1cblxuZnVuY3Rpb24gaW5wdXRfYmluYXJ5X2ludChwcmltKSB7XG4gIHJldHVybiBDYW1sX21pc3NpbmdfcG9seWZpbGwubm90X2ltcGxlbWVudGVkKFwiY2FtbF9tbF9pbnB1dF9pbnRcIik7XG59XG5cbmZ1bmN0aW9uIGlucHV0X3ZhbHVlKHByaW0pIHtcbiAgcmV0dXJuIENhbWxfbWlzc2luZ19wb2x5ZmlsbC5ub3RfaW1wbGVtZW50ZWQoXCJjYW1sX2lucHV0X3ZhbHVlXCIpO1xufVxuXG5mdW5jdGlvbiBzZWVrX2luKHByaW0sIHByaW0kMSkge1xuICByZXR1cm4gQ2FtbF9taXNzaW5nX3BvbHlmaWxsLm5vdF9pbXBsZW1lbnRlZChcImNhbWxfbWxfc2Vla19pblwiKTtcbn1cblxuZnVuY3Rpb24gcG9zX2luKHByaW0pIHtcbiAgcmV0dXJuIENhbWxfbWlzc2luZ19wb2x5ZmlsbC5ub3RfaW1wbGVtZW50ZWQoXCJjYW1sX21sX3Bvc19pblwiKTtcbn1cblxuZnVuY3Rpb24gaW5fY2hhbm5lbF9sZW5ndGgocHJpbSkge1xuICByZXR1cm4gQ2FtbF9taXNzaW5nX3BvbHlmaWxsLm5vdF9pbXBsZW1lbnRlZChcImNhbWxfbWxfY2hhbm5lbF9zaXplXCIpO1xufVxuXG5mdW5jdGlvbiBjbG9zZV9pbihwcmltKSB7XG4gIHJldHVybiBDYW1sX21pc3NpbmdfcG9seWZpbGwubm90X2ltcGxlbWVudGVkKFwiY2FtbF9tbF9jbG9zZV9jaGFubmVsXCIpO1xufVxuXG5mdW5jdGlvbiBzZXRfYmluYXJ5X21vZGVfaW4ocHJpbSwgcHJpbSQxKSB7XG4gIHJldHVybiBDYW1sX21pc3NpbmdfcG9seWZpbGwubm90X2ltcGxlbWVudGVkKFwiY2FtbF9tbF9zZXRfYmluYXJ5X21vZGVcIik7XG59XG5cbmZ1bmN0aW9uIExhcmdlRmlsZV8wMDAocHJpbSwgcHJpbSQxKSB7XG4gIHJldHVybiBDYW1sX21pc3NpbmdfcG9seWZpbGwubm90X2ltcGxlbWVudGVkKFwiY2FtbF9tbF9zZWVrX291dF82NFwiKTtcbn1cblxuZnVuY3Rpb24gTGFyZ2VGaWxlXzAwMShwcmltKSB7XG4gIHJldHVybiBDYW1sX21pc3NpbmdfcG9seWZpbGwubm90X2ltcGxlbWVudGVkKFwiY2FtbF9tbF9wb3Nfb3V0XzY0XCIpO1xufVxuXG5mdW5jdGlvbiBMYXJnZUZpbGVfMDAyKHByaW0pIHtcbiAgcmV0dXJuIENhbWxfbWlzc2luZ19wb2x5ZmlsbC5ub3RfaW1wbGVtZW50ZWQoXCJjYW1sX21sX2NoYW5uZWxfc2l6ZV82NFwiKTtcbn1cblxuZnVuY3Rpb24gTGFyZ2VGaWxlXzAwMyhwcmltLCBwcmltJDEpIHtcbiAgcmV0dXJuIENhbWxfbWlzc2luZ19wb2x5ZmlsbC5ub3RfaW1wbGVtZW50ZWQoXCJjYW1sX21sX3NlZWtfaW5fNjRcIik7XG59XG5cbmZ1bmN0aW9uIExhcmdlRmlsZV8wMDQocHJpbSkge1xuICByZXR1cm4gQ2FtbF9taXNzaW5nX3BvbHlmaWxsLm5vdF9pbXBsZW1lbnRlZChcImNhbWxfbWxfcG9zX2luXzY0XCIpO1xufVxuXG5mdW5jdGlvbiBMYXJnZUZpbGVfMDA1KHByaW0pIHtcbiAgcmV0dXJuIENhbWxfbWlzc2luZ19wb2x5ZmlsbC5ub3RfaW1wbGVtZW50ZWQoXCJjYW1sX21sX2NoYW5uZWxfc2l6ZV82NFwiKTtcbn1cblxudmFyIExhcmdlRmlsZSA9IFtcbiAgTGFyZ2VGaWxlXzAwMCxcbiAgTGFyZ2VGaWxlXzAwMSxcbiAgTGFyZ2VGaWxlXzAwMixcbiAgTGFyZ2VGaWxlXzAwMyxcbiAgTGFyZ2VGaWxlXzAwNCxcbiAgTGFyZ2VGaWxlXzAwNVxuXTtcblxuZXhwb3J0cy5pbnZhbGlkX2FyZyA9IGludmFsaWRfYXJnO1xuZXhwb3J0cy5mYWlsd2l0aCA9IGZhaWx3aXRoO1xuZXhwb3J0cy5FeGl0ID0gRXhpdDtcbmV4cG9ydHMuYWJzID0gYWJzO1xuZXhwb3J0cy5tYXhfaW50ID0gbWF4X2ludDtcbmV4cG9ydHMubWluX2ludCA9IG1pbl9pbnQ7XG5leHBvcnRzLmxub3QgPSBsbm90O1xuZXhwb3J0cy5lcHNpbG9uX2Zsb2F0ID0gZXBzaWxvbl9mbG9hdDtcbmV4cG9ydHMuY2xhc3NpZnlfZmxvYXQgPSBjbGFzc2lmeV9mbG9hdDtcbmV4cG9ydHMuY2hhcl9vZl9pbnQgPSBjaGFyX29mX2ludDtcbmV4cG9ydHMuc3RyaW5nX29mX2Jvb2wgPSBzdHJpbmdfb2ZfYm9vbDtcbmV4cG9ydHMuYm9vbF9vZl9zdHJpbmcgPSBib29sX29mX3N0cmluZztcbmV4cG9ydHMuc3RyaW5nX29mX2Zsb2F0ID0gc3RyaW5nX29mX2Zsb2F0O1xuZXhwb3J0cy4kYXQgPSAkYXQ7XG5leHBvcnRzLnN0ZGluID0gc3RkaW47XG5leHBvcnRzLnN0ZG91dCA9IHN0ZG91dDtcbmV4cG9ydHMuc3RkZXJyID0gc3RkZXJyO1xuZXhwb3J0cy5wcmludF9jaGFyID0gcHJpbnRfY2hhcjtcbmV4cG9ydHMucHJpbnRfc3RyaW5nID0gcHJpbnRfc3RyaW5nO1xuZXhwb3J0cy5wcmludF9ieXRlcyA9IHByaW50X2J5dGVzO1xuZXhwb3J0cy5wcmludF9pbnQgPSBwcmludF9pbnQ7XG5leHBvcnRzLnByaW50X2Zsb2F0ID0gcHJpbnRfZmxvYXQ7XG5leHBvcnRzLnByaW50X25ld2xpbmUgPSBwcmludF9uZXdsaW5lO1xuZXhwb3J0cy5wcmVycl9jaGFyID0gcHJlcnJfY2hhcjtcbmV4cG9ydHMucHJlcnJfc3RyaW5nID0gcHJlcnJfc3RyaW5nO1xuZXhwb3J0cy5wcmVycl9ieXRlcyA9IHByZXJyX2J5dGVzO1xuZXhwb3J0cy5wcmVycl9pbnQgPSBwcmVycl9pbnQ7XG5leHBvcnRzLnByZXJyX2Zsb2F0ID0gcHJlcnJfZmxvYXQ7XG5leHBvcnRzLnByZXJyX25ld2xpbmUgPSBwcmVycl9uZXdsaW5lO1xuZXhwb3J0cy5yZWFkX2xpbmUgPSByZWFkX2xpbmU7XG5leHBvcnRzLnJlYWRfaW50ID0gcmVhZF9pbnQ7XG5leHBvcnRzLnJlYWRfZmxvYXQgPSByZWFkX2Zsb2F0O1xuZXhwb3J0cy5vcGVuX291dCA9IG9wZW5fb3V0O1xuZXhwb3J0cy5vcGVuX291dF9iaW4gPSBvcGVuX291dF9iaW47XG5leHBvcnRzLm9wZW5fb3V0X2dlbiA9IG9wZW5fb3V0X2dlbjtcbmV4cG9ydHMuZmx1c2ggPSBmbHVzaDtcbmV4cG9ydHMuZmx1c2hfYWxsID0gZmx1c2hfYWxsO1xuZXhwb3J0cy5vdXRwdXRfY2hhciA9IG91dHB1dF9jaGFyO1xuZXhwb3J0cy5vdXRwdXRfc3RyaW5nID0gb3V0cHV0X3N0cmluZztcbmV4cG9ydHMub3V0cHV0X2J5dGVzID0gb3V0cHV0X2J5dGVzO1xuZXhwb3J0cy5vdXRwdXQgPSBvdXRwdXQ7XG5leHBvcnRzLm91dHB1dF9zdWJzdHJpbmcgPSBvdXRwdXRfc3Vic3RyaW5nO1xuZXhwb3J0cy5vdXRwdXRfYnl0ZSA9IG91dHB1dF9ieXRlO1xuZXhwb3J0cy5vdXRwdXRfYmluYXJ5X2ludCA9IG91dHB1dF9iaW5hcnlfaW50O1xuZXhwb3J0cy5vdXRwdXRfdmFsdWUgPSBvdXRwdXRfdmFsdWU7XG5leHBvcnRzLnNlZWtfb3V0ID0gc2Vla19vdXQ7XG5leHBvcnRzLnBvc19vdXQgPSBwb3Nfb3V0O1xuZXhwb3J0cy5vdXRfY2hhbm5lbF9sZW5ndGggPSBvdXRfY2hhbm5lbF9sZW5ndGg7XG5leHBvcnRzLmNsb3NlX291dCA9IGNsb3NlX291dDtcbmV4cG9ydHMuY2xvc2Vfb3V0X25vZXJyID0gY2xvc2Vfb3V0X25vZXJyO1xuZXhwb3J0cy5zZXRfYmluYXJ5X21vZGVfb3V0ID0gc2V0X2JpbmFyeV9tb2RlX291dDtcbmV4cG9ydHMub3Blbl9pbiA9IG9wZW5faW47XG5leHBvcnRzLm9wZW5faW5fYmluID0gb3Blbl9pbl9iaW47XG5leHBvcnRzLm9wZW5faW5fZ2VuID0gb3Blbl9pbl9nZW47XG5leHBvcnRzLmlucHV0X2NoYXIgPSBpbnB1dF9jaGFyO1xuZXhwb3J0cy5pbnB1dF9saW5lID0gaW5wdXRfbGluZTtcbmV4cG9ydHMuaW5wdXQgPSBpbnB1dDtcbmV4cG9ydHMucmVhbGx5X2lucHV0ID0gcmVhbGx5X2lucHV0O1xuZXhwb3J0cy5yZWFsbHlfaW5wdXRfc3RyaW5nID0gcmVhbGx5X2lucHV0X3N0cmluZztcbmV4cG9ydHMuaW5wdXRfYnl0ZSA9IGlucHV0X2J5dGU7XG5leHBvcnRzLmlucHV0X2JpbmFyeV9pbnQgPSBpbnB1dF9iaW5hcnlfaW50O1xuZXhwb3J0cy5pbnB1dF92YWx1ZSA9IGlucHV0X3ZhbHVlO1xuZXhwb3J0cy5zZWVrX2luID0gc2Vla19pbjtcbmV4cG9ydHMucG9zX2luID0gcG9zX2luO1xuZXhwb3J0cy5pbl9jaGFubmVsX2xlbmd0aCA9IGluX2NoYW5uZWxfbGVuZ3RoO1xuZXhwb3J0cy5jbG9zZV9pbiA9IGNsb3NlX2luO1xuZXhwb3J0cy5jbG9zZV9pbl9ub2VyciA9IGNsb3NlX2luX25vZXJyO1xuZXhwb3J0cy5zZXRfYmluYXJ5X21vZGVfaW4gPSBzZXRfYmluYXJ5X21vZGVfaW47XG5leHBvcnRzLkxhcmdlRmlsZSA9IExhcmdlRmlsZTtcbmV4cG9ydHMuc3RyaW5nX29mX2Zvcm1hdCA9IHN0cmluZ19vZl9mb3JtYXQ7XG5leHBvcnRzLiRjYXJldCRjYXJldCA9ICRjYXJldCRjYXJldDtcbmV4cG9ydHMuZXhpdCA9IGV4aXQ7XG5leHBvcnRzLmF0X2V4aXQgPSBhdF9leGl0O1xuZXhwb3J0cy52YWxpZF9mbG9hdF9sZXhlbSA9IHZhbGlkX2Zsb2F0X2xleGVtO1xuZXhwb3J0cy51bnNhZmVfcmVhbGx5X2lucHV0ID0gdW5zYWZlX3JlYWxseV9pbnB1dDtcbmV4cG9ydHMuZG9fYXRfZXhpdCA9IGRvX2F0X2V4aXQ7XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ3VycnkgPSByZXF1aXJlKFwiLi9jdXJyeS5qc1wiKTtcbnZhciAkJEJ1ZmZlciA9IHJlcXVpcmUoXCIuL2J1ZmZlci5qc1wiKTtcbnZhciBQZXJ2YXNpdmVzID0gcmVxdWlyZShcIi4vcGVydmFzaXZlcy5qc1wiKTtcbnZhciBDYW1saW50ZXJuYWxGb3JtYXQgPSByZXF1aXJlKFwiLi9jYW1saW50ZXJuYWxGb3JtYXQuanNcIik7XG5cbmZ1bmN0aW9uIGtmcHJpbnRmKGssIG8sIHBhcmFtKSB7XG4gIHJldHVybiBDYW1saW50ZXJuYWxGb3JtYXQubWFrZV9wcmludGYoKGZ1bmN0aW9uIChvLCBhY2MpIHtcbiAgICAgICAgICAgICAgICBDYW1saW50ZXJuYWxGb3JtYXQub3V0cHV0X2FjYyhvLCBhY2MpO1xuICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShrLCBvKTtcbiAgICAgICAgICAgICAgfSksIG8sIC8qIEVuZF9vZl9hY2MgKi8wLCBwYXJhbVswXSk7XG59XG5cbmZ1bmN0aW9uIGticHJpbnRmKGssIGIsIHBhcmFtKSB7XG4gIHJldHVybiBDYW1saW50ZXJuYWxGb3JtYXQubWFrZV9wcmludGYoKGZ1bmN0aW9uIChiLCBhY2MpIHtcbiAgICAgICAgICAgICAgICBDYW1saW50ZXJuYWxGb3JtYXQuYnVmcHV0X2FjYyhiLCBhY2MpO1xuICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShrLCBiKTtcbiAgICAgICAgICAgICAgfSksIGIsIC8qIEVuZF9vZl9hY2MgKi8wLCBwYXJhbVswXSk7XG59XG5cbmZ1bmN0aW9uIGlrZnByaW50ZihrLCBvYywgcGFyYW0pIHtcbiAgcmV0dXJuIENhbWxpbnRlcm5hbEZvcm1hdC5tYWtlX3ByaW50ZigoZnVuY3Rpb24gKG9jLCBwYXJhbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShrLCBvYyk7XG4gICAgICAgICAgICAgIH0pLCBvYywgLyogRW5kX29mX2FjYyAqLzAsIHBhcmFtWzBdKTtcbn1cblxuZnVuY3Rpb24gZnByaW50ZihvYywgZm10KSB7XG4gIHJldHVybiBrZnByaW50ZigoZnVuY3Rpb24gKHByaW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgICAgICAgICAgICB9KSwgb2MsIGZtdCk7XG59XG5cbmZ1bmN0aW9uIGJwcmludGYoYiwgZm10KSB7XG4gIHJldHVybiBrYnByaW50ZigoZnVuY3Rpb24gKHByaW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgICAgICAgICAgICB9KSwgYiwgZm10KTtcbn1cblxuZnVuY3Rpb24gaWZwcmludGYob2MsIGZtdCkge1xuICByZXR1cm4gaWtmcHJpbnRmKChmdW5jdGlvbiAocHJpbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiAoKSAqLzA7XG4gICAgICAgICAgICAgIH0pLCBvYywgZm10KTtcbn1cblxuZnVuY3Rpb24gcHJpbnRmKGZtdCkge1xuICByZXR1cm4gZnByaW50ZihQZXJ2YXNpdmVzLnN0ZG91dCwgZm10KTtcbn1cblxuZnVuY3Rpb24gZXByaW50ZihmbXQpIHtcbiAgcmV0dXJuIGZwcmludGYoUGVydmFzaXZlcy5zdGRlcnIsIGZtdCk7XG59XG5cbmZ1bmN0aW9uIGtzcHJpbnRmKGssIHBhcmFtKSB7XG4gIHZhciBrJHByaW1lID0gZnVuY3Rpb24gKHBhcmFtLCBhY2MpIHtcbiAgICB2YXIgYnVmID0gJCRCdWZmZXIuY3JlYXRlKDY0KTtcbiAgICBDYW1saW50ZXJuYWxGb3JtYXQuc3RycHV0X2FjYyhidWYsIGFjYyk7XG4gICAgcmV0dXJuIEN1cnJ5Ll8xKGssICQkQnVmZmVyLmNvbnRlbnRzKGJ1ZikpO1xuICB9O1xuICByZXR1cm4gQ2FtbGludGVybmFsRm9ybWF0Lm1ha2VfcHJpbnRmKGskcHJpbWUsIC8qICgpICovMCwgLyogRW5kX29mX2FjYyAqLzAsIHBhcmFtWzBdKTtcbn1cblxuZnVuY3Rpb24gc3ByaW50ZihmbXQpIHtcbiAgcmV0dXJuIGtzcHJpbnRmKChmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgICAgIHJldHVybiBzO1xuICAgICAgICAgICAgICB9KSwgZm10KTtcbn1cblxudmFyIGtwcmludGYgPSBrc3ByaW50ZjtcblxuZXhwb3J0cy5mcHJpbnRmID0gZnByaW50ZjtcbmV4cG9ydHMucHJpbnRmID0gcHJpbnRmO1xuZXhwb3J0cy5lcHJpbnRmID0gZXByaW50ZjtcbmV4cG9ydHMuc3ByaW50ZiA9IHNwcmludGY7XG5leHBvcnRzLmJwcmludGYgPSBicHJpbnRmO1xuZXhwb3J0cy5pZnByaW50ZiA9IGlmcHJpbnRmO1xuZXhwb3J0cy5rZnByaW50ZiA9IGtmcHJpbnRmO1xuZXhwb3J0cy5pa2ZwcmludGYgPSBpa2ZwcmludGY7XG5leHBvcnRzLmtzcHJpbnRmID0ga3NwcmludGY7XG5leHBvcnRzLmticHJpbnRmID0ga2JwcmludGY7XG5leHBvcnRzLmtwcmludGYgPSBrcHJpbnRmO1xuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIExpc3QgPSByZXF1aXJlKFwiLi9saXN0LmpzXCIpO1xudmFyIEJ5dGVzID0gcmVxdWlyZShcIi4vYnl0ZXMuanNcIik7XG52YXIgQ2FtbF9ieXRlcyA9IHJlcXVpcmUoXCIuL2NhbWxfYnl0ZXMuanNcIik7XG52YXIgQ2FtbF9pbnQzMiA9IHJlcXVpcmUoXCIuL2NhbWxfaW50MzIuanNcIik7XG52YXIgQ2FtbF9wcmltaXRpdmUgPSByZXF1aXJlKFwiLi9jYW1sX3ByaW1pdGl2ZS5qc1wiKTtcbnZhciBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucyA9IHJlcXVpcmUoXCIuL2NhbWxfYnVpbHRpbl9leGNlcHRpb25zLmpzXCIpO1xuXG5mdW5jdGlvbiBtYWtlKG4sIGMpIHtcbiAgcmV0dXJuIENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nKEJ5dGVzLm1ha2UobiwgYykpO1xufVxuXG5mdW5jdGlvbiBpbml0KG4sIGYpIHtcbiAgcmV0dXJuIENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nKEJ5dGVzLmluaXQobiwgZikpO1xufVxuXG5mdW5jdGlvbiBjb3B5KHMpIHtcbiAgcmV0dXJuIENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nKEJ5dGVzLmNvcHkoQ2FtbF9ieXRlcy5ieXRlc19vZl9zdHJpbmcocykpKTtcbn1cblxuZnVuY3Rpb24gc3ViKHMsIG9mcywgbGVuKSB7XG4gIHJldHVybiBDYW1sX2J5dGVzLmJ5dGVzX3RvX3N0cmluZyhCeXRlcy5zdWIoQ2FtbF9ieXRlcy5ieXRlc19vZl9zdHJpbmcocyksIG9mcywgbGVuKSk7XG59XG5cbmZ1bmN0aW9uIGNvbmNhdChzZXAsIGwpIHtcbiAgaWYgKGwpIHtcbiAgICB2YXIgaGQgPSBsWzBdO1xuICAgIHZhciBudW0gPSAvKiByZWNvcmQgKi9bLyogY29udGVudHMgKi8wXTtcbiAgICB2YXIgbGVuID0gLyogcmVjb3JkICovWy8qIGNvbnRlbnRzICovMF07XG4gICAgTGlzdC5pdGVyKChmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgbnVtWzBdID0gbnVtWzBdICsgMSB8IDA7XG4gICAgICAgICAgICBsZW5bMF0gPSBsZW5bMF0gKyBzLmxlbmd0aCB8IDA7XG4gICAgICAgICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgICAgICAgIH0pLCBsKTtcbiAgICB2YXIgciA9IENhbWxfYnl0ZXMuY2FtbF9jcmVhdGVfYnl0ZXMobGVuWzBdICsgQ2FtbF9pbnQzMi5pbXVsKHNlcC5sZW5ndGgsIG51bVswXSAtIDEgfCAwKSB8IDApO1xuICAgIENhbWxfYnl0ZXMuY2FtbF9ibGl0X3N0cmluZyhoZCwgMCwgciwgMCwgaGQubGVuZ3RoKTtcbiAgICB2YXIgcG9zID0gLyogcmVjb3JkICovWy8qIGNvbnRlbnRzICovaGQubGVuZ3RoXTtcbiAgICBMaXN0Lml0ZXIoKGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgICBDYW1sX2J5dGVzLmNhbWxfYmxpdF9zdHJpbmcoc2VwLCAwLCByLCBwb3NbMF0sIHNlcC5sZW5ndGgpO1xuICAgICAgICAgICAgcG9zWzBdID0gcG9zWzBdICsgc2VwLmxlbmd0aCB8IDA7XG4gICAgICAgICAgICBDYW1sX2J5dGVzLmNhbWxfYmxpdF9zdHJpbmcocywgMCwgciwgcG9zWzBdLCBzLmxlbmd0aCk7XG4gICAgICAgICAgICBwb3NbMF0gPSBwb3NbMF0gKyBzLmxlbmd0aCB8IDA7XG4gICAgICAgICAgICByZXR1cm4gLyogKCkgKi8wO1xuICAgICAgICAgIH0pLCBsWzFdKTtcbiAgICByZXR1cm4gQ2FtbF9ieXRlcy5ieXRlc190b19zdHJpbmcocik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXRlcihmLCBzKSB7XG4gIHJldHVybiBCeXRlcy5pdGVyKGYsIENhbWxfYnl0ZXMuYnl0ZXNfb2Zfc3RyaW5nKHMpKTtcbn1cblxuZnVuY3Rpb24gaXRlcmkoZiwgcykge1xuICByZXR1cm4gQnl0ZXMuaXRlcmkoZiwgQ2FtbF9ieXRlcy5ieXRlc19vZl9zdHJpbmcocykpO1xufVxuXG5mdW5jdGlvbiBtYXAoZiwgcykge1xuICByZXR1cm4gQ2FtbF9ieXRlcy5ieXRlc190b19zdHJpbmcoQnl0ZXMubWFwKGYsIENhbWxfYnl0ZXMuYnl0ZXNfb2Zfc3RyaW5nKHMpKSk7XG59XG5cbmZ1bmN0aW9uIG1hcGkoZiwgcykge1xuICByZXR1cm4gQ2FtbF9ieXRlcy5ieXRlc190b19zdHJpbmcoQnl0ZXMubWFwaShmLCBDYW1sX2J5dGVzLmJ5dGVzX29mX3N0cmluZyhzKSkpO1xufVxuXG5mdW5jdGlvbiBpc19zcGFjZShwYXJhbSkge1xuICB2YXIgc3dpdGNoZXIgPSBwYXJhbSAtIDkgfCAwO1xuICBpZiAoc3dpdGNoZXIgPiA0IHx8IHN3aXRjaGVyIDwgMCkge1xuICAgIHJldHVybiBzd2l0Y2hlciA9PT0gMjM7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN3aXRjaGVyICE9PSAyO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRyaW0ocykge1xuICBpZiAocyA9PT0gXCJcIiB8fCAhKGlzX3NwYWNlKHMuY2hhckNvZGVBdCgwKSkgfHwgaXNfc3BhY2Uocy5jaGFyQ29kZUF0KHMubGVuZ3RoIC0gMSB8IDApKSkpIHtcbiAgICByZXR1cm4gcztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQ2FtbF9ieXRlcy5ieXRlc190b19zdHJpbmcoQnl0ZXMudHJpbShDYW1sX2J5dGVzLmJ5dGVzX29mX3N0cmluZyhzKSkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVzY2FwZWQocykge1xuICB2YXIgbmVlZHNfZXNjYXBlID0gZnVuY3Rpb24gKF9pKSB7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIGkgPSBfaTtcbiAgICAgIGlmIChpID49IHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBtYXRjaCA9IHMuY2hhckNvZGVBdChpKTtcbiAgICAgICAgaWYgKG1hdGNoID49IDMyKSB7XG4gICAgICAgICAgdmFyIHN3aXRjaGVyID0gbWF0Y2ggLSAzNCB8IDA7XG4gICAgICAgICAgaWYgKHN3aXRjaGVyID4gNTggfHwgc3dpdGNoZXIgPCAwKSB7XG4gICAgICAgICAgICBpZiAoc3dpdGNoZXIgPj0gOTMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoc3dpdGNoZXIgPiA1NyB8fCBzd2l0Y2hlciA8IDEpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9O1xuICBpZiAobmVlZHNfZXNjYXBlKDApKSB7XG4gICAgcmV0dXJuIENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nKEJ5dGVzLmVzY2FwZWQoQ2FtbF9ieXRlcy5ieXRlc19vZl9zdHJpbmcocykpKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcztcbiAgfVxufVxuXG5mdW5jdGlvbiBpbmRleF9yZWMocywgbGltLCBfaSwgYykge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGkgPSBfaTtcbiAgICBpZiAoaSA+PSBsaW0pIHtcbiAgICAgIHRocm93IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLm5vdF9mb3VuZDtcbiAgICB9IGVsc2UgaWYgKHMuY2hhckNvZGVBdChpKSA9PT0gYykge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgY29udGludWUgO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5kZXgocywgYykge1xuICByZXR1cm4gaW5kZXhfcmVjKHMsIHMubGVuZ3RoLCAwLCBjKTtcbn1cblxuZnVuY3Rpb24gaW5kZXhfZnJvbShzLCBpLCBjKSB7XG4gIHZhciBsID0gcy5sZW5ndGg7XG4gIGlmIChpIDwgMCB8fCBpID4gbCkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiU3RyaW5nLmluZGV4X2Zyb20gLyBCeXRlcy5pbmRleF9mcm9tXCJcbiAgICAgICAgXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gaW5kZXhfcmVjKHMsIGwsIGksIGMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJpbmRleF9yZWMocywgX2ksIGMpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBpID0gX2k7XG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICB0aHJvdyBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5ub3RfZm91bmQ7XG4gICAgfSBlbHNlIGlmIChzLmNoYXJDb2RlQXQoaSkgPT09IGMpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfaSA9IGkgLSAxIHwgMDtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJpbmRleChzLCBjKSB7XG4gIHJldHVybiByaW5kZXhfcmVjKHMsIHMubGVuZ3RoIC0gMSB8IDAsIGMpO1xufVxuXG5mdW5jdGlvbiByaW5kZXhfZnJvbShzLCBpLCBjKSB7XG4gIGlmIChpIDwgLTEgfHwgaSA+PSBzLmxlbmd0aCkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiU3RyaW5nLnJpbmRleF9mcm9tIC8gQnl0ZXMucmluZGV4X2Zyb21cIlxuICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiByaW5kZXhfcmVjKHMsIGksIGMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbnRhaW5zX2Zyb20ocywgaSwgYykge1xuICB2YXIgbCA9IHMubGVuZ3RoO1xuICBpZiAoaSA8IDAgfHwgaSA+IGwpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIlN0cmluZy5jb250YWluc19mcm9tIC8gQnl0ZXMuY29udGFpbnNfZnJvbVwiXG4gICAgICAgIF07XG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIGluZGV4X3JlYyhzLCBsLCBpLCBjKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjYXRjaCAoZXhuKXtcbiAgICAgIGlmIChleG4gPT09IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLm5vdF9mb3VuZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBleG47XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNvbnRhaW5zKHMsIGMpIHtcbiAgcmV0dXJuIGNvbnRhaW5zX2Zyb20ocywgMCwgYyk7XG59XG5cbmZ1bmN0aW9uIHJjb250YWluc19mcm9tKHMsIGksIGMpIHtcbiAgaWYgKGkgPCAwIHx8IGkgPj0gcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIlN0cmluZy5yY29udGFpbnNfZnJvbSAvIEJ5dGVzLnJjb250YWluc19mcm9tXCJcbiAgICAgICAgXTtcbiAgfSBlbHNlIHtcbiAgICB0cnkge1xuICAgICAgcmluZGV4X3JlYyhzLCBpLCBjKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjYXRjaCAoZXhuKXtcbiAgICAgIGlmIChleG4gPT09IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLm5vdF9mb3VuZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBleG47XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVwcGVyY2FzZShzKSB7XG4gIHJldHVybiBDYW1sX2J5dGVzLmJ5dGVzX3RvX3N0cmluZyhCeXRlcy51cHBlcmNhc2UoQ2FtbF9ieXRlcy5ieXRlc19vZl9zdHJpbmcocykpKTtcbn1cblxuZnVuY3Rpb24gbG93ZXJjYXNlKHMpIHtcbiAgcmV0dXJuIENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nKEJ5dGVzLmxvd2VyY2FzZShDYW1sX2J5dGVzLmJ5dGVzX29mX3N0cmluZyhzKSkpO1xufVxuXG5mdW5jdGlvbiBjYXBpdGFsaXplKHMpIHtcbiAgcmV0dXJuIENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nKEJ5dGVzLmNhcGl0YWxpemUoQ2FtbF9ieXRlcy5ieXRlc19vZl9zdHJpbmcocykpKTtcbn1cblxuZnVuY3Rpb24gdW5jYXBpdGFsaXplKHMpIHtcbiAgcmV0dXJuIENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nKEJ5dGVzLnVuY2FwaXRhbGl6ZShDYW1sX2J5dGVzLmJ5dGVzX29mX3N0cmluZyhzKSkpO1xufVxuXG52YXIgY29tcGFyZSA9IENhbWxfcHJpbWl0aXZlLmNhbWxfc3RyaW5nX2NvbXBhcmU7XG5cbnZhciBmaWxsID0gQnl0ZXMuZmlsbDtcblxudmFyIGJsaXQgPSBCeXRlcy5ibGl0X3N0cmluZztcblxuZXhwb3J0cy5tYWtlID0gbWFrZTtcbmV4cG9ydHMuaW5pdCA9IGluaXQ7XG5leHBvcnRzLmNvcHkgPSBjb3B5O1xuZXhwb3J0cy5zdWIgPSBzdWI7XG5leHBvcnRzLmZpbGwgPSBmaWxsO1xuZXhwb3J0cy5ibGl0ID0gYmxpdDtcbmV4cG9ydHMuY29uY2F0ID0gY29uY2F0O1xuZXhwb3J0cy5pdGVyID0gaXRlcjtcbmV4cG9ydHMuaXRlcmkgPSBpdGVyaTtcbmV4cG9ydHMubWFwID0gbWFwO1xuZXhwb3J0cy5tYXBpID0gbWFwaTtcbmV4cG9ydHMudHJpbSA9IHRyaW07XG5leHBvcnRzLmVzY2FwZWQgPSBlc2NhcGVkO1xuZXhwb3J0cy5pbmRleCA9IGluZGV4O1xuZXhwb3J0cy5yaW5kZXggPSByaW5kZXg7XG5leHBvcnRzLmluZGV4X2Zyb20gPSBpbmRleF9mcm9tO1xuZXhwb3J0cy5yaW5kZXhfZnJvbSA9IHJpbmRleF9mcm9tO1xuZXhwb3J0cy5jb250YWlucyA9IGNvbnRhaW5zO1xuZXhwb3J0cy5jb250YWluc19mcm9tID0gY29udGFpbnNfZnJvbTtcbmV4cG9ydHMucmNvbnRhaW5zX2Zyb20gPSByY29udGFpbnNfZnJvbTtcbmV4cG9ydHMudXBwZXJjYXNlID0gdXBwZXJjYXNlO1xuZXhwb3J0cy5sb3dlcmNhc2UgPSBsb3dlcmNhc2U7XG5leHBvcnRzLmNhcGl0YWxpemUgPSBjYXBpdGFsaXplO1xuZXhwb3J0cy51bmNhcGl0YWxpemUgPSB1bmNhcGl0YWxpemU7XG5leHBvcnRzLmNvbXBhcmUgPSBjb21wYXJlO1xuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBUIFZFUlNJT04gNS4wLjAsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgTGlzdCA9IHJlcXVpcmUoXCJicy1wbGF0Zm9ybS9saWIvanMvbGlzdC5qc1wiKTtcbnZhciBCbG9jayA9IHJlcXVpcmUoXCJicy1wbGF0Zm9ybS9saWIvanMvYmxvY2suanNcIik7XG52YXIgQ3VycnkgPSByZXF1aXJlKFwiYnMtcGxhdGZvcm0vbGliL2pzL2N1cnJ5LmpzXCIpO1xudmFyIFByaW50ZiA9IHJlcXVpcmUoXCJicy1wbGF0Zm9ybS9saWIvanMvcHJpbnRmLmpzXCIpO1xudmFyICQkU3RyaW5nID0gcmVxdWlyZShcImJzLXBsYXRmb3JtL2xpYi9qcy9zdHJpbmcuanNcIik7XG52YXIgQ2FtbF9leGNlcHRpb25zID0gcmVxdWlyZShcImJzLXBsYXRmb3JtL2xpYi9qcy9jYW1sX2V4Y2VwdGlvbnMuanNcIik7XG5cbmZ1bmN0aW9uIGlzRW1wdHkocGFyYW0pIHtcbiAgaWYgKHBhcmFtKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJhbmsocGFyYW0pIHtcbiAgcmV0dXJuIHBhcmFtWzBdO1xufVxuXG5mdW5jdGlvbiByb290KHBhcmFtKSB7XG4gIHJldHVybiBwYXJhbVsxXTtcbn1cblxuZnVuY3Rpb24gbGluayh0MSwgdDIpIHtcbiAgdmFyIHgyID0gdDJbMV07XG4gIHZhciB4MSA9IHQxWzFdO1xuICB2YXIgciA9IHQxWzBdO1xuICBpZiAoeDEgPD0geDIpIHtcbiAgICByZXR1cm4gLyogTm9kZSAqL1tcbiAgICAgICAgICAgIHIgKyAxIHwgMCxcbiAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgdDFbMl0sXG4gICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgdDIsXG4gICAgICAgICAgICAgIHQxWzNdXG4gICAgICAgICAgICBdXG4gICAgICAgICAgXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogTm9kZSAqL1tcbiAgICAgICAgICAgIHIgKyAxIHwgMCxcbiAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgdDJbMl0sXG4gICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgdDEsXG4gICAgICAgICAgICAgIHQyWzNdXG4gICAgICAgICAgICBdXG4gICAgICAgICAgXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBza2V3TGluayh4LCB0MSwgdDIpIHtcbiAgdmFyIG1hdGNoID0gbGluayh0MSwgdDIpO1xuICB2YXIgYyA9IG1hdGNoWzNdO1xuICB2YXIgeXMgPSBtYXRjaFsyXTtcbiAgdmFyIHkgPSBtYXRjaFsxXTtcbiAgdmFyIHIgPSBtYXRjaFswXTtcbiAgaWYgKHggPD0geSkge1xuICAgIHJldHVybiAvKiBOb2RlICovW1xuICAgICAgICAgICAgcixcbiAgICAgICAgICAgIHgsXG4gICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgeSxcbiAgICAgICAgICAgICAgeXNcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBjXG4gICAgICAgICAgXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogTm9kZSAqL1tcbiAgICAgICAgICAgIHIsXG4gICAgICAgICAgICB5LFxuICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgIHgsXG4gICAgICAgICAgICAgIHlzXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgY1xuICAgICAgICAgIF07XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5zVHJlZShfdDEsIF90Mikge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHQyID0gX3QyO1xuICAgIHZhciB0MSA9IF90MTtcbiAgICBpZiAodDIpIHtcbiAgICAgIHZhciB0cyA9IHQyWzFdO1xuICAgICAgdmFyIHQyJDEgPSB0MlswXTtcbiAgICAgIGlmIChyYW5rKHQxKSA8IHJhbmsodDIkMSkpIHtcbiAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgIHQxLFxuICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgdDIkMSxcbiAgICAgICAgICAgICAgICAgIHRzXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3QyID0gdHM7XG4gICAgICAgIF90MSA9IGxpbmsodDEsIHQyJDEpO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgdDEsXG4gICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgXTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1lcmdlVHJlZXMocGFyYW0pIHtcbiAgdmFyIHRzMSA9IHBhcmFtWzBdO1xuICBpZiAocGFyYW1bMV0pIHtcbiAgICBpZiAodHMxKSB7XG4gICAgICB2YXIgdHMyID0gcGFyYW1bMV07XG4gICAgICB2YXIgdHMyXyA9IHRzMlsxXTtcbiAgICAgIHZhciB0MiA9IHRzMlswXTtcbiAgICAgIHZhciB0czFfID0gdHMxWzFdO1xuICAgICAgdmFyIHQxID0gdHMxWzBdO1xuICAgICAgaWYgKHJhbmsodDEpIDwgcmFuayh0MikpIHtcbiAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgIHQxLFxuICAgICAgICAgICAgICAgIG1lcmdlVHJlZXMoLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgdHMxXyxcbiAgICAgICAgICAgICAgICAgICAgICB0czJcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgXTtcbiAgICAgIH0gZWxzZSBpZiAocmFuayh0MikgPCByYW5rKHQxKSkge1xuICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgdDIsXG4gICAgICAgICAgICAgICAgbWVyZ2VUcmVlcygvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICB0czEsXG4gICAgICAgICAgICAgICAgICAgICAgdHMyX1xuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGluc1RyZWUobGluayh0MSwgdDIpLCBtZXJnZVRyZWVzKC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgdHMxXyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRzMl9cbiAgICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwYXJhbVsxXTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRzMTtcbiAgfVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemUocGFyYW0pIHtcbiAgaWYgKHBhcmFtKSB7XG4gICAgcmV0dXJuIGluc1RyZWUocGFyYW1bMF0sIHBhcmFtWzFdKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogW10gKi8wO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluc2VydCh4LCB0cykge1xuICB2YXIgZXhpdCA9IDA7XG4gIGlmICh0cykge1xuICAgIHZhciBtYXRjaCA9IHRzWzFdO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgdmFyIHQyID0gbWF0Y2hbMF07XG4gICAgICB2YXIgdDEgPSB0c1swXTtcbiAgICAgIGlmIChyYW5rKHQxKSA9PT0gcmFuayh0MikpIHtcbiAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgIHNrZXdMaW5rKHgsIHQxLCB0MiksXG4gICAgICAgICAgICAgICAgbWF0Y2hbMV1cbiAgICAgICAgICAgICAgXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGV4aXQgPSAxO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBleGl0ID0gMTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZXhpdCA9IDE7XG4gIH1cbiAgaWYgKGV4aXQgPT09IDEpIHtcbiAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAvKiBOb2RlICovW1xuICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICB4LFxuICAgICAgICAgICAgICAvKiBbXSAqLzAsXG4gICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIHRzXG4gICAgICAgICAgXTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gbWVyZ2UodHMxLCB0czIpIHtcbiAgcmV0dXJuIG1lcmdlVHJlZXMoLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgIG5vcm1hbGl6ZSh0czEpLFxuICAgICAgICAgICAgICBub3JtYWxpemUodHMyKVxuICAgICAgICAgICAgXSk7XG59XG5cbnZhciBFbXB0eSA9IENhbWxfZXhjZXB0aW9ucy5jcmVhdGUoXCJIZWFwLkVtcHR5XCIpO1xuXG5mdW5jdGlvbiByZW1vdmVNaW5UcmVlKHBhcmFtKSB7XG4gIGlmIChwYXJhbSkge1xuICAgIHZhciB0cyA9IHBhcmFtWzFdO1xuICAgIHZhciB0ID0gcGFyYW1bMF07XG4gICAgaWYgKHRzKSB7XG4gICAgICB2YXIgbWF0Y2ggPSByZW1vdmVNaW5UcmVlKHRzKTtcbiAgICAgIHZhciB0XyA9IG1hdGNoWzBdO1xuICAgICAgaWYgKHJvb3QodCkgPCByb290KHRfKSkge1xuICAgICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgdCxcbiAgICAgICAgICAgICAgICB0c1xuICAgICAgICAgICAgICBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgIHRfLFxuICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgdCxcbiAgICAgICAgICAgICAgICAgIG1hdGNoWzFdXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICBdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgIHQsXG4gICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgXTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgRW1wdHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVsZXRlTWluKHRzKSB7XG4gIHZhciBtYXRjaCA9IHJlbW92ZU1pblRyZWUodHMpO1xuICB2YXIgbWF0Y2gkMSA9IG1hdGNoWzBdO1xuICB2YXIgX3BhcmFtID0gLyogdHVwbGUgKi9bXG4gICAgbWF0Y2gkMVsyXSxcbiAgICBtZXJnZShMaXN0LnJldihtYXRjaCQxWzNdKSwgbWF0Y2hbMV0pXG4gIF07XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcGFyYW0gPSBfcGFyYW07XG4gICAgdmFyIG1hdGNoJDIgPSBwYXJhbVswXTtcbiAgICBpZiAobWF0Y2gkMikge1xuICAgICAgX3BhcmFtID0gLyogdHVwbGUgKi9bXG4gICAgICAgIG1hdGNoJDJbMV0sXG4gICAgICAgIGluc2VydChtYXRjaCQyWzBdLCBwYXJhbVsxXSlcbiAgICAgIF07XG4gICAgICBjb250aW51ZSA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwYXJhbVsxXTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGpzX29mX3RyZWUocGFyYW0pIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICB0ZXh0OiB7XG4gICAgICAgICAgICB0aXRsZTogU3RyaW5nKHBhcmFtWzFdKSxcbiAgICAgICAgICAgIG5hbWU6IEN1cnJ5Ll8yKFByaW50Zi5zcHJpbnRmKC8qIEZvcm1hdCAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAvKiBTdHJpbmdfbGl0ZXJhbCAqL0Jsb2NrLl9fKDExLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwicmFuaz1cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogSW50ICovQmxvY2suX18oNCwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogSW50X2QgKi8wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogTm9fcGFkZGluZyAqLzAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBOb19wcmVjaXNpb24gKi8wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogU3RyaW5nX2xpdGVyYWwgKi9CbG9jay5fXygxMSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiIGF1eD1bXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogU3RyaW5nICovQmxvY2suX18oMiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBOb19wYWRkaW5nICovMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogQ2hhcl9saXRlcmFsICovQmxvY2suX18oMTIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFwiXVwiICovOTMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBFbmRfb2ZfZm9ybWF0ICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICBcInJhbms9JWQgYXV4PVslc11cIlxuICAgICAgICAgICAgICAgICAgICBdKSwgcGFyYW1bMF0sICQkU3RyaW5nLmNvbmNhdChcIixcIiwgTGlzdC5tYXAoKGZ1bmN0aW9uIChwcmltKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZyhwcmltKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIHBhcmFtWzJdKSkpXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjaGlsZHJlbjogTGlzdC5tYXAoanNfb2ZfdHJlZSwgcGFyYW1bM10pXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIGpzX29mX2hlYXAocGFyYW0pIHtcbiAgcmV0dXJuIExpc3QubWFwKGpzX29mX3RyZWUsIHBhcmFtKTtcbn1cblxuZnVuY3Rpb24ganNvbl9vZl90cmVlKHBhcmFtKSB7XG4gIHZhciByID0gcGFyYW1bMF07XG4gIHJldHVybiBDdXJyeS5fNChQcmludGYuc3ByaW50ZigvKiBGb3JtYXQgKi9bXG4gICAgICAgICAgICAgICAgICAvKiBTdHJpbmdfbGl0ZXJhbCAqL0Jsb2NrLl9fKDExLCBbXG4gICAgICAgICAgICAgICAgICAgICAgXCJ7XFxcInJhbmtcXFwiOiBcIixcbiAgICAgICAgICAgICAgICAgICAgICAvKiBJbnQgKi9CbG9jay5fXyg0LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIEludF9kICovMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogTm9fcGFkZGluZyAqLzAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIE5vX3ByZWNpc2lvbiAqLzAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFN0cmluZ19saXRlcmFsICovQmxvY2suX18oMTEsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiLCBcXFwidGV4dFxcXCI6IHtcXFwidGl0bGVcXFwiOiBcXFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBTdHJpbmcgKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogTm9fcGFkZGluZyAqLzAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogU3RyaW5nX2xpdGVyYWwgKi9CbG9jay5fXygxMSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlxcXCIsIFxcXCJuYW1lXFxcIjogXFxcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBTdHJpbmcgKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBOb19wYWRkaW5nICovMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFN0cmluZ19saXRlcmFsICovQmxvY2suX18oMTEsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlxcXCJ9LCBcXFwiY2hpbGRyZW5cXFwiOltcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBTdHJpbmcgKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIE5vX3BhZGRpbmcgKi8wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBTdHJpbmdfbGl0ZXJhbCAqL0Jsb2NrLl9fKDExLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIl19XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBFbmRfb2ZfZm9ybWF0ICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgIFwie1xcXCJyYW5rXFxcIjogJWQsIFxcXCJ0ZXh0XFxcIjoge1xcXCJ0aXRsZVxcXCI6IFxcXCIlc1xcXCIsIFxcXCJuYW1lXFxcIjogXFxcIiVzXFxcIn0sIFxcXCJjaGlsZHJlblxcXCI6WyVzXX1cIlxuICAgICAgICAgICAgICAgIF0pLCByLCBTdHJpbmcocGFyYW1bMV0pLCBDdXJyeS5fMihQcmludGYuc3ByaW50ZigvKiBGb3JtYXQgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgLyogU3RyaW5nX2xpdGVyYWwgKi9CbG9jay5fXygxMSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcInJhbms9XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIEludCAqL0Jsb2NrLl9fKDQsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIEludF9kICovMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIE5vX3BhZGRpbmcgKi8wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogTm9fcHJlY2lzaW9uICovMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFN0cmluZ19saXRlcmFsICovQmxvY2suX18oMTEsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiBhdXg9W1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFN0cmluZyAqL0Jsb2NrLl9fKDIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogTm9fcGFkZGluZyAqLzAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIENoYXJfbGl0ZXJhbCAqL0Jsb2NrLl9fKDEyLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBcIl1cIiAqLzkzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogRW5kX29mX2Zvcm1hdCAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgXCJyYW5rPSVkIGF1eD1bJXNdXCJcbiAgICAgICAgICAgICAgICAgICAgXSksIHIsICQkU3RyaW5nLmNvbmNhdChcIixcIiwgTGlzdC5tYXAoKGZ1bmN0aW9uIChwcmltKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZyhwcmltKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIHBhcmFtWzJdKSkpLCAkJFN0cmluZy5jb25jYXQoXCIsXCIsIExpc3QubWFwKGpzb25fb2ZfdHJlZSwgcGFyYW1bM10pKSk7XG59XG5cbmZ1bmN0aW9uIGpzb25fb2ZfaGVhcCh0cykge1xuICByZXR1cm4gXCJbXCIgKyAoJCRTdHJpbmcuY29uY2F0KFwiLFwiLCBMaXN0Lm1hcChqc29uX29mX3RyZWUsIHRzKSkgKyBcIl1cIik7XG59XG5cbnZhciBlbXB0eSA9IC8qIFtdICovMDtcblxuZXhwb3J0cy5lbXB0eSA9IGVtcHR5O1xuZXhwb3J0cy5pc0VtcHR5ID0gaXNFbXB0eTtcbmV4cG9ydHMucmFuayA9IHJhbms7XG5leHBvcnRzLnJvb3QgPSByb290O1xuZXhwb3J0cy5saW5rID0gbGluaztcbmV4cG9ydHMuc2tld0xpbmsgPSBza2V3TGluaztcbmV4cG9ydHMuaW5zVHJlZSA9IGluc1RyZWU7XG5leHBvcnRzLm1lcmdlVHJlZXMgPSBtZXJnZVRyZWVzO1xuZXhwb3J0cy5ub3JtYWxpemUgPSBub3JtYWxpemU7XG5leHBvcnRzLmluc2VydCA9IGluc2VydDtcbmV4cG9ydHMubWVyZ2UgPSBtZXJnZTtcbmV4cG9ydHMuRW1wdHkgPSBFbXB0eTtcbmV4cG9ydHMucmVtb3ZlTWluVHJlZSA9IHJlbW92ZU1pblRyZWU7XG5leHBvcnRzLmRlbGV0ZU1pbiA9IGRlbGV0ZU1pbjtcbmV4cG9ydHMuanNfb2ZfdHJlZSA9IGpzX29mX3RyZWU7XG5leHBvcnRzLmpzX29mX2hlYXAgPSBqc19vZl9oZWFwO1xuZXhwb3J0cy5qc29uX29mX3RyZWUgPSBqc29uX29mX3RyZWU7XG5leHBvcnRzLmpzb25fb2ZfaGVhcCA9IGpzb25fb2ZfaGVhcDtcbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iXX0=
